-- MySQL dump 10.13  Distrib 5.1.41, for debian-linux-gnu (i486)
--
-- Host: localhost    Database: db_ant
-- ------------------------------------------------------
-- Server version	5.1.41-3ubuntu12.10

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ant_book`
--

DROP TABLE IF EXISTS `ant_book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_book` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL,
  `author` varchar(100) NOT NULL,
  `publisher` varchar(25) DEFAULT NULL,
  `edition` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_book`
--

LOCK TABLES `ant_book` WRITE;
/*!40000 ALTER TABLE `ant_book` DISABLE KEYS */;
INSERT INTO `ant_book` VALUES (1,'Computer Networks','Andrew S. Tanenbum','Pearson','4th edition, 2002'),(2,'Data Communication and Networking','Behrouz A Forouzan','Tata Mgraw Hill','4th edition, 2009'),(3,'Introduction to Network Simulator NS2','Teerawat Issariyakul, Ekram Hossain','Springer','1st edition, 2008'),(5,' Handbook of Wireless Networks and Mobile Computin','Ivan Stojmenovic ','John Wiley & Sons, Inc. ','2002 '),(6,'Computer Networking: A Top-Down Approach Featuring','James Kurose, Keith Ross','Pearson (2005)','3rd Edition');
/*!40000 ALTER TABLE `ant_book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_contact`
--

DROP TABLE IF EXISTS `ant_contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_contact` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL,
  `email` varchar(75) NOT NULL,
  `website` varchar(200) DEFAULT NULL,
  `organization` varchar(25) DEFAULT NULL,
  `subject` varchar(35) NOT NULL,
  `comment` longtext NOT NULL,
  `post_date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_contact`
--

LOCK TABLES `ant_contact` WRITE;
/*!40000 ALTER TABLE `ant_contact` DISABLE KEYS */;
INSERT INTO `ant_contact` VALUES (1,'Tanay chaki','tanay1587@gmail.com','','iit','network','details','2010-11-02 21:09:38'),(2,'Barun Saha','barun.saha04@gmail.com','','IIT Kharagpur','Checking','Checking.....','2010-11-03 10:04:40'),(3,'Tanay C','tanay1587@yahoo.co.in','http://vlssit.iitkgp.ernet.in','SIT','ANT Test2','test','2010-11-03 16:31:43'),(4,'Arun Kumar Sadhu','arunhena1@yahoo.com','','DIATM, Durgapur','feedback','sir, \r\n        It\'s a great website for the ns2 beginers,\r\n        If I face any problem with ns2 can I contact with you through this page with my problem?','2011-05-16 12:24:41'),(5,'friend','helot_of_god@yahoo.com','','','question','hi my dear friend\r\ni have many question in ns.\r\n\r\n\r\n1) how i can simulate a webserver (how code or command or class & objects?)\r\n\r\n2) how i can install gnuplot?\r\n- how i can show the output analyze file, in gnuplot? (how code or command?)\r\n\r\n3) if i use SCTP  Protocol&Agent,how should i do? (how code or command?)\r\n\r\n\r\nvery thanks...','2011-06-15 21:09:14'),(6,'Tapan Jain','tapankumarjain@gmail.com','','JUIT','WSN','Kindly improve exercise and reference part. Most of the tab gives sql related error.\r\n\r\nHow to start study and simulation WSN.\r\n\r\n','2011-07-21 22:06:08'),(7,'Dinesh','dinesh110989@gmail.com','','IIT KGP','acess point details of IIT KGP','Respected sir,\r\nLets suppose I am trying to setup a connection between my mobile point and WiFi, which is widespread in whole campus, what are should be access point address?\r\nWould it be like iitkgp.ernet.in or like 144.16.192.245. What is difference between above two?\r\n\r\nThank you','2012-01-05 16:39:37'),(8,'gurura sp','gururaj.sjce@gmail.com','http://sit.ac.in/cse/cse_faculty.html','SIT Tumkur','Computer Network','I am working Creation of dynamic cluster in Wireless sensor network. Do how achieve this. Can you please help. \r\n\r\nThanks ','2012-03-02 10:41:35'),(9,'Sharwari','solapure_ss@yahoo.co.in','','Walchand college of engg.','Wireless sensor network','I want information of WSN simulation and visualization','2012-08-16 15:20:54'),(10,'Rama Chaithanya Tanguturi','trchaitanya@yahoo.com','','Anna University','Ns-2','It was been excellent to see virtual lab. If NS-2 or NS-3 tutorial with some lectures by experts, will be more advantageous.','2012-12-29 22:47:18');
/*!40000 ALTER TABLE `ant_contact` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_defaultcode`
--

DROP TABLE IF EXISTS `ant_defaultcode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_defaultcode` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exercise_id` int(11) NOT NULL,
  `code_type` varchar(5) DEFAULT NULL,
  `code` longtext,
  PRIMARY KEY (`id`),
  KEY `ant_defaultcode_2799bae2` (`exercise_id`),
  CONSTRAINT `exercise_id_refs_id_284a95ce` FOREIGN KEY (`exercise_id`) REFERENCES `ant_exercise` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_defaultcode`
--

LOCK TABLES `ant_defaultcode` WRITE;
/*!40000 ALTER TABLE `ant_defaultcode` DISABLE KEYS */;
INSERT INTO `ant_defaultcode` VALUES (1,1,'','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(2,2,'','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(3,5,'','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(4,6,'','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(5,3,'','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(6,4,'','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(7,7,'','/*\r\n * This program is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License version 2 as\r\n * published by the Free Software Foundation;\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n */\r\n\r\n// Default Network Topology\r\n//\r\n//   Wifi 10.1.1.0\r\n//       AP\r\n//  *    *  \r\n//  |    |\r\n// n1   n0\r\n//\r\n// Node #0 is the AP, #1 is a base station\r\n// #1 sends UDP echo mesg to the AP; AP sends a UDP response back to the node\r\n// Communication is possible only when the station is within a certain distance from the AP\r\n\r\n#include \"ns3/core-module.h\"\r\n#include \"ns3/simulator-module.h\"\r\n#include \"ns3/node-module.h\"\r\n#include \"ns3/helper-module.h\"\r\n#include \"ns3/wifi-module.h\"\r\n#include \"ns3/mobility-module.h\"\r\n#include \"ns3/ipv4-global-routing-helper.h\"\r\n\r\nusing namespace ns3;\r\n\r\nNS_LOG_COMPONENT_DEFINE (\"Wifi-2-nodes-fixed\");\r\n\r\nvoid\r\nPrintLocations (NodeContainer nodes, std::string header)\r\n{\r\n  std::cout << header << std::endl;\r\n  for(NodeContainer::Iterator iNode = nodes.Begin (); iNode != nodes.End (); ++iNode)\r\n  {\r\n    Ptr<Node> object = *iNode;\r\n    Ptr<MobilityModel> position = object->GetObject<MobilityModel> ();\r\n    NS_ASSERT (position != 0);\r\n    Vector pos = position->GetPosition ();\r\n    std::cout << \"(\" << pos.x << \", \" << pos.y << \", \" << pos.z << \")\" << std::endl;\r\n  }\r\n  std::cout << std::endl;\r\n} \r\n\r\nvoid\r\nPrintAddresses(Ipv4InterfaceContainer container, std::string header)\r\n{\r\n  std::cout << header << std::endl;\r\n  uint32_t nNodes = container.GetN ();\r\n   for (uint32_t i = 0; i < nNodes; ++i)\r\n     {       \r\n       std::cout << container.GetAddress(i, 0) << std::endl;\r\n     }\r\n   std::cout << std::endl;\r\n}\r\n\r\n\r\nint \r\nmain (int argc, char *argv[])\r\n{\r\n  bool verbose = true;\r\n  uint32_t nWifi = 2;   \r\n  /** Change this parameter and verify the output */\r\n  double xDistance = 10.0;\r\n  \r\n  CommandLine cmd;  \r\n  cmd.AddValue (\"xDistance\", \"Distance between two nodes along x-axis\", xDistance);\r\n \r\n  cmd.Parse (argc,argv);\r\n\r\n  if (verbose)\r\n    {\r\n      LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO);\r\n      LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO);\r\n    }\r\n\r\n  // 1. Create the nodes and hold them in a container\r\n  NodeContainer wifiStaNodes,\r\n                wifiApNode;\r\n                \r\n  wifiStaNodes.Create (nWifi);\r\n  wifiApNode    = wifiStaNodes.Get (0);\r\n\r\n  // 2. Create channel for communication\r\n  YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();\r\n  YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();\r\n  phy.SetChannel (channel.Create ());\r\n\r\n  WifiHelper wifi = WifiHelper::Default ();\r\n  wifi.SetRemoteStationManager (\"ns3::AarfWifiManager\");\r\n  \r\n  NqosWifiMacHelper mac = NqosWifiMacHelper::Default ();\r\n\r\n  // 3a. Set up MAC for base stations\r\n  Ssid ssid = Ssid (\"ns-3-ssid\");\r\n  mac.SetType (\"ns3::StaWifiMac\",\r\n               \"Ssid\", SsidValue (ssid),\r\n               \"ActiveProbing\", BooleanValue (false));\r\n\r\n  NetDeviceContainer staDevices;\r\n  staDevices = wifi.Install (phy, mac, wifiStaNodes.Get (1));\r\n\r\n  // 3b. Set up MAC for AP\r\n  mac.SetType (\"ns3::ApWifiMac\",\r\n               \"Ssid\", SsidValue (ssid),\r\n               \"BeaconGeneration\", BooleanValue (true),\r\n               \"BeaconInterval\", TimeValue (Seconds (5)));\r\n\r\n  NetDeviceContainer apDevice;\r\n  apDevice = wifi.Install (phy, mac, wifiApNode);\r\n\r\n  // 4. Set mobility of the nodes\r\n  MobilityHelper mobility;\r\n\r\n  // All space coordinates in meter\r\n  mobility.SetPositionAllocator (\"ns3::GridPositionAllocator\",\r\n                                 \"MinX\", DoubleValue (0.0),\r\n                                 \"MinY\", DoubleValue (0.0),\r\n                                 \"DeltaX\", DoubleValue (xDistance),\r\n                                 \"DeltaY\", DoubleValue (10.0),\r\n                                 \"GridWidth\", UintegerValue (3),\r\n                                 \"LayoutType\", StringValue (\"RowFirst\"));\r\n                                 \r\n  mobility.SetMobilityModel (\"ns3::ConstantPositionMobilityModel\");\r\n  mobility.Install (wifiStaNodes);\r\n\r\n  // 5.Add Internet layers stack\r\n  InternetStackHelper stack; \r\n  stack.Install (wifiStaNodes);\r\n\r\n  // 6. Assign IP address to each device\r\n  Ipv4AddressHelper address;\r\n  Ipv4InterfaceContainer wifiInterfaces,\r\n                         wifiApInterface;                         \r\n\r\n  address.SetBase (\"10.1.1.0\", \"255.255.255.0\");    \r\n  wifiApInterface = address.Assign (apDevice);\r\n  wifiInterfaces = address.Assign (staDevices);\r\n\r\n  // 7a. Create and setup applications (traffic sink)\r\n  UdpEchoServerHelper echoServer (9);     // Port # 9\r\n\r\n  ApplicationContainer serverApps = echoServer.Install (wifiApNode);\r\n  serverApps.Start (Seconds (1.0));\r\n  serverApps.Stop (Seconds (4.0));\r\n\r\n  // 7b. Create and setup applications (traffic source)\r\n  UdpEchoClientHelper echoClient (wifiApInterface.GetAddress (0), 9);\r\n  echoClient.SetAttribute (\"MaxPackets\", UintegerValue (1));\r\n  echoClient.SetAttribute (\"Interval\", TimeValue (Seconds (1.)));\r\n  echoClient.SetAttribute (\"PacketSize\", UintegerValue (1024));\r\n\r\n  ApplicationContainer clientApps = echoClient.Install (wifiStaNodes.Get (1));     \r\n  clientApps.Start (Seconds (2.0));\r\n  clientApps.Stop (Seconds (3.0));\r\n\r\n  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();\r\n\r\n  Simulator::Stop (Seconds (4.0));\r\n\r\n  // 8. Enable tracing (optional)\r\n  //phy.EnablePcapAll (\"wifi-2-nodes-fixed\", true);\r\n  \r\n  PrintAddresses(wifiInterfaces, \"IP addresses of base stations\");\r\n  PrintAddresses(wifiApInterface, \"IP address of AP\");\r\n  PrintLocations(wifiStaNodes, \"Location of all nodes\");\r\n  \r\n  Simulator::Run ();\r\n  Simulator::Destroy ();\r\n  \r\n  return 0;\r\n}'),(8,8,'ns3','/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\r\n/*\r\n * Copyright (c) 2010 IITP RAS\r\n *\r\n * This program is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License version 2 as\r\n * published by the Free Software Foundation;\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n *\r\n * Authors: Pavel Boyko <boyko@iitp.ru>\r\n */\r\n\r\n/*\r\n * Classical hidden terminal problem and its RTS/CTS solution.\r\n *\r\n * Topology: [node 0] <-- -50 dB --> [node 1] <-- -50 dB --> [node 2]\r\n * \r\n * This example illustrates the use of \r\n *  - Wifi in ad-hoc mode\r\n *  - Matrix propagation loss model\r\n *  - Use of OnOffApplication to generate CBR stream \r\n *  - IP flow monitor\r\n */\r\n \r\n#include \"ns3/core-module.h\"\r\n#include \"ns3/common-module.h\"\r\n#include \"ns3/node-module.h\"\r\n#include \"ns3/helper-module.h\"\r\n#include \"ns3/mobility-module.h\"\r\n#include \"ns3/flow-monitor-module.h\"\r\n\r\n#include \"ns3/wifi-net-device.h\"\r\n#include \"ns3/wifi-phy.h\"\r\n#include \"ns3/yans-wifi-phy.h\"\r\n\r\nusing namespace ns3;\r\n\r\nNS_LOG_COMPONENT_DEFINE (\"Wifi-hidden-terminal\");\r\n\r\n/// Print the coordinates of the specified nodes\r\nvoid\r\nPrintLocations (NodeContainer nodes, std::string header)\r\n{\r\n  std::cout << header << std::endl;\r\n  for(NodeContainer::Iterator iNode = nodes.Begin (); iNode != nodes.End (); ++iNode)\r\n  {\r\n    Ptr<Node> object = *iNode;\r\n    Ptr<MobilityModel> position = object->GetObject<MobilityModel> ();\r\n    NS_ASSERT (position != 0);\r\n    Vector pos = position->GetPosition ();\r\n    std::cout << \"(\" << pos.x << \", \" << pos.y << \", \" << pos.z << \")\" << std::endl;\r\n  }\r\n  std::cout << std::endl;\r\n} \r\n\r\n/// Run an experiment with enabled or disabled RTS/CTS mechanism\r\nvoid \r\nexperiment (bool enableCtsRts, uint16_t iSimulationTime)\r\n{\r\n  std::cout << \"Simulation duration: \" << iSimulationTime << \"s with RTS/CTS: \" << enableCtsRts << std::endl;\r\n  \r\n  // 0. Enable or disable CTS/RTS\r\n  UintegerValue ctsThr = (enableCtsRts ? UintegerValue (100) : UintegerValue (2200));\r\n  Config::SetDefault (\"ns3::WifiRemoteStationManager::RtsCtsThreshold\", ctsThr);\r\n  \r\n  // 1. Create 3 nodes \r\n  NodeContainer nodes;\r\n  nodes.Create (3);\r\n  \r\n  // 2. Place nodes somehow, this is required by every wireless simulation\r\n  MobilityHelper mobility;\r\n  mobility.SetPositionAllocator (\"ns3::GridPositionAllocator\",\r\n                                 \"MinX\", DoubleValue (0.0),\r\n                                 \"MinY\", DoubleValue (0.0),\r\n                                 \"DeltaX\", DoubleValue (150),\r\n                                 \"DeltaY\", DoubleValue (10.0),\r\n                                 \"GridWidth\", UintegerValue (3),\r\n                                 \"LayoutType\", StringValue (\"RowFirst\"));\r\n  mobility.SetMobilityModel (\"ns3::ConstantPositionMobilityModel\");\r\n  mobility.Install (nodes);\r\n  \r\n  PrintLocations (nodes, \"Nodes position\");\r\n  \r\n  // 3. Create propagation loss matrix\r\n  Ptr<MatrixPropagationLossModel> lossModel = CreateObject<MatrixPropagationLossModel> ();\r\n  lossModel->SetDefaultLoss (200); // set default loss to 200 dB (no link)\r\n  lossModel->SetLoss (nodes.Get (0), nodes.Get (1), 50); // set symmetric loss 0 <-> 1 to 50 dB\r\n  lossModel->SetLoss (nodes.Get (2), nodes.Get (1), 50); // set symmetric loss 2 <-> 1 to 50 dB\r\n\r\n  // 4. Create & setup wifi channel\r\n\r\n  Ptr<YansWifiChannel> wifiChannel = CreateObject <YansWifiChannel> ();\r\n  wifiChannel->SetPropagationLossModel (lossModel);\r\n  wifiChannel->SetPropagationDelayModel (CreateObject <ConstantSpeedPropagationDelayModel> ());\r\n   \r\n  // 5. Install wireless devices\r\n  WifiHelper wifi;\r\n  wifi.SetStandard (WIFI_PHY_STANDARD_80211b);\r\n  wifi.SetRemoteStationManager (\"ns3::ConstantRateWifiManager\", \r\n                                \"DataMode\",StringValue (\"DsssRate2Mbps\"), \r\n                                \"ControlMode\",StringValue (\"DsssRate1Mbps\"));\r\n  YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();\r\n  wifiPhy.SetChannel (wifiChannel);\r\n  NqosWifiMacHelper wifiMac = NqosWifiMacHelper::Default ();\r\n  wifiMac.SetType (\"ns3::AdhocWifiMac\"); // use ad-hoc MAC\r\n  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes);\r\n\r\n \r\n  // 6. Install TCP/IP stack & assign IP addresses\r\n  InternetStackHelper internet;\r\n  internet.Install (nodes);\r\n  Ipv4AddressHelper ipv4;\r\n  ipv4.SetBase (\"10.0.0.0\", \"255.0.0.0\");\r\n  ipv4.Assign (devices);\r\n  \r\n  // 7. Install applications: two CBR streams each saturating the channel \r\n  ApplicationContainer cbrApps;\r\n  uint16_t cbrPort = 12345;\r\n  OnOffHelper onOffHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address (\"10.0.0.2\"), cbrPort));\r\n  onOffHelper.SetAttribute (\"PacketSize\", UintegerValue (200));\r\n  onOffHelper.SetAttribute (\"OnTime\",  RandomVariableValue (ConstantVariable (1)));\r\n  onOffHelper.SetAttribute (\"OffTime\", RandomVariableValue (ConstantVariable (0)));\r\n\r\n  // flow 1:  node 0 -> node 1\r\n  onOffHelper.SetAttribute (\"DataRate\", StringValue (\"3000000bps\"));\r\n  onOffHelper.SetAttribute (\"StartTime\", TimeValue (Seconds (1.000000)));\r\n  cbrApps.Add (onOffHelper.Install (nodes.Get (0))); \r\n\r\n  // flow 2:  node 2 -> node 1\r\n  // The slightly different start times and data rates are a workround\r\n  // for Bug 388 and Bug 912\r\n  // http://www.nsnam.org/bugzilla/show_bug.cgi?id=912\r\n  // http://www.nsnam.org/bugzilla/show_bug.cgi?id=388\r\n  onOffHelper.SetAttribute (\"DataRate\", StringValue (\"3001100bps\"));\r\n  onOffHelper.SetAttribute (\"StartTime\", TimeValue (Seconds (1.001)));\r\n  cbrApps.Add (onOffHelper.Install (nodes.Get (2))); \r\n\r\n  // we also use separate UDP applications that will send a single\r\n  // packet before the CBR flows start. \r\n  // This is a workround for the lack of perfect ARP, see Bug 187\r\n  // http://www.nsnam.org/bugzilla/show_bug.cgi?id=187   \r\n\r\n  uint16_t  echoPort = 9;\r\n  UdpEchoClientHelper echoClientHelper (Ipv4Address (\"10.0.0.2\"), echoPort);\r\n  echoClientHelper.SetAttribute (\"MaxPackets\", UintegerValue (1));\r\n  echoClientHelper.SetAttribute (\"Interval\", TimeValue (Seconds (0.1)));\r\n  echoClientHelper.SetAttribute (\"PacketSize\", UintegerValue (10));\r\n  ApplicationContainer pingApps;\r\n  \r\n  // again using different start times to workaround Bug 388 and Bug 912\r\n  echoClientHelper.SetAttribute (\"StartTime\", TimeValue (Seconds (0.001)));\r\n  pingApps.Add (echoClientHelper.Install (nodes.Get (0))); \r\n  echoClientHelper.SetAttribute (\"StartTime\", TimeValue (Seconds (0.006)));\r\n  pingApps.Add (echoClientHelper.Install (nodes.Get (2)));     \r\n        \r\n  // 8. Run simulation for the specified time\r\n  Simulator::Stop (Seconds (iSimulationTime));\r\n  Simulator::Run ();\r\n  \r\n  // 9. Cleanup\r\n  Simulator::Destroy ();\r\n}\r\n\r\nint main (int argc, char **argv)\r\n{  \r\n  LogComponentEnable(\"WifiRemoteStationManager\", LOG_LEVEL_ALL);\r\n  \r\n  std::cout << \"Hidden station experiment with RTS/CTS disabled:\\n\" << std::endl;\r\n  experiment (false, 10);     \r\n  std::cout << std::endl;\r\n  //std::cout << \"Hidden station experiment with RTS/CTS enabled:\\n\" << std::endl;\r\n  //experiment (true, 10);     \r\n  \r\n  return 0;\r\n}'),(9,10,'ns2','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(11,12,'ns2','# Create a simulator object\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile'),(12,13,'','#\r\n# Copyright (c) 1999 Regents of the University of California.\r\n# All rights reserved.\r\n#\r\n# Redistribution and use in source and binary forms, with or without\r\n# modification, are permitted provided that the following conditions\r\n# are met:\r\n# 1. Redistributions of source code must retain the above copyright\r\n#    notice, this list of conditions and the following disclaimer.\r\n# 2. Redistributions in binary form must reproduce the above copyright\r\n#    notice, this list of conditions and the following disclaimer in the\r\n#    documentation and/or other materials provided with the distribution.\r\n# 3. All advertising materials mentioning features or use of this software\r\n#    must display the following acknowledgement:\r\n#       This product includes software developed by the MASH Research\r\n#       Group at the University of California Berkeley.\r\n# 4. Neither the name of the University nor of the Research Group may be\r\n#    used to endorse or promote products derived from this software without\r\n#    specific prior written permission.\r\n#\r\n# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS\'\' AND\r\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\r\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n# SUCH DAMAGE.\r\n#\r\n# Contributed by Tom Henderson, UCB Daedalus Research Group, June 1999\r\n#\r\n# $Header: /cvsroot/nsnam/ns-2/tcl/ex/sat-repeater.tcl,v 1.5 2002/07/10 02:29:50 tomh Exp $\r\n#\r\n# \r\n\r\nglobal ns\r\nset ns [new Simulator]\r\n\r\n# Global configuration parameters\r\n# Set these global options for the satellite terminals\r\n\r\nglobal opt\r\nset opt(chan)           Channel/Sat\r\nset opt(bw_up)		2Mb\r\nset opt(bw_down)	2Mb\r\nset opt(phy)            Phy/Sat\r\nset opt(mac)            Mac/Sat\r\nset opt(ifq)            Queue/DropTail\r\nset opt(qlim)		50\r\nset opt(ll)             LL/Sat\r\nset opt(wiredRouting)   OFF\r\n\r\n# This tracing enabling must precede link and node creation \r\nset outfile [open outinsatsol.tr w]\r\n$ns trace-all $outfile\r\n\r\n# Set up satellite and terrestrial nodes\r\n\r\n# Configure the node generator for bent-pipe satellite\r\n# geo-repeater uses type Phy/Repeater\r\n$ns node-config -satNodeType geo-repeater \\\r\n		-phyType Phy/Repeater \\\r\n		-channelType $opt(chan) \\\r\n		-downlinkBW $opt(bw_down)  \\\r\n		-wiredRouting $opt(wiredRouting)\r\n\r\n# GEO satellite at 93.5 degrees longitude East\r\nset n1 [$ns node]\r\n$n1 set-position 93.5\r\n\r\n# Configure the node generator for satellite terminals\r\n$ns node-config -satNodeType terminal \\\r\n                -llType $opt(ll) \\\r\n                -ifqType $opt(ifq) \\\r\n                -ifqLen $opt(qlim) \\\r\n                -macType $opt(mac) \\\r\n                -phyType $opt(phy) \\\r\n                -channelType $opt(chan) \\\r\n                -downlinkBW $opt(bw_down) \\\r\n                -wiredRouting $opt(wiredRouting)\r\n\r\n# Two terminals: one in Bangkok and one in Baghdad\r\nset n2 [$ns node]\r\n$n2 set-position 13.9 100.9; # BK\r\nset n3 [$ns node]\r\n$n3 set-position 33.8 44.4; # BD\r\n\r\n# Add GSLs to geo satellites\r\n$n2 add-gsl geo $opt(ll) $opt(ifq) $opt(qlim) $opt(mac) $opt(bw_up) \\\r\n    $opt(phy) [$n1 set downlink_] [$n1 set uplink_]\r\n$n3 add-gsl geo $opt(ll) $opt(ifq) $opt(qlim) $opt(mac) $opt(bw_up) \\\r\n    $opt(phy) [$n1 set downlink_] [$n1 set uplink_]\r\n\r\n$ns trace-all-satlinks $outfile\r\n\r\n# Attach agents for CBR traffic generator \r\nset udp0 [new Agent/UDP]\r\n$ns attach-agent $n2 $udp0\r\nset cbr0 [new Application/Traffic/CBR]\r\n$cbr0 attach-agent $udp0\r\n$cbr0 set interval_ 6\r\n\r\nset null0 [new Agent/Null]\r\n$ns attach-agent $n3 $null0\r\n\r\n$ns connect $udp0 $null0\r\n\r\n# Attach agents for FTP  \r\nset tcp1 [$ns create-connection TCP $n2 TCPSink $n3 0]\r\nset ftp1 [$tcp1 attach-app FTP]\r\n$ns at 7.0 \"$ftp1 produce 100\"\r\n\r\n# We use centralized routing\r\nset satrouteobject_ [new SatRouteObject]\r\n$satrouteobject_ compute_routes\r\n\r\n$ns at 1.0 \"$cbr0 start\"\r\n\r\n$ns at 100.0 \"finish\"\r\n\r\nproc finish {} {\r\n	global ns outfile\r\n	$ns flush-trace\r\n	close $outfile\r\n\r\n	exit 0\r\n}\r\n\r\n$ns run\r\n'),(13,15,'','#\r\n#\r\n# Copyright (c) 1999 Regents of the University of California.\r\n# All rights reserved.\r\n#\r\n# Redistribution and use in source and binary forms, with or without\r\n# modification, are permitted provided that the following conditions\r\n# are met:\r\n# 1. Redistributions of source code must retain the above copyright\r\n#    notice, this list of conditions and the following disclaimer.\r\n# 2. Redistributions in binary form must reproduce the above copyright\r\n#    notice, this list of conditions and the following disclaimer in the\r\n#    documentation and/or other materials provided with the distribution.\r\n# 3. All advertising materials mentioning features or use of this software\r\n#    must display the following acknowledgement:\r\n#       This product includes software developed by the MASH Research\r\n#       Group at the University of California Berkeley.\r\n# 4. Neither the name of the University nor of the Research Group may be\r\n#    used to endorse or promote products derived from this software without\r\n#    specific prior written permission.\r\n#\r\n# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS\'\' AND\r\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\r\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n# SUCH DAMAGE.\r\n#\r\n# Contributed by Tom Henderson, UCB Daedalus Research Group, June 1999\r\n#\r\n# $Header: /cvsroot/nsnam/ns-2/tcl/ex/sat-iridium.tcl,v 1.4 2001/11/06 06:20:11 tomh Exp $\r\n#\r\n# Example of a broadband LEO constellation with orbital configuration \r\n# similar to that of Iridium.  The script sets up two terminals (one in \r\n# Boston, one at Berkeley) and sends a packet from Berkeley to Boston\r\n# every second for a whole day-- the script illustrates how the latency\r\n# due to propagation delay changes depending on the satellite configuration. \r\n#\r\n# This script relies on sourcing two additional files:\r\n# - sat-iridium-nodes.tcl\r\n# - sat-iridium-links.tcl\r\n# Iridium does not have crossseam ISLs-- to enable crossseam ISLs, uncomment \r\n# the last few lines of \"sat-iridium-links.tcl\"\r\n#\r\n# Iridium parameters [primary reference:  \"Satellite-Based Global Cellular\r\n# Communications by Bruno Pattan (1997-- McGraw-Hill)]\r\n# Altitude = 780 km\r\n# Orbital period = 6026.9 sec\r\n# intersatellite separation = 360/11 deg\r\n# interplane separation = 31.6 deg\r\n# seam separation = 22 deg\r\n# inclination = 86.4\r\n# eccentricity =  0.002 (not modelled)\r\n# minimum elevation angle at edge of coverage = 8.2 deg\r\n# ISL cross-link pattern:  2 intraplane to nearest neighbors in plane, \r\n#   2 interplane except at seam where only 1 interplane exists\r\n\r\n\r\nglobal ns\r\nset ns [new Simulator]\r\n\r\n# Global configuration parameters \r\nHandoffManager/Term set elevation_mask_ 8.2\r\nHandoffManager/Term set term_handoff_int_ 10\r\nHandoffManager/Sat set sat_handoff_int_ 10\r\nHandoffManager/Sat set latitude_threshold_ 60 \r\nHandoffManager/Sat set longitude_threshold_ 10 \r\nHandoffManager set handoff_randomization_ true\r\nSatRouteObject set metric_delay_ true\r\n# Set this to false if opt(wiredRouting) == ON below\r\nSatRouteObject set data_driven_computation_ true\r\n# \"ns-random 0\" sets seed heuristically; other integers are deterministic\r\nns-random 1\r\nAgent set ttl_ 32; # Should be > than max diameter in network\r\n\r\n# One plane of Iridium-like satellites\r\n\r\nglobal opt\r\nset opt(chan)           Channel/Sat\r\nset opt(bw_down)        1.5Mb; # Downlink bandwidth (satellite to ground)\r\nset opt(bw_up)          1.5Mb; # Uplink bandwidth\r\nset opt(bw_isl)         25Mb\r\nset opt(phy)            Phy/Sat\r\nset opt(mac)            Mac/Sat\r\nset opt(ifq)            Queue/DropTail\r\nset opt(qlim)           50\r\nset opt(ll)             LL/Sat\r\nset opt(wiredRouting) 	OFF\r\n\r\nset opt(alt)            780; # Polar satellite altitude (Iridium)\r\nset opt(inc)            86.4; # Orbit inclination w.r.t. equator\r\n\r\n# This tracing enabling must precede link and node creation\r\nset outfile [open outiridium.tr w]\r\n$ns trace-all $outfile\r\n\r\n# Create the satellite nodes\r\n# Nodes 0-99 are satellite nodes; 100 and higher are earth terminals\r\n\r\n$ns node-config -satNodeType polar \\\r\n		-llType $opt(ll) \\\r\n		-ifqType $opt(ifq) \\\r\n		-ifqLen $opt(qlim) \\\r\n		-macType $opt(mac) \\\r\n		-phyType $opt(phy) \\\r\n		-channelType $opt(chan) \\\r\n		-downlinkBW $opt(bw_down) \\\r\n		-wiredRouting $opt(wiredRouting) \r\n\r\nset alt $opt(alt)\r\nset inc $opt(inc)\r\n\r\n#source sat-iridium-nodes.tcl\r\nif {![info exists ns]} {\r\n	puts \"Error:  sat-iridium-nodes.tcl is a supporting script for the \"\r\n	puts \"        sat-iridium.tcl script-- run `sat-iridium.tcl\' instead\"\r\n	exit\r\n}\r\n\r\nset plane 1\r\nset n0 [$ns node]; $n0 set-position $alt $inc 0 0 $plane\r\nset n1 [$ns node]; $n1 set-position $alt $inc 0 32.73 $plane \r\nset n2 [$ns node]; $n2 set-position $alt $inc 0 65.45 $plane \r\nset n3 [$ns node]; $n3 set-position $alt $inc 0 98.18 $plane \r\nset n4 [$ns node]; $n4 set-position $alt $inc 0 130.91 $plane \r\nset n5 [$ns node]; $n5 set-position $alt $inc 0 163.64 $plane \r\nset n6 [$ns node]; $n6 set-position $alt $inc 0 196.36 $plane \r\nset n7 [$ns node]; $n7 set-position $alt $inc 0 229.09 $plane \r\nset n8 [$ns node]; $n8 set-position $alt $inc 0 261.82 $plane \r\nset n9 [$ns node]; $n9 set-position $alt $inc 0 294.55 $plane \r\nset n10 [$ns node]; $n10 set-position $alt $inc 0 327.27 $plane \r\n\r\nincr plane  \r\nset n11 [$ns node]; $n11 set-position $alt $inc 31.6 16.36 $plane \r\nset n12 [$ns node]; $n12 set-position $alt $inc 31.6 49.09 $plane \r\nset n13 [$ns node]; $n13 set-position $alt $inc 31.6 81.82 $plane \r\nset n14 [$ns node]; $n14 set-position $alt $inc 31.6 114.55 $plane \r\nset n15 [$ns node]; $n15 set-position $alt $inc 31.6 147.27 $plane \r\nset n16 [$ns node]; $n16 set-position $alt $inc 31.6 180 $plane \r\nset n17 [$ns node]; $n17 set-position $alt $inc 31.6 212.73 $plane \r\nset n18 [$ns node]; $n18 set-position $alt $inc 31.6 245.45 $plane \r\nset n19 [$ns node]; $n19 set-position $alt $inc 31.6 278.18 $plane \r\nset n20 [$ns node]; $n20 set-position $alt $inc 31.6 310.91 $plane \r\nset n21 [$ns node]; $n21 set-position $alt $inc 31.6 343.64 $plane \r\n\r\nincr plane \r\nset n22 [$ns node]; $n22 set-position $alt $inc 63.2 0 $plane \r\nset n23 [$ns node]; $n23 set-position $alt $inc 63.2 32.73 $plane \r\nset n24 [$ns node]; $n24 set-position $alt $inc 63.2 65.45 $plane \r\nset n25 [$ns node]; $n25 set-position $alt $inc 63.2 98.18 $plane \r\nset n26 [$ns node]; $n26 set-position $alt $inc 63.2 130.91 $plane \r\nset n27 [$ns node]; $n27 set-position $alt $inc 63.2 163.64 $plane \r\nset n28 [$ns node]; $n28 set-position $alt $inc 63.2 196.36 $plane \r\nset n29 [$ns node]; $n29 set-position $alt $inc 63.2 229.09 $plane \r\nset n30 [$ns node]; $n30 set-position $alt $inc 63.2 261.82 $plane \r\nset n31 [$ns node]; $n31 set-position $alt $inc 63.2 294.55 $plane \r\nset n32 [$ns node]; $n32 set-position $alt $inc 63.2 327.27 $plane \r\n\r\nincr plane \r\nset n33 [$ns node]; $n33 set-position $alt $inc 94.8 16.36 $plane \r\nset n34 [$ns node]; $n34 set-position $alt $inc 94.8 49.09 $plane \r\nset n35 [$ns node]; $n35 set-position $alt $inc 94.8 81.82 $plane \r\nset n36 [$ns node]; $n36 set-position $alt $inc 94.8 114.55 $plane \r\nset n37 [$ns node]; $n37 set-position $alt $inc 94.8 147.27 $plane \r\nset n38 [$ns node]; $n38 set-position $alt $inc 94.8 180 $plane \r\nset n39 [$ns node]; $n39 set-position $alt $inc 94.8 212.73 $plane \r\nset n40 [$ns node]; $n40 set-position $alt $inc 94.8 245.45 $plane \r\nset n41 [$ns node]; $n41 set-position $alt $inc 94.8 278.18 $plane \r\nset n42 [$ns node]; $n42 set-position $alt $inc 94.8 310.91 $plane \r\nset n43 [$ns node]; $n43 set-position $alt $inc 94.8 343.64 $plane \r\n\r\nincr plane \r\nset n44 [$ns node]; $n44 set-position $alt $inc 126.4 0 $plane \r\nset n45 [$ns node]; $n45 set-position $alt $inc 126.4 32.73 $plane \r\nset n46 [$ns node]; $n46 set-position $alt $inc 126.4 65.45 $plane \r\nset n47 [$ns node]; $n47 set-position $alt $inc 126.4 98.18 $plane \r\nset n48 [$ns node]; $n48 set-position $alt $inc 126.4 130.91 $plane \r\nset n49 [$ns node]; $n49 set-position $alt $inc 126.4 163.64 $plane \r\nset n50 [$ns node]; $n50 set-position $alt $inc 126.4 196.36 $plane \r\nset n51 [$ns node]; $n51 set-position $alt $inc 126.4 229.09 $plane \r\nset n52 [$ns node]; $n52 set-position $alt $inc 126.4 261.82 $plane \r\nset n53 [$ns node]; $n53 set-position $alt $inc 126.4 294.55 $plane \r\nset n54 [$ns node]; $n54 set-position $alt $inc 126.4 327.27 $plane \r\n\r\nincr plane\r\nset n55 [$ns node]; $n55 set-position $alt $inc 158 16.36 $plane \r\nset n56 [$ns node]; $n56 set-position $alt $inc 158 49.09 $plane \r\nset n57 [$ns node]; $n57 set-position $alt $inc 158 81.82 $plane \r\nset n58 [$ns node]; $n58 set-position $alt $inc 158 114.55 $plane \r\nset n59 [$ns node]; $n59 set-position $alt $inc 158 147.27 $plane \r\nset n60 [$ns node]; $n60 set-position $alt $inc 158 180 $plane \r\nset n61 [$ns node]; $n61 set-position $alt $inc 158 212.73 $plane \r\nset n62 [$ns node]; $n62 set-position $alt $inc 158 245.45 $plane \r\nset n63 [$ns node]; $n63 set-position $alt $inc 158 278.18 $plane \r\nset n64 [$ns node]; $n64 set-position $alt $inc 158 310.91 $plane \r\nset n65 [$ns node]; $n65 set-position $alt $inc 158 343.64 $plane \r\n\r\n# By setting the next_ variable on polar sats; handoffs can be optimized\r\n\r\n$n0 set_next $n10; $n1 set_next $n0; $n2 set_next $n1; $n3 set_next $n2\r\n$n4 set_next $n3; $n5 set_next $n4; $n6 set_next $n5; $n7 set_next $n6\r\n$n8 set_next $n7; $n9 set_next $n8; $n10 set_next $n9\r\n\r\n$n11 set_next $n21; $n12 set_next $n11; $n13 set_next $n12; $n14 set_next $n13\r\n$n15 set_next $n14; $n16 set_next $n15; $n17 set_next $n16; $n18 set_next $n17\r\n$n19 set_next $n18; $n20 set_next $n19; $n21 set_next $n20\r\n\r\n$n22 set_next $n32; $n23 set_next $n22; $n24 set_next $n23; $n25 set_next $n24\r\n$n26 set_next $n25; $n27 set_next $n26; $n28 set_next $n27; $n29 set_next $n28\r\n$n30 set_next $n29; $n31 set_next $n30; $n32 set_next $n31\r\n\r\n$n33 set_next $n43; $n34 set_next $n33; $n35 set_next $n34; $n36 set_next $n35\r\n$n37 set_next $n36; $n38 set_next $n37; $n39 set_next $n38; $n40 set_next $n39\r\n$n41 set_next $n40; $n42 set_next $n41; $n43 set_next $n42\r\n\r\n$n44 set_next $n54; $n45 set_next $n44; $n46 set_next $n45; $n47 set_next $n46\r\n$n48 set_next $n47; $n49 set_next $n48; $n50 set_next $n49; $n51 set_next $n50\r\n$n52 set_next $n51; $n53 set_next $n52; $n54 set_next $n53\r\n\r\n$n55 set_next $n65; $n56 set_next $n55; $n57 set_next $n56; $n58 set_next $n57\r\n$n59 set_next $n58; $n60 set_next $n59; $n61 set_next $n60; $n62 set_next $n61\r\n$n63 set_next $n62; $n64 set_next $n63; $n65 set_next $n64\r\n\r\n# configure the ISLs\r\n#source sat-iridium-links.tcl\r\nif {![info exists ns]} {\r\n	puts \"Error:  sat-iridium-links.tcl is a supporting script for the \"\r\n	puts \"        sat-iridium.tcl script-- run `sat-iridium.tcl\' instead\"\r\n	exit\r\n}\r\n\r\n# Now that the positions are set up, configure the ISLs\r\n# Plane 1 intraplane\r\n$ns add-isl intraplane $n0 $n1 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n1 $n2 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n2 $n3 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n3 $n4 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n4 $n5 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n5 $n6 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n6 $n7 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n7 $n8 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n8 $n9 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n9 $n10 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n10 $n0 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 2 intraplane\r\n$ns add-isl intraplane $n11 $n12 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n12 $n13 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n13 $n14 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n14 $n15 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n15 $n16 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n16 $n17 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n17 $n18 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n18 $n19 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n19 $n20 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n20 $n21 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n21 $n11 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 3 intraplane\r\n$ns add-isl intraplane $n22 $n23 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n23 $n24 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n24 $n25 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n25 $n26 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n26 $n27 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n27 $n28 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n28 $n29 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n29 $n30 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n30 $n31 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n31 $n32 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n32 $n22 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 4 intraplane\r\n$ns add-isl intraplane $n33 $n34 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n34 $n35 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n35 $n36 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n36 $n37 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n37 $n38 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n38 $n39 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n39 $n40 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n40 $n41 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n41 $n42 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n42 $n43 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n43 $n33 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 5 intraplane\r\n$ns add-isl intraplane $n44 $n45 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n45 $n46 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n46 $n47 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n47 $n48 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n48 $n49 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n49 $n50 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n50 $n51 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n51 $n52 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n52 $n53 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n53 $n54 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n54 $n44 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 6 intraplane\r\n$ns add-isl intraplane $n55 $n56 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n56 $n57 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n57 $n58 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n58 $n59 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n59 $n60 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n60 $n61 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n61 $n62 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n62 $n63 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n63 $n64 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n64 $n65 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl intraplane $n65 $n55 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Interplane ISLs\r\n# 2 interplane ISLs per satellite (one along the seam)\r\n\r\n# Plane 1-2\r\n$ns add-isl interplane $n0 $n11 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n1 $n12 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n2 $n13 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n3 $n14 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n4 $n15 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n5 $n16 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n6 $n17 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n7 $n18 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n8 $n19 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n9 $n20 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n10 $n21 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 2-3\r\n$ns add-isl interplane $n11 $n22 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n12 $n23 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n13 $n24 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n14 $n25 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n15 $n26 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n16 $n27 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n17 $n28 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n18 $n29 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n19 $n30 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n20 $n31 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n21 $n32 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 3-4\r\n$ns add-isl interplane $n22 $n33 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n23 $n34 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n24 $n35 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n25 $n36 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n26 $n37 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n27 $n38 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n28 $n39 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n29 $n40 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n30 $n41 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n31 $n42 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n32 $n43 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 4-5\r\n$ns add-isl interplane $n33 $n44 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n34 $n45 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n35 $n46 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n36 $n47 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n37 $n48 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n38 $n49 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n39 $n50 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n40 $n51 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n41 $n52 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n42 $n53 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n43 $n54 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Plane 5-6\r\n$ns add-isl interplane $n44 $n55 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n45 $n56 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n46 $n57 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n47 $n58 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n48 $n59 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n49 $n60 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n50 $n61 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n51 $n62 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n52 $n63 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n53 $n64 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n$ns add-isl interplane $n54 $n65 $opt(bw_isl) $opt(ifq) $opt(qlim)\r\n\r\n# Set up terrestrial nodes\r\n$ns node-config -satNodeType terminal\r\nset n66 [$ns node]\r\n$n66 set-position 37.9 -122.3; # Berkeley\r\nset n67 [$ns node]\r\n$n67 set-position 42.3 -71.1; # Boston \r\n\r\n# Add GSL links\r\n# It doesn\'t matter what the sat node is (handoff algorithm will reset it)\r\n$n66 add-gsl polar $opt(ll) $opt(ifq) $opt(qlim) $opt(mac) $opt(bw_up) \\\r\n  $opt(phy) [$n0 set downlink_] [$n0 set uplink_]\r\n$n67 add-gsl polar $opt(ll) $opt(ifq) $opt(qlim) $opt(mac) $opt(bw_up) \\\r\n  $opt(phy) [$n0 set downlink_] [$n0 set uplink_]\r\n\r\n# Trace all queues\r\n$ns trace-all-satlinks $outfile\r\n\r\n# Attach agents\r\nset udp0 [new Agent/UDP]\r\n$ns attach-agent $n66 $udp0\r\nset cbr0 [new Application/Traffic/CBR]\r\n$cbr0 attach-agent $udp0\r\n$cbr0 set interval_ 60.01\r\n\r\nset null0 [new Agent/Null]\r\n$ns attach-agent $n67 $null0\r\n\r\n$ns connect $udp0 $null0\r\n$ns at 1.0 \"$cbr0 start\"\r\n\r\n# We\'re using a centralized routing genie-- create and start it here\r\nset satrouteobject_ [new SatRouteObject]\r\n$satrouteobject_ compute_routes\r\n\r\n$ns at 86400.0 \"finish\" ; # one earth rotation \r\n\r\nproc finish {} {\r\n	global ns outfile \r\n	$ns flush-trace\r\n	close $outfile\r\n\r\n	exit 0\r\n}\r\n\r\n$ns run\r\n'),(14,17,'ns2','# Generated by MannaSim\r\n# http://www.mannasim.dcc.ufmg.br/\r\n\r\n\r\nputs \"Initializing MannaSim Script...\"\r\n\r\n#Consumo de energia do sensor node - Dados do Mica Motes\r\nset mica(sensing_power) 0.015 ;# i = 5mA, V = 3 --> P = ixV = 15 mW = 0.015 W\r\nset mica(processing_power) 0.024 ;# i = 8mA, V = 3 --> P = ixV = 24 mW = 0.024 W\r\nset mica(instructions_per_second) 8000000 ;# Atmel 128L 8MHZ --> 8MIPS\r\n\r\n#Consumo de energia do sensor node - Dados do WINS\r\nset wins(sensing_power) 0.064 ;# 64 mW = 0.064 W\r\nset wins(processing_power) 0.360 ;# 360 mW = 0.360 W\r\nset wins(instructions_per_second) 150000000 ;# Intel StrongArm 1100 133 MHZ --> 150 MIPS\r\n\r\n#Seta valores para consumo de energia com o radio\r\nset mica(consumo_transmissao) 0.036 ;#i = 12mA, V = 3 --> P = ixV = 36mW = 0.036W\r\nset mica(consumo_recepcao) 0.024 ;#i = 8mA, V = 3 --> P = ixV = 24mW = 0.024W\r\n\r\nset wins(consumo_transmissao)   3.75 ;# 3.75 250m, 0.6 600 mW - 100m\r\nset wins(consumo_recepcao) 1.875 ;# 1.875 250m,  0.3 300 mW\r\n\r\n#seta a taxa de transmissao\r\n#Phy/WirelessPhy set  bandwidth_\r\nset mica(taxa_transmissao) 28.8*10e3 ;#28.8 kbps\r\nset wins(taxa_transmissao) 100*10e3 ;#100 kbps\r\n\r\nproc setup_mica2 { antenna range }  {\r\n\r\n        puts \"Setting up mica 2 mote with $antenna and range = $range\"      \r\n\r\n        Phy/WirelessPhy set Pt_ 0.281838\r\n        Phy/WirelessPhy set freq_ 2.4e09\r\n        Phy/WirelessPhy set L_ 1.0\r\n        Phy/WirelessPhy set lambda_ 0.125\r\n        Phy/WirelessPhy set RXThresh_ [TwoRay 0.281838 [$antenna set Gt_] [$antenna set Gr_] 0.8 0.8 1.0 $range 0.125]\r\n        Phy/WirelessPhy set bandwidth_ 28.8*10e3        ;#28.8 kbps\r\n\r\n        Node/MobileNode/SensorNode set sensingPower_ 0.015\r\n        Node/MobileNode/SensorNode set processingPower 0.024\r\n        Node/MobileNode/SensorNode set instructionsPerSecond_ 8000000\r\n\r\n}\r\n\r\n##########################################\r\n# CONSTANTES\r\n#########################################\r\n# Continuo: 0\r\n# Programada: 1\r\n# Sob Demanda: 2\r\n########################################\r\n\r\nproc create_common_app {destination_id disseminating_type disseminating_interval} {\r\n    global val\r\n    #puts \"executing create_common_app\\n\"\r\n    if { $val(commonApp) == \"Application/SensorBaseApp/CommonNodeApp/LeachApp\" } {\r\n          if { $val(n_ch) == 0 } {\r\n                   puts \"NO CLUSTER HEADS HAS BEEN DEFINED! Assuming 20% of common nodes.\"\r\n                   set val(n_ch) [expr int($val(n_common) * 2 / 10)]\r\n          }\r\n          #puts \"Debug: val(n_ch): $val(n_ch)\\n\";\r\n          set app_ [new $val(commonApp) $val(nn) $val(n_ch) [expr sqrt($val(x) * $val(x) + $val(y) * $val(y))]]\r\n    } else {\r\n          set app_ [new $val(commonApp)]\r\n          $app_ set destination_id_ $destination_id\r\n    }\r\n    $app_ set disseminating_type_ $disseminating_type\r\n    $app_ set disseminating_interval_ $disseminating_interval\r\n    return $app_\r\n}\r\n\r\nset val(commonApp) \"Application/SensorBaseApp/CommonNodeApp\"\r\nset val(chApp)     \"Application/SensorBaseApp/ClusterHeadApp\"\r\nset val(apApp)     \"Application/AccessPointApp\"\r\n\r\nproc create_cluster_head_app {destination_id disseminating_type disseminating_interval} {\r\n    global val\r\n    set app_ [new $val(chApp)]\r\n    $app_ set destination_id_ $destination_id\r\n    $app_ set disseminating_type_ $disseminating_type\r\n    $app_ set disseminating_interval_ $disseminating_interval\r\n    return $app_\r\n}\r\n\r\nproc create_access_point_app {outside_network} {\r\n    global val\r\n    set app_ [new $val(apApp)]\r\n    $app_ set outside_network_ $outside_network\r\n    return $app_\r\n}\r\n\r\nproc create_temp_data_generator {sensing_interval sensing_type avg_measure std_deviation maximumTemperatureAllowedValue} {\r\n    set temp_gen_ [new DataGenerator/TemperatureDataGenerator]\r\n    $temp_gen_ set sensing_interval_ $sensing_interval\r\n    $temp_gen_ set sensing_type_ $sensing_type\r\n    $temp_gen_ set avg_measure $avg_measure\r\n    $temp_gen_ set std_deviation $std_deviation\r\n    $temp_gen_ set maximumTemperatureAllowedValue_ $maximumTemperatureAllowedValue\r\n    return $temp_gen_\r\n}\r\n\r\nproc create_data_generator {generator sensing_interval sensing_type avg_measure std_deviation maximumTemperatureAllowedValue} {\r\n    set temp_gen_ [new DataGenerator/$generator]\r\n    $temp_gen_ set sensing_interval_ $sensing_interval\r\n\r\n    if {$sensing_type==\"continuous\"} {\r\n          $temp_gen_ set sensing_type_ 0\r\n    } elseif {$sensing_type==\"programmed\"} {\r\n          $temp_gen_ set sensing_type_ 1\r\n    } elseif {$sensing_type==\"on demand\"} {\r\n          $temp_gen_ set sensing_type_ 2\r\n    } else {          \r\n          $temp_gen_ set sensing_type_ $sensing_type\r\n    }\r\n    $temp_gen_ set avg_measure $avg_measure\r\n    $temp_gen_ set std_deviation $std_deviation\r\n    $temp_gen_ set maximumTemperatureAllowedValue_ $maximumTemperatureAllowedValue\r\n    return $temp_gen_\r\n}\r\n\r\nproc create_common_node { iniEnergy x y z father_addr start stop } {\r\n    global val ns_ node_ topo udp_ app_ gen_ contador_nodos rng trace\r\n\r\n    if { [llength $start] == 0 }  {\r\n            set start [expr $val(start) + [$rng uniform 0 1]]\r\n            set stop $val(stop)\r\n    }\r\n\r\n    $ns_ node-config -sensorNode ON \\\r\n        -adhocRouting $val(rp) \\\r\n        -llType $val(ll) \\\r\n        -macType $val(mac) \\\r\n        -ifqType $val(ifq) \\\r\n        -ifqLen $val(ifqlen) \\\r\n        -antType $val(antenna) \\\r\n        -propType $val(prop) \\\r\n        -energyModel $val(en) \\\r\n        -phyType $val(netif) \\\r\n        -channelType $val(chan) \\\r\n        -topoInstance $topo \\\r\n        -agentTrace $trace(agent) \\\r\n        -routerTrace $trace(router) \\\r\n        -macTrace $trace(mac) \\\r\n        -rxPower 0.024 \\\r\n        -txPower 0.036 \\\r\n        -initialEnergy $iniEnergy \\\r\n        -movementTrace $trace(movement)\r\n\r\n        set node_($contador_nodos) [$ns_ node]\r\n        $node_($contador_nodos) random-motion 0\r\n\r\n        $node_($contador_nodos) set X_ $x\r\n        $node_($contador_nodos) set Y_ $y\r\n        $node_($contador_nodos) set Z_ $z\r\n\r\n        puts \"* Node [$node_($contador_nodos) node-addr] = $contador_nodos created in ($x, $y, $z)\"\r\n\r\n        set app_($contador_nodos) [create_common_app $father_addr $val(disseminating_type) $val(disseminating_interval)]\r\n\r\n        if { $val(leach) == 1 } {\r\n              set agent [new Agent/RCAgent]\r\n\r\n              $agent set sport_ 0\r\n              $agent set dport_ 0\r\n\r\n              $node_($contador_nodos) attach $agent 0\r\n              $app_($contador_nodos) attach-agent $agent\r\n\r\n              $agent add-ll [$node_($contador_nodos) set ll_(0)] [$node_($contador_nodos) set mac_(0)]\r\n        } else {\r\n                set udp_($contador_nodos) [new Agent/UDP]\r\n                $node_($contador_nodos) attach $udp_($contador_nodos) $val(port)\r\n        }\r\n        $node_($contador_nodos) add-app $app_($contador_nodos)\r\n\r\n        set processing_($contador_nodos) [new $val(processing)]\r\n\r\n        $app_($contador_nodos) node $node_($contador_nodos)\r\n\r\n        if { $val(leach) != 1 } {\r\n                $app_($contador_nodos) attach-agent $udp_($contador_nodos)\r\n        }\r\n\r\n        $app_($contador_nodos) attach-processing $processing_($contador_nodos)\r\n        $processing_($contador_nodos) node $node_($contador_nodos)\r\n\r\n        for { set i 0 } { $i < [llength $start] } { incr i } {\r\n                $ns_ at $start \"$app_($contador_nodos) start\"\r\n        }\r\n\r\n        for { set i 0 } { $i < [llength $stop] } { incr i } {\r\n                $ns_ at $stop \"$app_($contador_nodos) stop\"\r\n        }\r\n\r\n        #[create_temp_data_generator  5.0 0 27.0 10.0 50]\r\n        set gen_($contador_nodos) $val(data_generator)\r\n\r\n        $app_($contador_nodos) attach_data_generator $gen_($contador_nodos)\r\n\r\n        incr contador_nodos\r\n\r\n}\r\n\r\nproc create_cluster_head_node { iniEnergy x y z father_addr start stop } {\r\n\r\n        global val ns_ node_ topo udp_ app_ gen_ contador_nodos rng trace\r\n\r\n        if { [llength $start] == 0 }  {\r\n                set start [expr $val(start) + [$rng uniform 0 1]]\r\n                set stop $val(stop)\r\n        }\r\n\r\n        $ns_ node-config -sensorNode ON \\\r\n            -adhocRouting $val(rp) \\\r\n            -llType $val(ll) \\\r\n            -macType $val(mac) \\\r\n            -ifqType $val(ifq) \\\r\n            -ifqLen $val(ifqlen) \\\r\n            -antType $val(antenna) \\\r\n            -propType $val(prop) \\\r\n            -energyModel $val(en) \\\r\n            -phyType $val(netif) \\\r\n            -channelType $val(chan) \\\r\n            -topoInstance $topo \\\r\n             -agentTrace $trace(agent) \\\r\n            -routerTrace $trace(router) \\\r\n            -macTrace $trace(mac) \\\r\n            -rxPower 0.024 \\\r\n            -txPower 0.036 \\\r\n            -initialEnergy $iniEnergy \\\r\n            -movementTrace $trace(movement)\r\n\r\n        #puts \"Debug Cluster head iniEnergy: $iniEnergy\\n\";\r\n\r\n        set node_($contador_nodos) [$ns_ node]\r\n        $node_($contador_nodos) random-motion 0\r\n\r\n\r\n        $node_($contador_nodos) set X_ $x\r\n        $node_($contador_nodos) set Y_ $y\r\n        $node_($contador_nodos) set Z_ $z\r\n\r\n        puts \"* Cluster head [$node_($contador_nodos) node-addr] = $contador_nodos created in ($x, $y, $z)\"\r\n\r\n        set udp_($contador_nodos) [new Agent/UDP]\r\n\r\n        set app_($contador_nodos) [create_cluster_head_app $father_addr $val(disseminating_type) $val(disseminating_interval)]\r\n\r\n        $node_($contador_nodos) attach $udp_($contador_nodos) $val(port)\r\n        $node_($contador_nodos) add-app $app_($contador_nodos)\r\n\r\n#CN#        set processing_($contador_nodos) [new $val(processing)]\r\n\r\n        $app_($contador_nodos) node $node_($contador_nodos)\r\n        $app_($contador_nodos) attach-agent $udp_($contador_nodos)\r\n\r\n#CN#        $app_($contador_nodos) attach-processing $processing_($contador_nodos)\r\n        $processing_($contador_nodos) node $node_($contador_nodos)\r\n\r\n        for { set i 0 } { $i < [llength $start] } { incr i } {\r\n                $ns_ at $start \"$app_($contador_nodos) start\"\r\n        }\r\n\r\n        for { set i 0 } { $i < [llength $stop] } { incr i } {\r\n                $ns_ at $stop \"$app_($contador_nodos) stop\"\r\n        }\r\n\r\n#CN#        set gen_($contador_nodos) $val(data_generator)\r\n#CN#        $app_($contador_nodos) attach_data_generator $gen_($contador_nodos)\r\n\r\n        incr contador_nodos\r\n\r\n}\r\n\r\nproc create_access_point { iniEnergy x y z start stop} {\r\n        global ns_ val node_ app_ udp_ contador_nodos topo trace rng\r\n\r\n        if { [llength $start] == 0 }  {\r\n                set start [expr $val(start) + [$rng uniform 0 1]]\r\n                set stop $val(stop)\r\n        }\r\n\r\n        $ns_ node-config -sensorNode ON \\\r\n            -adhocRouting $val(rp) \\\r\n            -llType $val(ll) \\\r\n            -macType $val(mac) \\\r\n            -ifqType $val(ifq) \\\r\n            -ifqLen $val(ifqlen) \\\r\n            -antType $val(antenna) \\\r\n            -propType $val(prop) \\\r\n            -energyModel $val(en) \\\r\n            -phyType $val(netif) \\\r\n            -channelType $val(chan) \\\r\n            -topoInstance $topo \\\r\n             -agentTrace $trace(agent) \\\r\n            -routerTrace $trace(router) \\\r\n            -macTrace $trace(mac) \\\r\n            -rxPower 0.5 \\\r\n            -txPower 0.5 \\\r\n            -initialEnergy $iniEnergy \\\r\n            -movementTrace $trace(movement)\r\n\r\n        #puts \"Debug AP iniEnergy: $iniEnergy\\n\";\r\n\r\n        set node_($contador_nodos) [$ns_ node]\r\n        $node_($contador_nodos) random-motion 0\r\n        set app_($contador_nodos) [create_access_point_app [$node_(0) node-addr]]\r\n\r\n        if { $val(leach) == 1 } {\r\n              set agent [new Agent/RCAgent/LeachAgent]\r\n\r\n              $agent set sport_ 0\r\n              $agent set dport_ 0\r\n\r\n              $node_($contador_nodos) attach $agent 0\r\n              $app_($contador_nodos) attach-agent $agent\r\n\r\n              $agent add-ll [$node_($contador_nodos) set ll_(0)] [$node_($contador_nodos) set mac_(0)]\r\n        } else {\r\n              set  udp_($contador_nodos) [new Agent/UDP]\r\n              $node_($contador_nodos) attach $udp_($contador_nodos) $val(port)\r\n              $app_($contador_nodos) attach-agent $udp_($contador_nodos)\r\n        }\r\n        $node_($contador_nodos) set X_ $x\r\n        $node_($contador_nodos) set Y_ $y\r\n        $node_($contador_nodos) set Z_ $z\r\n\r\n        puts \"* Access point [$node_($contador_nodos) node-addr] = $contador_nodos created in ($x, $y, $z)\"\r\n\r\n        for { set i 0 } { $i < [llength $start] } { incr i } {\r\n                $ns_ at $start \"$app_($contador_nodos) start\"\r\n        }\r\n\r\n        for { set i 0 } { $i < [llength $stop] } { incr i } {\r\n                $ns_ at $stop \"$app_($contador_nodos) stop\"\r\n        }\r\n\r\n        incr contador_nodos\r\n\r\n}\r\n\r\n###\r\n# Grid distribution.\r\n\r\nproc get_next_x {} {\r\n\r\n        global val\r\n        set aux [expr int(sqrt($val(nn)))]\r\n        return [expr (($contador_nodos) % $aux) * $val(x) / ($aux - 1)]\r\n\r\n}\r\n\r\nproc get_next_y {} {\r\n\r\n        global val\r\n        set aux [expr int(sqrt($val(nn)))]\r\n        return [expr (($contador_nodos) / $aux) * $val(y) / ($aux - 1)]\r\n\r\n}\r\n\r\n####\r\n# Calculating the receiving threshold (RXThresh_ for Phy/Wireless)\r\n# Wei Ye, weiye@isi.edu, 2000\r\n\r\nproc Friis { Pt Gt Gr lambda L d} {\r\n  set M [expr $lambda / (4 * 3.14159265359 * $d)]\r\n  return [expr ($Pt * $Gt * $Gr * ($M * $M)) / $L]\r\n}\r\n\r\nproc TwoRay { Pt Gt Gr ht hr L d lambda } {\r\n        set crossover_dist [expr (4 * 3.14159265359 * $ht * $hr) / $lambda]\r\n\r\n        if { $d < $crossover_dist } {\r\n                return [Friis $Pt $Gt $Gr $lambda $L $d]\r\n        } else {\r\n                return [expr $Pt * $Gt * $Gr * ($hr * $hr * $ht * $ht) / ($d * $d * $d * $d * $L)]\r\n       }\r\n}\r\n\r\n###\r\n\r\nproc set_default_settings {} {\r\n\r\n        global val\r\n\r\n        ####\r\n        # Default network settings\r\n        set val(antenna) \"Antenna/OmniAntenna\"\r\n        Antenna/OmniAntenna set X_ 0 ;\r\n        Antenna/OmniAntenna set Y_ 0 ;\r\n        Antenna/OmniAntenna set Z_ 1.5 ;\r\n        Antenna/OmniAntenna set Gt_ 1.0 ;\r\n        Antenna/OmniAntenna set Gr_ 1.0 ;\r\n\r\n        ###\r\n\r\n        # Using Mica 2 Mote settings\r\n\r\n\r\n        set val(range) 100\r\n        setup_mica2 $val(antenna) $val(range)\r\n        set val(bandwidth) [Phy/WirelessPhy set bandwidth_]\r\n        set val(mac)    Mac/802_11\r\n        set val(ifq)    Queue/DropTail\r\n        set val(ifqlen) 200\r\n        set val(ll) LL\r\n        set val(rp) \"LEACH\"\r\n\r\n\r\n        # Configuration adjustment\r\n\r\n        if { $val(rp) == \"LEACH\" } {\r\n\r\n                set val(rp) DumbAgent\r\n                set val(leach) 1\r\n\r\n                if { $val(ll) != \"RCALinkLayer\" } {\r\n                        puts \"LEACH requires RCALinkLayer! Forcing it!!!\"                   \r\n                        set val(ll) RCALinkLayer\r\n                }\r\n\r\n                if { $val(netif) != \"Phy/WirelessPhy/LeachWirelessPhy\" } {\r\n                        puts \"LEACH requires LeachWirelessPhy! Forcing it!!!\"\r\n                        set val(netif) Phy/WirelessPhy/LeachWirelessPhy\r\n                }\r\n\r\n                if { $val(mac) != \"Mac/Sensor\" } {\r\n                        puts \"LEACH requires Mac/Sensor! Forcing it!!!\"\r\n                        set val(mac) Mac/Sensor\r\n                }\r\n\r\n                set val(port) 0\r\n\r\n                Agent/RCAgent set sport_           $val(port)\r\n                Agent/RCAgent set dport_           $val(port)\r\n                Agent/RCAgent set packetMsg_       0\r\n                Agent/RCAgent set distEst_         0\r\n                Agent/RCAgent set packetSize_      0\r\n\r\n                RCALinkLayer set delay_            25us\r\n                RCALinkLayer set bandwidth_        [Phy/WirelessPhy set bandwidth_]\r\n                RCALinkLayer set off_prune_        0\r\n                RCALinkLayer set off_CtrMcast_     0\r\n                RCALinkLayer set macDA_            0\r\n                RCALinkLayer set debug_            0\r\n        } else {\r\n                set val(leach) 0\r\n        }\r\n        if { $val(rp) == \"DIRECTED DIFFUSION\" } {\r\n                set val(rp) \"Directed_Diffusion\"\r\n        }       \r\n}\r\n\r\nset val(father_addr) 0 \r\nset val(port)   2020\r\n\r\nset val(netif)  Phy/WirelessPhy\r\n\r\nset_default_settings\r\n\r\n# Global network settings\r\nset contador_nodos 0\r\nset val(chan)   Channel/WirelessChannel\r\n\r\n# Propagation\r\nset val(prop)   Propagation/TwoRayGround\r\n\r\n# Energy model\r\nset val(en) EnergyModel/Battery\r\n\r\n# Nodes\r\nset val(n_pas)  0\r\nset val(n_common) 11\r\nset val(n_ch) 4\r\nset val(nn) [expr $val(n_pas) + $val(n_common) + $val(n_ch)]\r\n\r\nputs \"\\nNodes count:\"\r\nputs \" - $val(n_pas) access points\"\r\nputs \" - $val(n_common) common nodes\"\r\nputs \" - $val(n_ch) cluster heads\"\r\nputs \" - $val(nn) nodes\"\r\nputs \" - $val(rp) routing protocol\"\r\nputs \" - $val(ll) link layer\"\r\nputs \" - $val(netif) network interface\"\r\n\r\n# Scenario size\r\nset val(x)  500.0\r\nset val(y)  500.0\r\n\r\nputs \"\\nScenario size: $val(x) x $val(y)\"\r\n\r\nset val(start)  0.0\r\nset val(stop)   [expr $val(start) + 550.0]\r\n\r\nset ns_     [new Simulator]\r\n\r\n\r\n# Trace\r\nputs \"\\nUsing trace.tr as trace file\"\r\nset traceFile   [open trace.tr w]\r\n$ns_ trace-all $traceFile\r\n$ns_ use-newtrace\r\n\r\nset trace(mac) ON\r\nset trace(router) ON\r\nset trace(agent) ON\r\nset trace(movement) ON\r\n\r\n\r\nset topo    [new Topography]\r\n$topo load_flatgrid $val(x) $val(y)\r\ncreate-god $val(nn)\r\nset rng [new RNG]\r\n$rng seed [clock seconds]\r\n\r\n#-------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n# Creating an access point\r\nputs \"Creating an access point...\"\r\n\r\nset_default_settings\r\n\r\n\r\n# Using Mica 2 Mote settings\r\n\r\nputs \"Using mica 2 mote settings\"\r\nset val(range) 100\r\nsetup_mica2 $val(antenna) $val(range)\r\nset local(x) 50.0\r\nset local(y) 50.0\r\nset local(z) 0.0\r\nset local(start) \"\"\r\nset local(stop) \"\"\r\nset local(energy) 100.0\r\nset val(apApp) Application/AccessPointApp/AccessPointLeachApp\r\n\r\ncreate_access_point $local(energy) $local(x) $local(y) $local(z) $local(start) $local(stop)\r\n\r\n\r\n\r\n# Creating common node\r\nputs \"Creating common node...\"\r\n\r\nset_default_settings\r\n\r\n\r\n# Using Mica 2 Mote settings\r\nputs \"Using mica 2 mote settings\"\r\n\r\nset val(range) 100\r\nsetup_mica2 $val(antenna) $val(range)\r\n\r\n# Disseminating settings\r\nset val(disseminating_type) 0       ;# Programmed\r\nputs \"Setting disseminating type to programmed\"\r\nset val(disseminating_interval) 10.0\r\nputs \"Setting disseminating interval: $val(disseminating_interval)\"\r\n\r\nset local(start) \"\"\r\nset local(stop) \"\"\r\nset local(energy) 10.0\r\nset local(father_addr) $val(father_addr)\r\n\r\nset val(processing) Processing/AggregateProcessing\r\nset val(data_generator) \"[create_data_generator {TemperatureDataGenerator} {5.0} {programmed} {25.0} {5.0} {30.0}]\"\r\n\r\n\r\nfor { set common_node_i 0 } { $common_node_i < 10 } { incr common_node_i } {\r\n    set local(x) [$rng uniform 0.0 $val(x)]\r\n    set local(y) [$rng uniform 0.0 $val(y)]\r\n    set local(z) 0.0\r\n\r\n    set val(commonApp) Application/SensorBaseApp/CommonNodeApp/LeachApp\r\n    create_common_node $local(energy) $local(x) $local(y) $local(z) $local(father_addr) $local(start) $local(stop)\r\n}\r\n\r\n\r\n$ns_ at [expr $val(stop)] \"flush stdout\"\r\n$ns_ at [expr $val(stop)+0.0001] \"finish\"\r\n\r\n\r\nproc finish {} {\r\n    global ns_ traceFile namtrace tempoInicio val\r\n\r\n    $ns_ flush-trace\r\n    #    close $namtrace\r\n    $ns_ halt\r\n    $ns_ flush-trace\r\n    #$ns_ nam-end-wireless $val(stop)\r\n    close $traceFile\r\n    #close $namtrace\r\n    flush stdout\r\n\r\n    exit 0\r\n}\r\n\r\nputs \"Starting Simulation...\"\r\n$ns_ run'),(15,18,'ns2','# Test for 802.16 scheduler.\r\n# @author rouil\r\n# @date 03/25/2007\r\n# Test file for wimax\r\n# Scenario: Communication between MN and Sink Node with MN attached to BS.\r\n#           Using grep ^r out_mod.res | grep MAC | grep -c cbr you can see the number of\r\n#           mac packets received at the BS.\r\n#           Using grep ^s out_mod.res | grep MAC | grep -c cbr you can see the number of \r\n#           mac packets sent (200 packets). \r\n#           \r\n#\r\n# Topology scenario: Uplink transmission\r\n#\r\n#\r\n#	            |-----|          \r\n#	            | MN0 |                 ; 1.0.1 \r\n#	            |-----|        \r\n#		           |\r\n#		           |\r\n#	        |--------------|\r\n#           | Base Station | 		    ; 1.0.0\r\n#           |--------------|\r\n#	    	        |\r\n#	    	        |\r\n#   		       (v)\r\n#	         |-----------|\r\n#            | Sink node | 		        ; 0.0.0\r\n#            |-----------|\r\n#\r\n#\r\n# Notes: \r\n# Traffic should not start before 25s for the following reasons:\r\n# - Network Entry can be time consuming\r\n#    - The time to discover the AP (i.e. receive DL_MAP) is fairly quick even\r\n#      with channel scanning. In the order of few hundred ms.\r\n#    - Default DCD/UCD interval is 5s. \r\n#    - Ranging/Registration is quick (<100ms)\r\n# - Routing protocol used here is DSDV, with default updates interval of 15s.\r\n#\r\n# @modified on 08/20/2008 to use more realistic physical layer configuration\r\n#                         look for ### BEGIN Physical ...\r\n#                         also adjusted the transmit data rate to reduce simulation time\r\n\r\n\r\n\r\n#defines function for flushing and closing files\r\nproc finish {} {\r\n    global ns tf output_dir nb_mn\r\n    $ns flush-trace\r\n    close $tf\r\n    puts \"Simulation done.\"\r\n    exit 0\r\n}\r\n\r\n# set global variables\r\nset seed 0		;# seed\r\nset diuc 1		;# diuc profile [1-7]\r\nset direction ul          ;# traffic direction\r\nset distance 1000           ;# distance of the MS from the BS\r\n\r\nglobal defaultRNG\r\n$defaultRNG seed $seed\r\n\r\nset nb_mn 1                     ;# A single mobile node\r\nset packet_size	1500			;# packet size in bytes at CBR applications \r\nset gap_size 0.0008                     ;# 15Mb/s\r\n#we know lower modulations do not support high datarate, so no need to push it\r\nif { $diuc == \"1\" } {\r\n     set gap_size 0.004                     ;# 3Mb/s  \r\n}\r\nif { $diuc == \"2\" } {\r\n     set gap_size 0.0024                     ;# 5Mb/s   \r\n}\r\nif { $diuc == \"3\" } {\r\n     set gap_size 0.0017                     ;# ~7Mb/s   \r\n}\r\nif { $diuc == \"4\" } {\r\n     set gap_size 0.0015                     ;# 8Mb/s   \r\n}\r\nif { $diuc == \"5\" } {\r\n     set gap_size 0.0011                     ;# ~11Mb/s   \r\n}\r\nif { $diuc == \"6\" } {\r\n    set gap_size 0.0008                     ;# 15Mb/s    \r\n}\r\nif { $diuc == \"7\" } {\r\n    set gap_size 0.0008                     ;# 15Mb/s\r\n}\r\n\r\n\r\nputs \"gap size=$gap_size\"\r\nset traffic_start 5\r\nset traffic_stop  15\r\nset simulation_stop 20\r\n\r\n#define debug values\r\nMac/802_16 set debug_           1\r\nMac/802_16 set rtg_             20\r\nMac/802_16 set ttg_             20\r\nMac/802_16 set frame_duration_  0.005\r\nMac/802_16 set ITU_PDP_         2\r\nMac/802_16/BS set dlratio_      .66\r\nMac/802_16/SS set dlratio_      .66\r\nMac/802_16 set fbandwidth_      10e+6\r\nMac/802_16 set disable_interference_ 0\r\n\r\nPhy/WirelessPhy/OFDMA set g_ 0.25\r\n\r\n### BEGIN Physical layer configuration\r\n\r\n#define coverage area for base station\r\n#This configuration is based on the following product (randomly picked)\r\n#http://www.proxim.com/downloads/products/mp16/DS_0806_MP16_3500_USHR.pdf\r\nAntenna/OmniAntenna set X_ 0\r\nAntenna/OmniAntenna set Y_ 0\r\nAntenna/OmniAntenna set Z_ 20                   ;#height \r\nAntenna/OmniAntenna set Gt_ 100.0               ;#20 dBi\r\nAntenna/OmniAntenna set Gr_ 63.1                ;#18 dBi\r\nPhy/WirelessPhy set Pt_ 0.126                   ;# 126 mW\r\nif { $diuc == \"1\" } {\r\n    Phy/WirelessPhy set RXThresh_ 6.309573444801928e-13          ;#-92 dBm\r\n}\r\nif { $diuc == \"2\" } {\r\n    Phy/WirelessPhy set RXThresh_ 1.2589254117941626e-12         ;#-89 dBm\r\n}\r\nif { $diuc == \"3\" } {\r\n    Phy/WirelessPhy set RXThresh_ 1.995262314968876e-12         ;#-87 dBm\r\n}\r\nif { $diuc == \"4\" } {\r\n    Phy/WirelessPhy set RXThresh_ 3.981071705534953e-12         ;#-84 dBm\r\n}\r\nif { $diuc == \"5\" } {\r\n    Phy/WirelessPhy set RXThresh_ 7.94328234724281e-12         ;#-81 dBm\r\n}\r\nif { $diuc == \"6\" } {\r\n    Phy/WirelessPhy set RXThresh_ 1.995262314968878e-11         ;#-77 dBm\r\n}\r\nif { $diuc == \"7\" } {\r\n    Phy/WirelessPhy set RXThresh_ 3.162277660168371e-11         ;#-75 dBm\r\n}\r\n\r\nPhy/WirelessPhy set CSThresh_ [expr 0.9*[Phy/WirelessPhy set RXThresh_]]\r\nPhy/WirelessPhy set OFDMA_ 1 \r\n\r\n### end Physical layer configuration\r\n\r\n\r\n\r\n\r\n# Parameter for wireless nodes\r\nset opt(chan)           Channel/WirelessChannel    ;# channel type\r\nset opt(prop)           Propagation/OFDMA          ;# radio-propagation model\r\nset opt(netif)          Phy/WirelessPhy/OFDMA      ;# network interface type\r\nset opt(mac)            Mac/802_16/BS              ;# MAC type\r\nset opt(ifq)            Queue/DropTail/PriQueue    ;# interface queue type\r\nset opt(ll)             LL                         ;# link layer type\r\nset opt(ant)            Antenna/OmniAntenna        ;# antenna model\r\nset opt(ifqlen)         50              	       ;# max packet in ifq\r\nset opt(adhocRouting)   DSDV                       ;# routing protocol\r\n\r\nset opt(x)		5500			                   ;# X dimension of the topography\r\nset opt(y)		1100			                   ;# Y dimension of the topography\r\n\r\n\r\n#create the simulator\r\nset ns [new Simulator]\r\n$ns use-newtrace\r\n\r\n#create the topography\r\nset topo [new Topography]\r\n$topo load_flatgrid $opt(x) $opt(y)\r\n#puts \"Topology created\"\r\n\r\n#open file for trace\r\nset tf [open wimax_mod_rate.tr w]\r\n$ns trace-all $tf\r\n#puts \"Output file configured\"\r\n\r\n# set up for hierarchical routing (needed for routing over a basestation)\r\n#puts \"start hierarchical addressing\"\r\n$ns node-config -addressType hierarchical\r\nAddrParams set domain_num_ 2          			;# domain number\r\nlappend cluster_num 1 1            			    ;# cluster number for each domain \r\nAddrParams set cluster_num_ $cluster_num\r\nlappend eilastlevel 1 [expr ($nb_mn+1)] 		;# number of nodes for each cluster (1 for sink and one for mobile nodes + base station\r\nAddrParams set nodes_num_ $eilastlevel\r\nputs \"Configuration of hierarchical addressing done\"\r\n\r\n# Create God\r\ncreate-god [expr ($nb_mn + 2)]				    ;# nb_mn + 2 (base station and sink node)\r\n#puts \"God node created\"\r\n\r\n#creates the sink node in first addressing space.\r\nset sinkNode [$ns node 0.0.0]\r\n#provide some co-ord (fixed) to base station node\r\n$sinkNode set X_ 50.0\r\n$sinkNode set Y_ 50.0\r\n$sinkNode set Z_ 0.0\r\n#puts \"sink node created\"\r\n\r\n#creates the Access Point (Base station)\r\n$ns node-config -adhocRouting $opt(adhocRouting) \\\r\n    -llType $opt(ll) \\\r\n    -macType Mac/802_16/BS \\\r\n    -ifqType $opt(ifq) \\\r\n    -ifqLen $opt(ifqlen) \\\r\n    -antType $opt(ant) \\\r\n    -propType $opt(prop)    \\\r\n    -phyType $opt(netif) \\\r\n    -channel [new $opt(chan)] \\\r\n    -topoInstance $topo \\\r\n    -wiredRouting ON \\\r\n    -agentTrace ON \\\r\n    -routerTrace ON \\\r\n    -macTrace ON  \\\r\n    -movementTrace OFF\r\n#puts \"Configuration of base station\"\r\n\r\n#setup channel model\r\nset prop_inst [$ns set propInstance_]\r\n$prop_inst ITU_PDP PED_A\r\nputs \"after set pPDP\"\r\n\r\n\r\nset bstation [$ns node 1.0.0]  \r\n$bstation random-motion 0\r\n#puts \"Base-Station node created\"\r\n#provide some co-ord (fixed) to base station node\r\n$bstation set X_ 550.0\r\n$bstation set Y_ 550.0\r\n$bstation set Z_ 0.0\r\n[$bstation set mac_(0)] set-channel 0\r\n\r\n# creation of the mobile nodes\r\n$ns node-config -macType Mac/802_16/SS \\\r\n    -wiredRouting OFF \\\r\n    -macTrace ON  				;# Mobile nodes cannot do routing.\r\nfor {set i 0} {$i < $nb_mn} {incr i} {\r\n    set wl_node_($i) [$ns node 1.0.[expr $i + 1]] 	;# create the node with given @.	\r\n    $wl_node_($i) random-motion 0			;# disable random motion\r\n    $wl_node_($i) base-station [AddrParams addr2id [$bstation node-addr]] ;#attach mn to basestation\r\n    #compute position of the node\r\n    $wl_node_($i) set X_ [expr 550.0+$distance]\r\n    $wl_node_($i) set Y_ 550.0\r\n    $wl_node_($i) set Z_ 0.0\r\n    #$ns at 0 \"$wl_node_($i) setdest 1060.0 550.0 1.0\"\r\n    puts \"wireless node $i created ...\"			;# debug info\r\n\r\n    [$wl_node_($i) set mac_(0)] set-channel 0\r\n    [$wl_node_($i) set mac_(0)] set-diuc $diuc\r\n    #[$wl_node_($i) set mac_(0)] setflow UL 10000 BE 700 2 1 0.05 15 1 ;# setting up static flows \r\n    [$wl_node_($i) set mac_(0)] setflow UL 10000 BE 275 2 0 0.05 15 1 0 0 0 0 0 0 0 0 0 0 ;# setting up static flows \r\n    [$wl_node_($i) set mac_(0)] setflow DL 10000 BE 275 2 0 0.05 15 1 0 0 0 0 0 0 0 0 0 0 ;# setting up static flows \r\n\r\n    #create source traffic\r\n    #Create a UDP agent and attach it to node n0\r\n    set udp_($i) [new Agent/UDP]\r\n    $udp_($i) set packetSize_ 1500\r\n\r\n    if { $direction == \"ul\" } {\r\n	    $ns attach-agent $wl_node_($i) $udp_($i)\r\n    } else {\r\n	    $ns attach-agent $sinkNode $udp_($i)\r\n    }\r\n\r\n    # Create a CBR traffic source and attach it to udp0\r\n    set cbr_($i) [new Application/Traffic/CBR]\r\n    $cbr_($i) set packetSize_ $packet_size\r\n    $cbr_($i) set interval_ $gap_size\r\n    $cbr_($i) attach-agent $udp_($i)\r\n\r\n    #create an sink into the sink node\r\n\r\n    # Create the Null agent to sink traffic\r\n    set null_($i) [new Agent/Null] \r\n    if { $direction == \"ul\" } {    \r\n	    $ns attach-agent $sinkNode $null_($i)\r\n    } else {\r\n	    $ns attach-agent $wl_node_($i) $null_($i)\r\n    }\r\n    \r\n    # Attach the 2 agents\r\n    $ns connect $udp_($i) $null_($i)\r\n}\r\n\r\n# create the link between sink node and base station\r\n$ns duplex-link $sinkNode $bstation 100Mb 1ms DropTail\r\n\r\n# Traffic scenario: if all the nodes start talking at the same\r\n# time, we may see packet loss due to bandwidth request collision\r\nset diff 0.02\r\nfor {set i 0} {$i < $nb_mn} {incr i} {\r\n    $ns at [expr $traffic_start+$i*$diff] \"$cbr_($i) start\"\r\n    $ns at [expr $traffic_stop+$i*$diff] \"$cbr_($i) stop\"\r\n}\r\n\r\n$ns at $simulation_stop \"finish\"\r\n# Run the simulation\r\nputs \"Running simulation for MS with distance $distance...\"\r\n$ns run\r\n'),(16,20,'','#############################################\r\n#             Star over 802.15.4            #\r\n#              (beacon enabled)             #\r\n#      Copyright (c) 2003 Samsung/CUNY      #\r\n# - - - - - - - - - - - - - - - - - - - - - #\r\n#        Prepared by Jianliang Zheng        #\r\n#         (zheng@ee.ccny.cuny.edu)          #\r\n#############################################\r\n\r\n# ======================================================================\r\n# Define options\r\n# ======================================================================\r\nset val(chan)           Channel/WirelessChannel    ;# Channel Type\r\nset val(prop)           Propagation/TwoRayGround   ;# radio-propagation model\r\nset val(netif)          Phy/WirelessPhy/802_15_4\r\nset val(mac)            Mac/802_15_4\r\nset val(ifq)            Queue/DropTail/PriQueue    ;# interface queue type\r\nset val(ll)             LL                         ;# link layer type\r\nset val(ant)            Antenna/OmniAntenna        ;# antenna model\r\nset val(ifqlen)         150                        ;# max packet in ifq\r\nset val(nn)             7                          ;# number of mobilenodes\r\nset val(rp)             AODV                       ;# routing protocol\r\nset val(x)		50\r\nset val(y)		50\r\nset val(traffic)	ftp                        ;# cbr/poisson/ftp\r\n\r\nset appTime1            7.0	;# in seconds \r\nset appTime2            7.1	;# in seconds \r\nset appTime3            7.2	;# in seconds \r\nset appTime4            7.3	;# in seconds \r\nset appTime5            7.4	;# in seconds \r\nset appTime6            7.5	;# in seconds \r\nset stopTime            100	;# in seconds \r\n\r\n# Initialize Global Variables\r\nset ns_		[new Simulator]\r\n$ns_ use-newtrace\r\nset tracefd     [open ./wpan_demo2bo6mod.tr w]\r\n$ns_ trace-all $tracefd\r\n\r\nMac/802_15_4 wpanCmd verbose on\r\n#Mac/802_15_4 wpanNam namStatus on		;# default = off (should be turned on before other \'wpanNam\' commands can work)\r\n#Mac/802_15_4 wpanNam ColFlashClr gold		;# default = gold\r\n\r\nset dist(15m) 8.54570e-07\r\n# For model \'TwoRayGround\'\r\n\r\nPhy/WirelessPhy set CSThresh_ $dist(15m)\r\nPhy/WirelessPhy set RXThresh_ $dist(15m)\r\n\r\n# set up topography object\r\nset topo       [new Topography]\r\n$topo load_flatgrid $val(x) $val(y)\r\n\r\n# Create God\r\nset god_ [create-god $val(nn)]\r\n\r\nset chan_1_ [new $val(chan)]\r\n\r\n# configure node\r\n\r\n$ns_ node-config -adhocRouting $val(rp) \\\r\n		-llType $val(ll) \\\r\n		-macType $val(mac) \\\r\n		-ifqType $val(ifq) \\\r\n		-ifqLen $val(ifqlen) \\\r\n		-antType $val(ant) \\\r\n		-propType $val(prop) \\\r\n		-phyType $val(netif) \\\r\n		-topoInstance $topo \\\r\n		-agentTrace OFF \\\r\n		-routerTrace OFF \\\r\n		-macTrace ON \\\r\n		-movementTrace OFF \\\r\n                -energyModel \"EnergyModel\" \\\r\n                -initialEnergy 1 \\\r\n                -rxPower 0.3 \\\r\n                -txPower 0.3 \\\r\n		-channel $chan_1_ \r\n\r\nfor {set i 0} {$i < $val(nn) } {incr i} {\r\n	set node_($i) [$ns_ node]	\r\n	$node_($i) random-motion 0		;# disable random motion\r\n}\r\n\r\n#source ./wpan_demo2.scn\r\n\r\n$node_(0) set X_ 25\r\n$node_(0) set Y_ 25\r\n$node_(0) set Z_ 0\r\n\r\n$node_(1) set X_ 35\r\n$node_(1) set Y_ 25\r\n$node_(1) set Z_ 0\r\n\r\n$node_(2) set X_ 29.9963\r\n$node_(2) set Y_ 33.6624\r\n$node_(2) set Z_ 0\r\n\r\n$node_(3) set X_ 19.9927\r\n$node_(3) set Y_ 33.656\r\n$node_(3) set Z_ 0\r\n\r\n$node_(4) set X_ 15\r\n$node_(4) set Y_ 24.9874\r\n$node_(4) set Z_ 0\r\n\r\n$node_(5) set X_ 20.0146\r\n$node_(5) set Y_ 16.3313\r\n$node_(5) set Z_ 0\r\n\r\n$node_(6) set X_ 30.0182\r\n$node_(6) set Y_ 16.3503\r\n$node_(6) set Z_ 0\r\n\r\n$ns_ at 0.0	\"$node_(0) NodeLabel PAN Coor\"\r\n$ns_ at 0.0	\"$node_(0) sscs startPANCoord 1 6 0\"		;# startPANCoord <txBeacon=1> <BO=6> <SO=0>\r\n$ns_ at 0.5	\"$node_(1) sscs startDevice 1 0 0 6 0\"	;# startDevice <isFFD=1> <assoPermit=1> <txBeacon=0> <BO=6> <SO=0>\r\n$ns_ at 1.5	\"$node_(2) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 2.5	\"$node_(3) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 3.5	\"$node_(4) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 4.5	\"$node_(5) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 5.5	\"$node_(6) sscs startDevice 1 0 0 6 0\"\r\n\r\n#Mac/802_15_4 wpanNam PlaybackRate 3ms\r\n\r\n$ns_ at $appTime1 \"puts \\\"\\nTransmitting data ...\\n\\\"\"\r\n\r\n# Setup traffic flow between nodes\r\n\r\n\r\nproc ftptraffic { src dst starttime } {\r\n   global ns_ node_\r\n   set tcp($src) [new Agent/TCP]\r\n   eval \\$tcp($src) set packetSize_ 50\r\n   set sink($dst) [new Agent/TCPSink]\r\n   eval $ns_ attach-agent \\$node_($src) \\$tcp($src)\r\n   eval $ns_ attach-agent \\$node_($dst) \\$sink($dst)\r\n   eval $ns_ connect \\$tcp($src) \\$sink($dst)\r\n   set ftp($src) [new Application/FTP]\r\n   eval \\$ftp($src) attach-agent \\$tcp($src)\r\n   $ns_ at $starttime \"$ftp($src) start\"\r\n}\r\n     \r\nif { \"$val(traffic)\" == \"ftp\" } {\r\n   puts \"\\nTraffic: ftp\"\r\n   #Mac/802_15_4 wpanCmd ack4data off\r\n   puts [format \"Acknowledgement for data: %s\" [Mac/802_15_4 wpanCmd ack4data]]\r\n   $ns_ at $appTime1 \"Mac/802_15_4 wpanNam PlaybackRate 0.20ms\"\r\n   $ns_ at [expr $appTime1 + 0.5] \"Mac/802_15_4 wpanNam PlaybackRate 1.5ms\"\r\n   ftptraffic 0 1 $appTime1\r\n   ftptraffic 0 3 $appTime3\r\n   ftptraffic 0 5 $appTime5\r\n   $ns_ at $appTime1 \"$ns_ trace-annotate \\\"(at $appTime1) ftp traffic from node 0 to node 1\\\"\"\r\n   $ns_ at $appTime3 \"$ns_ trace-annotate \\\"(at $appTime3) ftp traffic from node 0 to node 3\\\"\"\r\n   $ns_ at $appTime5 \"$ns_ trace-annotate \\\"(at $appTime5) ftp traffic from node 0 to node 5\\\"\"\r\n   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato\r\n   Mac/802_15_4 wpanNam FlowClr -p ARP -c green\r\n   Mac/802_15_4 wpanNam FlowClr -p MAC -s 0 -d -1 -c navy\r\n   Mac/802_15_4 wpanNam FlowClr -p tcp -s 0 -d 1 -c blue\r\n   Mac/802_15_4 wpanNam FlowClr -p ack -s 1 -d 0 -c blue\r\n   Mac/802_15_4 wpanNam FlowClr -p tcp -s 0 -d 3 -c green4\r\n   Mac/802_15_4 wpanNam FlowClr -p ack -s 3 -d 0 -c green4\r\n   Mac/802_15_4 wpanNam FlowClr -p tcp -s 0 -d 5 -c cyan4\r\n   Mac/802_15_4 wpanNam FlowClr -p ack -s 5 -d 0 -c cyan4\r\n}\r\n\r\n\r\n# Tell nodes when the simulation ends\r\nfor {set i 0} {$i < $val(nn) } {incr i} {\r\n    $ns_ at $stopTime \"$node_($i) reset\";\r\n}\r\n\r\n$ns_ at $stopTime \"stop\"\r\n$ns_ at $stopTime \"puts \\\"NS EXITING...\\n\\\"\"\r\n$ns_ at $stopTime \"$ns_ halt\"\r\n\r\nproc stop {} {\r\n    global ns_ tracefd appTime1 val env\r\n    $ns_ flush-trace\r\n    close $tracefd\r\n    set hasDISPLAY 0\r\n    foreach index [array names env] {\r\n        #puts \"$index: $env($index)\"\r\n        if { (\"$index\" == \"DISPLAY\") && (\"$env($index)\" != \"\") } {\r\n                set hasDISPLAY 1\r\n        }\r\n    }\r\n   \r\n}\r\n\r\nputs \"\\nStarting Simulation...\"\r\n$ns_ run'),(17,21,'','# Bluetooth simulation\r\nset ns [new Simulator]\r\n\r\n$ns node-config -macType Mac/BNEP\r\nset btRouting AODV\r\n\r\n#defaults\r\nset val(nn)     32\r\n\r\nset P 0.5	;# 0.3333 ~ 0.6667\r\nset K 7\r\nset delta 5\r\nset lastRoundTries 6\r\n\r\nset trafficStartTime 90\r\nset collisionRng 22.4	;# set to 0 to turn collision off.\r\nset rpAlgo	DRP\r\nset tsniff	256\r\nset seed 1634\r\nset tracePageScan off\r\n\r\nif {$argc >= 1} {\r\n    set val(nn) [lindex $argv 0]\r\n}\r\n\r\nif {$argc >= 2} {\r\n    set P [lindex $argv 1]\r\n}\r\nif {$argc >= 3} {\r\n    set K [lindex $argv 2]\r\n}\r\nif {$argc >= 4} {\r\n    set delta [lindex $argv 3]\r\n}\r\nif {$argc >= 5} {\r\n    set lastRoundTries [lindex $argv 4]\r\n}\r\n\r\nif {$argc >= 6} {\r\n    set trafficStartTime [lindex $argv 5]\r\n}\r\nif {$argc >= 7} {\r\n    set collisionRng [lindex $argv 6]\r\n}\r\nif {$argc >= 8} {\r\n    set rpAlgo [lindex $argv 7]\r\n}\r\nif {$argc >= 9} {\r\n    set tsniff [lindex $argv 8]\r\n}\r\nif {$argc >= 10} {\r\n    set seed [lindex $argv 9]\r\n}\r\nif {$argc >= 11} {\r\n    set tracePageScan [lindex $argv 10]\r\n}\r\n\r\n#global defaultRNG\r\n#$defaultRNG seed raw $seed\r\n\r\nset recStartT [expr $trafficStartTime + 10]\r\nset recFinishT [expr $recStartT + 10]\r\nset dst [expr $val(nn) - 1]\r\n# set radioRng 11.2\r\nset sniffatt [expr $tsniff / 2]\r\n\r\nfor {set i 0} {$i < $val(nn) } {incr i} {\r\n    set node($i) [$ns node $i ]\r\n    $node($i) rt $btRouting\r\n    $node($i) set-statist $recStartT $recFinishT 1\r\n    $ns at 0 \"$node($i) on\"\r\n    [$node($i) set lmp_] set defaultTSniff_ $tsniff\r\n    [$node($i) set lmp_] set defaultSniffAttempt_ $sniffatt\r\n    $node($i) SchedAlgo PRR\r\n    $node($i) BrAlgo $rpAlgo\r\n    $node($i) ScatForm Law\r\n    $node($i) sf-law-delta $delta\r\n    $node($i) sf-law-p $P\r\n    $node($i) sf-law-k $K\r\n    $node($i) sf-law-term-schred $lastRoundTries\r\n    [$node($i) set bb_] set N_page_ 1\r\n    [$node($i) set bb_] set ver_ 11\r\n    #[$node($i) set bb_] set ver_ 12\r\n}\r\n\r\n$node(0) CollisionDist $collisionRng\r\n$node(0) trace-all-in-air $tracePageScan\r\n\r\n\r\nset udp0 [new Agent/UDP]\r\n$ns attach-agent $node(0) $udp0\r\nset cbr0 [new Application/Traffic/CBR]\r\n$cbr0 attach-agent $udp0\r\n                                                                                \r\nset null0 [new Agent/Null]\r\n$ns attach-agent $node($dst) $null0\r\n                                                                                \r\n$ns connect $udp0 $null0\r\n                                                                                \r\n$udp0 set packetSize_ 1400\r\n$cbr0 set packetSize_ 1329\r\n$cbr0 set interval_ 0.015\r\n                                                                                \r\n$ns at $recStartT \"$cbr0 start\"\r\n\r\n$ns at $recFinishT \"finish\"\r\n                                                                                \r\nproc finish {} {\r\n    global node\r\n    $node(0) print-all-stat\r\n    exit 0\r\n}\r\n\r\n$ns run');
/*!40000 ALTER TABLE `ant_defaultcode` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_exercise`
--

DROP TABLE IF EXISTS `ant_exercise`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_exercise` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `workspace_id` int(11) NOT NULL,
  `problem_id` int(11) NOT NULL,
  `problem` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ant_exercise_453a65b7` (`theory_id`),
  KEY `ant_exercise_7f0f0272` (`workspace_id`),
  CONSTRAINT `theory_id_refs_id_3881f67e` FOREIGN KEY (`theory_id`) REFERENCES `ant_theory` (`id`),
  CONSTRAINT `workspace_id_refs_id_4876d553` FOREIGN KEY (`workspace_id`) REFERENCES `ant_workspace` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_exercise`
--

LOCK TABLES `ant_exercise` WRITE;
/*!40000 ALTER TABLE `ant_exercise` DISABLE KEYS */;
INSERT INTO `ant_exercise` VALUES (1,1,3,1,'<h3>Write a TCL script to simulate the network described below</h3>\r\n\r\n<p>\r\nThe first few exercises are aimed to familiarize you with the concept of\r\nnetwork simulation using ns2. We begin with a simple problem, and slowly introduce\r\nsome other features that ns2 provide.\r\n</p>\r\n\r\n<p>\r\nConsider a small network with five nodes n0, n1, n2, n3, n4, forming a star topology.\r\nThe node n4 is at the center. Node n0 is a TCP source, which transmits packets to \r\nnode n3 (a TCP sink) through the node n4. Node n1 is another traffic source, and\r\nsends UDP packets to node n2 through n4. The duration of the simulation time is \r\n10 seconds.\r\n</p>\r\n\r\n<p>\r\nWrite a Tcl script (in the text area below) to simulate this scenario. Once you have written your simulation script, click on the &quot;Run&quot; button to execute it. You can verify your code by clicking on the &quot;View Solution&quot; button at the bottom of the page.\r\n</p>'),(2,1,3,2,'<h3>Write a TCL script to simulate a file transfer with ns2</h3>\r\n\r\n<p>\r\nConsider a client and a server. The server is running a FTP application (over\r\nTCP). The client sends a request to download a file of size 10 MB from the server.\r\nWrite a script to simulate this scenario. Let node #0 be the server and node #1\r\nbe the client. TCP packet size is 1500 B. Assume typical values for other parameters.\r\n</p>\r\n\r\n<p>\r\n<strong>Note:</strong> This simulation require transfer of a <strong>fixed</strong>\r\nsize file. Therefore, time required for the transfer would be constant for a given\r\nbandwidth of a link. To verify this, determine the time that would roughly be required\r\nfor the transfer. Then look at the bottom of the trace file and verify whether there\r\nis any transmission beyond the time calculated.\r\n</p>\r\n\r\n<p>\r\nTo verify that the client has downloaded the entire file, plot the &quot;Bytes Received\r\n&quot; curve for node #1. The y-axis is in Kbits. Convert it to MB and verify\r\nwhether it approximates the specified file size. TCP headers would effectively\r\nincrease the count of received bytes at node # 1.\r\n</p>'),(3,3,3,1,'<h3>A bottleneck in the network</h3>\r\n\r\n<p>\r\nConsider a dumbbell topology with eight nodes as shown as in the following figure. \r\nConsider nodes # 2 and 3 to be two routers connecting two different networks. When \r\nthe bandwidth of the link 2-3 is much lower than the sum of bandwidths of the other \r\nlinks in the network, it act as a bottleneck.\r\n\r\n<img id=\"diagram\" src=\"_STATIC_URL_/ant/images/exercise/ant/ex3_xs2.png\" alt=\"Dumbbell \r\ntopology with bottleneck\">\r\n</p>\r\n<p>\r\nAssume node # 0 running a FTP application (over TCP) and sending data to node # 6. \r\nNode # 1 is sending CBR data node # 7. Assume all the links except 2-3 has a bandwidth \r\nof 1 Mb, propagation delay of 10ms and queue type as DropTail. (All are duplex links).\r\n</p>\r\n\r\n<p>\r\n<strong>Tasks:</strong>\r\n<ul>\r\n  <li>The link 2-3 has a propagation delay of 10 ms. Vary it\'s bandwidth from 0.5 Mb to 2.5 \r\nMb in steps of 0.25Mb.</li>\r\n  <li>Compute the throughput for node # 3 in each case</li>\r\n  <li>Plot the throughput vs. bandwidth data in the &quot;Custom Plot&quot; section below</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nBased on the above plots, suggest what should be the recommended bandwidth of the link 2-3.\r\n</p>\r\n\r\n<p>\r\nNow, plot the end-to-end delay between nodes 0 and 6 for the above chosen values of link 2-3 bandwidth. Revisit your previous answer (i.e. optimum bandwidth of link 2-3) based on these graphs.\r\n</p>\r\n\r\n<p>\r\nReferences: This problem is based on <a href=\"/ant/3/references/\">[i]</a>, \r\n<a href=\"/ant/3/references/\">[ii]</a>\r\n</p>'),(4,3,3,2,'<h3>Bandwidth sharing between TCP and UDP</h3>\r\n\r\n<p>\r\nConsider the dumbbell topology from our previous exercise:\r\n<img id=\"diagram\" src=\"_STATIC_URL_/ant/images/exercise/ant/ex3_xs2.png\" alt=\"Dumbbell \r\ntopology with bottleneck\">\r\n</p>\r\n\r\n<p>\r\nNode # 0 is a TCP source, and the corresponding sink is at node # 6. Node # 1 is\r\na UDP source (CBR traffic) with a null agent attached to node # 7. These two \r\ntraffic flows through the common link 2-3. The aim of this exercise is to \r\nexamine how TCP and UDP share the bandwidth between themselves when the rate of \r\nCBR traffic is changed.\r\n</p>\r\n\r\n<p>\r\nSet the TCP packet size to 1460 B. The UDP and CBR packet sizes are 1500 B. All \r\nthe links in the network have same bandwidths (say, 4 Mb), delay and queue types.\r\n</p>\r\n\r\n<p>\r\n<strong>Part 1:</strong>\r\n<ul>\r\n    <li>Set the initial rate of CBR traffic to 0.5 Mb. Run the simulation, and plot the\r\n    &quot;Bytes Received&quot; by node #s 4 and 5 (sinks for TCP and UDP traffic)</li>\r\n    <li>Now, increment the rate up to 4 Mb, the link bandwidth, in steps of 0.5 Mb. \r\n    Run the simulation and plot the graphs again.</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nHow does the graphs change after each run? In particular, what\'s the nature \r\nof the graphs when the rate of CBR traffic is 50% of the bandwidth?\r\n</p>\r\n\r\n<p>\r\n<strong>Part 2: Behaviour of UDP</strong>\r\n<ul>\r\n    <li>Reduce the bandwidth of the link 2-3 to say, 2 Mb. Repeat the above steps\r\n    and observe the graphs in this case.</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nFrom the graphs plotted observe how UDP occupies a larger portion of the bandwidth.\r\nHow does the behaviour change for other variations of TCP (Newreno, Vegas)?\r\n</p>\r\n\r\n<p>\r\n<strong>References:</strong>\r\nThis exercise has been set by taking inputs from the following:\r\n<ul>\r\n    <li><a href=\"http://www.cs.tut.fi/~dunaytse/ns2/ns2part2.pdf\">NS2 SIMULATION, \r\n    PART 2</a></li>\r\n    <li><a href=\"\"></a>Naoki Wakamiya, Masayuki Murata, Hideo Miyahara.\r\n    &quot;TCP-friendly video transfer&quot;. In <i>Proceedings of SPIE International \r\n    Symposium on Information Technologies</i>, 2000</li>\r\n</ul>\r\n</p>'),(5,2,3,1,'<h3>Setting up a local area network with ns2</h3>\r\n\r\n<p>\r\nIn this exercise you will be simulating a CSMA/CD based LAN with ns2. Consider\r\nthe LAN with seven nodes to be an isolated one i.e. not connected to the\r\nInternet. Node # 0 in the LAN act as a UDP traffic source, and node # 6 is the\r\ndestination node. Assume CBR traffic to be flowing between the nodes. The\r\nsimulation lasts for 25 seconds.\r\n</p>\r\n\r\n<p>\r\nIn Ethernet a packet is broadcasted in the shared medium, and only the destination\r\nnode accepts the packet. Other nodes simply drop it. What should be the number\r\nof hops a packet from node # 0 to node # 6 travel? Verify this from the \r\n&quot;Hop Count&quot; plot.\r\n</p>\r\n\r\n<p>\r\n<strong>Additional Task:</strong>\r\nSuppose the above LAN is to be connected to the Internet. Add node # 7 into the\r\nnetwork so that it act as the gateway. Connect node # 0 and # 7 with a 1 Mb wired\r\nlink. Move the UDP source to node # 7. How the hop count should get affected\r\nin this case? Verify from the plot.\r\n</p>'),(6,2,3,2,'<h3>Simulating link errors</h3>\r\n\r\n<p>\r\nConsider the following topology:\r\n<img id=\"diagram\" src=\"_STATIC_URL_/ant/images/exercise/ant/ex2_xs2.png\" alt=\"LAN connected with a router\">\r\n</p>\r\n\r\n<p>\r\nHere node # 2 act as a router. Any traffic to or from the LAN passes through it.\r\nConsider node # 1 running a FTP server, and node # 5 is downloading a file of\r\nsize 4 MB. However, the link between node # 2 and # 3 is fault. It drops packets\r\nwith a fixed probability of 0.2. Implement a link error model to reflect this.\r\n</p>\r\n\r\n<p>\r\nIt may be noted here that the file download time will be more than the we had\r\nin exercise # 2 of experiment # 1. Try different values of the simulation time \r\nto ensure that the file has been entirely transferred. Is the plot of bytes received\r\na linear curve or non-linear? Why?\r\n</p>\r\n\r\n<p>\r\nPresence of link errors cause one or more packets to be retransmitted. Verify this\r\nfrom the &quot;Packet Retransmissions&quot; plot.\r\n</p>'),(7,5,4,1,'<h3>Illustration of Wifi communication range</h3>\r\n<p>\r\nConsider a Wifi access point (AP) and a base station (STA), which are both static. The STA can communicate with the AP only when it is within a certain distance from the AP. Beyond that range, the two nodes can\'t receive each others signals.\r\n</p>\r\n\r\n<p>\r\nGiven below is a code to simulate the said scenario with ns3. STA sends a packet to the AP; AP echoes it back to the base station. The AP is located at position (x, y) = (0, 0). STA is at (xDistance, 0) (all distances in meter). Default value of xDistance is set to 10. [Lines #74, #129]\r\n</p>\r\n\r\n<p>\r\nIncrease the value of xDistance in the code and <strong>find out the maximum distance</strong> up to which two way communication is possible. This can be verified from the output of the code, which will show the STA has received reply from the AP (indicated by IP address).\r\n</p>\r\n\r\n<p>If you like playing with code, you can also try these:<p>\r\n<ul>\r\n  <li>Change IP address allocated to the nodes [Line #146]</li>\r\n  <li>Run the UDP echo server on a different port [Line #151]</li>\r\n  <li>Send more packets from the echo client [Line #159]</li>\r\n  <li>Position the nodes along the y-axis [Line #126]</li>\r\n<ul>\r\n</p>'),(8,5,4,2,'<h3>Illustration of hidden node problem</h3>\r\n\r\n<p>\r\nConsider two Wifi base stations (STA) and an access point (AP) located along the x-axis. All the nodes are fixed. The AP is situated at the middle of the two STA, the distance of separation being 150 m. [Line #82]\r\n</p>\r\n\r\n<p>\r\nNode #0 and node #1 are the hidden terminals. Both are transmitting some data to the AP (almost at same rate) at the same time. The loss across the wireless link between each STA and the AP is fixed at 50 dB <u>irrespective of the distance of separation</u>. [Lines #92 - #95]\r\n</p>\r\n\r\n<p>\r\nTo study how RTS/CTS helps in wireless networks, we run two experiments. In the first one, no RTS/CTS is being sent. In the second one, nodes do exchange RTS/CTS packets. [Line #176, #179]\r\n</p>\r\n\r\n<p>\r\n<strong>\r\nCompare the no. of packet retransmissions required in both the cases (as obtained in the output) and convince yourself about the result.\r\n</strong>\r\n</p>\r\n\r\n<p>\r\n<strong>\r\nNote: </strong>Enable only <strong>one experiment</strong> at a time (line #s 177, 180), otherwise output for both the experiments will come together and it would be a bit difficult to compare. You could use the text filtering option provided below the simulation output section to count the number of retransmissions.\r\n\r\n</p>\r\n\r\n\r\n<p>If you like adventure, then try the following:<p>\r\n<ul>\r\n  <li>Apply a different loss model say, LogDistancePropagationLossModel, to this scenario [Lines #93 - #101] (Consult ns-3 documentation)</li>\r\n  <li>Simulate the exposed node problem and apply RTS/CTS to solve it</li>  \r\n<ul>\r\n</p>\r\n\r\n<p>\r\n<strong>Note:</strong> The above problem is partly based on &quot;Sample Lab#1 (Simulation): Effect of RTS/CTS on 802.11 wireless networks&quot; <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/5/references/\">[iv]</a>\r\n</p>'),(10,7,3,1,'<h3>\r\nWrite a simple script to simulate the following scenario with ns2.\r\n</h3>\r\n<p>Consider three mobile nodes, as shown in figure below, moving within a flat topology of 500m x 500m.\r\n<img id=\"diagram\" src=\"_STATIC_URL_/ant/images/exercise/ant/ex7_xs1.png\" alt=\"lanexercise1\" />\r\n</p>\r\n<p>Initial positions of nodes 0, 1 and 2 are (454.0, 404.0) , (22.0, 240.0) and (371.0, 185.0) respectively. The nodes move in the following way:\r\n</p>\r\n\r\n<p>At time t = 0,</p>\r\n\r\n<p> node 0 starts moving towards point (356.0, 11.5 ) at a speed of 3.55m/sec.</p>\r\n\r\n<p> node 1 starts moving towards point (238.0, 390.0 ) at a speed of 11.4m/sec.</p>\r\n\r\n<p> node 2 starts moving towards point (146.0, 445.0 ) at a speed of 9.7m/sec.</p>\r\n\r\n<p> At time t = 24, node 1 starts moving towards point (320.5, 254.6 ) at a speed of 7.99m/sec.</p>\r\n\r\n<p> At time t = 55, node 2 starts moving towards point (290.5, 254.6 ) at a speed of 5.99m/sec.</p>\r\n\r\n\r\n<p> The simulation lasts for 70 secs. At time t = 3 seconds, a TCP connection is initiated between node 0 (source) and node 2 (destination), and a FTP application runs over it. Use AODV as the routing protocol and the IEEE 802.11 MAC protocol.</p>\r\n\r\n<p> As a result of the above said movements of the node, data  moves from node 0 to node2 (0 - 2)directlty and after some time data  moves from node 0 to node2 via node 1 (0 - 1 - 2) and at times no communication happen at all.</p>\r\n<p> <strong>Analyze the trace file to determine the time intervals when these events take place.</strong></p>\r\n'),(12,7,3,2,'<h3>Write a TCL script to simulate the following scenario with ns2 simulator.</h3>\r\n<p>Consider six nodes, (as shown in the figure below) moving within a flat topology of 700m x 700m. <img id=\"diagram\" src=\"_STATIC_URL_/ant/images/exercise/ant/ex7_xs2.png\" alt=\"lanexercise1\" /></p>\r\n<p>The initial positions of nodes are 0 (150,300) ,1 (300,500),2 (500,500),3 (300,100),4(500,100) and 5(650,300) respectively.</p>\r\n<p>A TCP connection is initiated between node 0 (source) and node 5 (destination) through node 3 and node 4 i.e the route is 0-3-4-5.</p>\r\n<p>At time t = 3 seconds the FTP application runs over it.</p>\r\n<p>After time t=4.0 sec, node 3 (300,100) moves towards node 1 (300,500) with a speed of 5.0m/sec and after some time the path break, then the data transmit with a new path via node 1 and node 2 i.e the new route 0-1-2-5.</p>\r\n<p>The simulation lasts for 60 secs.</p>\r\n<p>In the above said case both the route has equal cost.</p>\r\n<p>Use DSR as the routing protocol and the IEEE 802.11 MAC protocol.</p>\r\n<p>Now</p>\r\n<ol>\r\n<li><strong>Analyze the trace file and determine when the use of second route commence, and <br /></strong></li>\r\n<li><strong><strong>Plot the number of packets received by each node over the entire time duration of the simulation</strong></strong></li>\r\n</ol>'),(13,4,3,1,'<h2>Simulating a geostationary satellite scenario with ns2</h2>\r\n\r\n<p>\r\nConsider an INSAT-3A multipurpose geostationary satellite and two satellite terminals, one at Bangkok and the other at Baghdad. The position of Bangkok is 13.9 degree latitude north and 100.9 degree longitude east. The position of Baghdad is 33.8 degree latitude north and  44.4 degree longitude east. INSAT-3A is used to provide television broadcasting from  Bangkok to Baghdad. INSAT-3A is positioned at 93.5 degrees longitude East. The traffic consists of a FTP source and a CBR stream. The simulation lasts for 50 secs.\r\n</p>\r\n\r\n<p>Analyze the trace file and find the following:<p>\r\n<ul>\r\n  <li>End-to-end delay between two terminals</li>\r\n  <li>What is the nature of  the delay that you expect in this scenario</li>\r\n  <ul>\r\n</p>'),(15,4,3,2,'<h3>Simulation of Low Earth Orbit (LEO) satellites with ns2</h3>\r\n\r\n<p>Write a script to simulate the following scenario with ns2.</p>\r\n<p>Sets up two terminals, one in Boston and one at Berkeley.Send a packet  in each second from  Berkeley to  Boston for whole day. Consider the following parameters for Iridium constellation :\r\n<center>\r\n<img class=\"diagram\" src=\"_STATIC_URL_/ant/images/exercise/ant/iridiumparameter.png\" alt=\"Iridium parameters\">\r\n</center>\r\n</p>\r\n\r\n<p>\r\n The simulation lasts for one earth rotation (86400 sec).  </p>\r\n\r\n<p>Analyze the trace file and find the following: <p>\r\n<ul>\r\n  <li>What should be the nature of Hop-count  for the packets sent from source to destination. Plot and verify this with graph</li>\r\n  <li>What should be the nature of end-to-end delay  for the packets sent from source to destination and how it is related with the plot of count</li>\r\n<ul>\r\n</p>\r\n\r\n<p>\r\n<strong>Additional challenge: </strong> If you wish to go one more step ahead, compare the end-to-end delays for scenarios when geostationary and LEO satellites are used. First, try to think logically what should be the nature of curves in the two cases. Next, verify your answer by plotting two graphs. You can use the code from exercise #1, and set the simulation time as 86400 s (time for one earth rotation).\r\n</p>\r\n<p>\r\n<strong>References:</strong>\r\nThis exercise has been set by taking inputs from the following:\r\n<ul>\r\n    <li></a>Example scripts 17.2.10 of  The <i>ns </i>manual in the ~<i>ns</i>/tcl/ex/sat-iridium.tcl</li>\r\n    <li><a href=\"\"></a>Trúchly Peter, Búran Peter.\r\n    &quot;Analysis and Comparison of LEO and MEO Satellite Networks&quot;. In <i> 49th International Symposium ELMAR-2007 </i>, 12-14 September 2007, Zadar, Croatia</li>\r\n</ul>\r\n</p>'),(17,8,3,1,'<h3>Verify the working principle of LEACH </h3>\r\n\r\n<p>\r\nThe  code in the editor below shows how to simulate LEACH protocol using MannaSim patch with ns2. A summary of the simulation settings is given below:\r\n<ul>\r\n  <li><strong>Area</strong>: 500 m X 500m  </li>\r\n  <li><strong>Duration</strong>: 550 sec</li>\r\n  <li><strong># of nodes</strong>: 11</li>\r\n  <li><strong># of clusters</strong>: 4</li>\r\n  <li><strong>New cluster formation interval</strong>: 100 sec (fixed)</li>  \r\n  <li><strong>Initial energy</strong>: 10 joules</li>\r\n  <li><strong>Disseminating interval</strong>: 10 sec</li>\r\n  <li><strong>Transmission range</strong>: 50 m</li>\r\n  <li><strong>Channel type</strong>: Wireless </li>\r\n  <li><strong>Transport protocol</strong>: UDP</li>\r\n  <li><strong>Layer</strong>: Physical</li>\r\n  <li><strong>Antenna</strong>: OmniAntenna</li>\r\n  <li><strong>Radio Propagation</strong>:TwoRayGround </strong></li>\r\n<li><strong>Sensing interval</strong>: 5 sec</li>\r\n<li><strong>Data generator type</strong>: Temperature</li>\r\n<li><strong>Sensing type</strong>: Programmed</li>\r\n</ul>\r\nThe no. of access points has been set to be 0 for our simulation and all the nodes are static.\r\n</p>\r\n\r\n<p>\r\nThe ratio <strong>P</strong> that has been referred to while describing LEACH in the theory section is obtained in our case as <strong>k/N</strong>, where <strong>k</strong> is the # of desired cluster heads, and <strong>N</strong> is the total # of nodes in the network. \r\n</p>\r\n\r\n<p>\r\n<strong>Now, answer the following and verify them from the simulation results:</strong>\r\n<ol>\r\n  <li>For the given simulation time, how many rounds of cluster formation take place?</li>\r\n  <li>What is the  number of cluster heads per round?</li> \r\n  <li>Does the average number of cluster heads per round equal the desired number of cluster heads (line #475)? (See the discussion on LEACH in Theory section)</li>\r\n  <li>Vary the number of nodes (line #474) and expected number of cluster heads (line #475), and once again verify the output</li>\r\n</ol>\r\n</p>'),(18,6,3,1,'<h3>Comparison of data rates obtained for different modulation schemes</h3>\r\n\r\n<p>\r\nThe following code simulates a WiMAX network with a base station, sink node and a mobile node. The mobile node is, however, kept static in this scenario. The sink node is connected to the base station with a wired link. An uplink transmission (line #58) of CBR data occur from the mobile (wireless) node to the sink node via the base station.\r\n</p>\r\n\r\n<p>\r\nThe objective of this exercise is to study how data rates vary with distance for different modulation technique. Following parameters could be varied to obtain different results:\r\n<ul>\r\n    <li>Modulation technique (line #57)</li>\r\n    <li>Distance of the mobile node from the base station (line #59)</li>\r\n</ul>\r\n\r\nModulation technique (line #57) takes a value from 1 to 7 with each number representing a different technique as noted below:\r\n<pre>\r\n1: OFDM_BPSK_1_2\r\n2: OFDM_QPSK_1_2\r\n3: OFDM_QPSK_3_4\r\n4: OFDM_16QAM_1_2\r\n5: OFDM_16QAM_3_4\r\n6: OFDM_64QAM_2_3\r\n7: OFDM_64QAM_3_4\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<strong>Tasks:</strong>\r\n<br>\r\n<ol>\r\n    <li>Keeping the modulation technique fixed, run the simulation for different distances (line #59) between the base station and the mobile node. Take the initial distance as 1000m, and increase upto 5000m in steps of say, 1000m.</li>\r\n    <li>Every time you run the simulation for different distances, calculate the average throughput of the sink node with ID 0.0.0. Use the \'Mixed\' mode of the Trace Analyzer for this purpose. Note down the distance and the average throughput obtained in the format &lt;distance&gt;, &lt;avg_thruput&gt;</li>\r\n    <li>Paste the collected data from all the runs, and paste in them in the Custom Plot area. Put appropriate labels and plot the data.</li>\r\n    <li>Repeat the previous steps for other modulation techniques as well.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nIn a similar way, plot the data rate vs. distance graphs for different modulation techniques in case of downlink transmission. For this purpose change \'ul\' to \'dl\' in line #58.\r\n</p>\r\n\r\n<p>\r\n<strong>NOTE:</strong> Please note that the code for WiMAX uses hierarchical address. Also, the trace file contain events both in wired and wireless (new) format. However, the next node ID in the trace file is always an integer -- even though we use hierarchical addresses. The address 1.0.1 of the mobile node translates to 4194305 (verify from the trace file). So, in case of downlink transmission, to calculate average throughput, please use node ID as 4194305.\r\n</p>'),(20,10,3,1,'<h3>Average energy consumption of nodes in ZigBee technology</h3>\r\n<p>Configure a star topology which consist of seven nodes(including coordinator) in zigbee network as shown in the figure-01: </p>\r\n<center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/zigbee/Figure1Startopology.jpeg\' /> Figure-01: Star topology</center>\r\n<p> Consider the following parameters given in the table.</p>\r\n<table><p>\r\n<table class=\"techno\">\r\n<tr>\r\n<td><b><center> Parameter </td>\r\n<td><b><center> Value </td>\r\n</tr> \r\n<tr>\r\n<td> Network topology</td>\r\n<td> Star </td>\r\n</tr>\r\n<tr>\r\n<td> Number of nodes </td>\r\n<td> 7 (including coordinator)</td>\r\n</tr>\r\n<tr>\r\n<td> Distance between nodes and coordinator</td>\r\n<td> 15 m</td>\r\n</tr>\r\n<tr>\r\n<td> Beacon order(BO)</td>\r\n<td> 6-1 0(Beacon enabled)</td>\r\n</tr>\r\n<tr>\r\n<td> Superframe order(SO) </td>\r\n<td> 0-2 (Beacon enabled)</td>\r\n</tr>\r\n<tr>\r\n<td> Initial energy </td>\r\n<td>1 joule </td>\r\n</tr>\r\n<tr>\r\n<td> Transmit power </td>\r\n<td>0.3 watt </td>\r\n</tr>\r\n<tr>\r\n<td> Receive power </td>\r\n<td>0.3 watt </td>\r\n</tr>\r\n<tr>\r\n<td> Simulation time </td>\r\n<td>100 second </td>\r\n</tr>\r\n\r\n</table>\r\n</p>\r\n<p> The objective of this exercise is to study how energy consumption vary with beacon order for different superframe order. Following tasks has to be performed to obtain different results: </p>\r\n<p>\r\n<strong>Tasks:</strong>\r\n<br>\r\n<ol>\r\n    <li>The simulation code for the above scenario is given below. </li>\r\n    <li>In line number #116  & #117 node 0 is activated  and initiated as a PAN-coordinator. </li>\r\n    <li>In the code given below( line number #117 - #123) it is given BO = 6, SO = 0 .</li>\r\n<p><pre class=\"brush: bash;\">\r\n$ns_ at 0.0 \"$node_(0) sscs startPANCoord 1 6 0\";  # startPANCoord &lt;txBeacon=1&gt; &lt;BO=6&gt; &ltSO=0&gt; \r\n$ns_ at 0.5 \"$node_(1) sscs startDevice 1 0 0 6 0\";  # startDevice &lt;isFFD=1&gt; &lt;assoPermit=1&gt; &lt;txBeacon=0&gt; &lt;BO=6&gt; &lt;SO=0&gt;\r\n$ns_ at 1.5 \"$node_(2) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 2.5 \"$node_(3) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 3.5 \"$node_(4) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 4.5 \"$node_(5) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 5.5 \"$node_(6) sscs startDevice 1 0 0 6 0\"\r\n</pre> </p>\r\n    <li>Run the simulation for 100 seconds then go to the trace file generated from this simulation.</li>\r\n<li>Initial energy of node 1, 2, 3, 4, 5 and 6 is 0.999866 (For example initial energy of node1 is 0.999866 as present in trace file “N -t 0.000640 -n 1 -e 0.999866”) </li>\r\n<li>Final energy of nodes are found from the last lines of trace file as shown below: </li>\r\n<p><pre class=\"brush: bash;\">\r\nN -t 99.346112 -n 3 -e 0.759371 \r\nN -t 99.346112 -n 6 -e 0.838787 \r\nN -t 99.346112 -n 1 -e 0.836963 \r\nN -t 99.346112 -n 4 -e 0.799610 \r\nN -t 99.346112 -n 2 -e 0.794901 \r\nN -t 99.346112 -n 5 -e 0.840717\r\n</pre></p>\r\n<li>From this we can calculate the energy consumed (Final energy - Initial energy) by node 1, 2, 3, 4, 5, 6 are 0.162903,  0.204965, 0.240495, 0.200256,  0.159149, 0.161079</li>\r\n<li>So total energy consumption of  6 nodes is (0.162903+0.204965+0.240495+0.200256+0.159149+0.161079) = 1.128847 and average energy consumption of node is 1.128847 / 6 = 0.188141167</li>\r\n<li>So at BO = 6 and SO = 0 the average energy consumption of node is 0.188141167. So note down the data (6,0.188141167) in plot custom data</li>\r\n<li>Repeat step-3 to step-9 with BO = 7, 8, 9, 10 and SO = 0</li>\r\n<li>Repeat step-3 to step-9 with BO = 6, 7, 8, 9, 10 and SO = 1, 2</li>\r\n<li>So we will get 5 X 3 = 15 sets of data</li>\r\n</ol>\r\n</p>\r\n<p>\r\n<strong>NOTE:</strong> While plotting the custom data text area contain only one set of data.\r\n</p>\r\n<!--p><strong>References:</strong>\r\nThis exercise has been set by taking inputs from the following:\r\n<ul>    \r\n    <li><a href=\"\"></a>A. Prince-Pike, J. D. Collins.\r\n    &quot;Power Characterisation of IEEE 802.15.4 and Zigbee Wireless Networks&quot;. In <i> 16thElectronics New Zealand Conference (ENZCon), Dunedin, New Zealand </i>, 18-20 November, 2009</li>\r\n    <li></a>The <i>ns </i>manual.</li>\r\n</ul>\r\n</p>'),(21,9,3,1,'<h2>Simulation of Piconets and Scatternets</h2>\r\n\r\n<p>\r\nThe following code simulates the formation of piconets and scatternets considering a number of Bluetooth enabled nodes. The code in line # 8 specifies the number of nodes used in the simulation. At the end of the simulation output, you will find some entries like:\r\n</p>\r\n\r\n<pre>\r\n-slave 25 1.000000\r\n-master 4 0.500000 0.750000 6.000000\r\n-S/S br 2 2.000000\r\n-M/S br 1 2.000000 0.500000 1.500000\r\n-br 3 2.000000\r\n-not connected 0\r\n</pre>\r\n\r\n<p>\r\nThe first line shows the number of slaves in the scatternet and the average degree of slaves, which is the ratio of the degree of the slaves to the total number of slaves. The second and third entries of the second line, respecitvely, indicates the number of master nodes and the average degree of masters. Similarly, the first number in the third and fourth lines, respectively, denotes the number of slave-slave and master-slave nodes. For further details, please look into the scat-form.cc file.\r\n</p>\r\n\r\n<p>\r\n<strong>Steps</strong>:\r\n<ol>\r\n    <li>Run the simulation</li>\r\n    <li>Count the number of master, slave-slave and master-slave nodes in the scatternet</li>\r\n    <li>Obtain the values of the following metrics: (a) Piconet density and (b) Slave degree (Refer tot he Theory section)</li>\r\n    <li>Run the simulation by varying the number of nodes in steps of 8 from 8 to 80.</li>\r\n</ol>\r\nPlot the values of the metrics for different count of the nodes.\r\n</p>');
/*!40000 ALTER TABLE `ant_exercise` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_procedure`
--

DROP TABLE IF EXISTS `ant_procedure`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_procedure` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `content` longtext,
  PRIMARY KEY (`id`),
  KEY `ant_procedure_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_2ef05cb6` FOREIGN KEY (`theory_id`) REFERENCES `ant_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_procedure`
--

LOCK TABLES `ant_procedure` WRITE;
/*!40000 ALTER TABLE `ant_procedure` DISABLE KEYS */;
INSERT INTO `ant_procedure` VALUES (1,1,'<p>\r\nIn the theory part we have learned how to work with NS2. In this section we now learn how to make your system ready so that you can work with Network Simulator 2.NS2 is a open source software. It can be downloaded from Internet and installed.</p>\r\n\r\n<p><strong>Basic Requirements:</strong><p>\r\n	<ul>\r\n        <li> A computer which is having access to the Internet</li>\r\n        <li> Minimum 512Mb RAM</li>\r\n        <li> Operating system: Linux(Ubuntu 10.04)</li>\r\n        <li> ns-2.34 package</li>\r\n        <li> gcc-4.4.3</li>\r\n        <li> make tools</li>\r\n        </ul>\r\n</p>\r\n<p>The following instructions for downloading and installing ns2 are for a system with:\r\n<ul>\r\n<li>Operating System: Linux (Ubuntu 10.04)</li>\r\n<li>ns2: 2.34</li>\r\n<li>gcc: 4.4.3</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nSome of the known problems that have been faced during installation as well as their solutions have been discussed in one of the sections below. \r\n</p>\r\n\r\n<p>The steps for installation should ideally be applicable for other version and/or configuration of Linux also. Any other problem that might arise would require further troubleshooting.\r\n</p>\r\n\r\n<h3>Downloading ns-2.34</h3>\r\n\r\n<p>To download ns2 go to <a href=\"http://www.isi.edu/nsnam/ns/ns-build.html\">The Network Simulator: Building Ns</a>. \r\nHere you can download the ns all-in-one package or you can download the packages separately. The instructions provided here\r\nare largely based on what have been mentioned in <a href=\"http://www.isi.edu/nsnam/ns/ns-build.html\">The Network Simulator: Building Ns</a>.\r\n</p>\r\n<p>Now let\'s learn how to download the packages separately.\r\n<ol>\r\n<li> First go to <a href=\"http://www.isi.edu/nsnam/ns/ns-build.html\">The Network Simulator: Building Ns</a></li>\r\n<li> Then download <strong>Tcl</strong> and <strong>Tk</strong> from <a href=\"http://www.tcl.tk/software/tcltk/downloadnow84.tml\">\r\n    http://www.tcl.tk/software/tcltk/downloadnow84.tml</a>   [<strong>Note:</strong> the versions of Tcl and Tk must be same.]</li>\r\n<li> Download <strong>OTcl</strong> from: <a href=\"http://sourceforge.net/projects/otcl-tclcl/files/OTcl/1.13/\">\r\n    http://sourceforge.net/projects/otcl-tclcl/files/OTcl/1.13/</a></li>\r\n<li> Download <strong>Tclcl</strong> from: <a href=\"http://sourceforge.net/projects/otcl-tclcl/files/TclCL/1.19/\">\r\n    http://sourceforge.net/projects/otcl-tclcl/files/TclCL/1.19/</a></li>\r\n<li> Download <strong>ns-2</strong> from: <a href=\"http://sourceforge.net/projects/nsnam/files/ns-2/2.34/\">\r\n    http://sourceforge.net/projects/nsnam/files/ns-2/2.34/</a></li>\r\n<li> Download <strong>nam</strong> from: <a href=\"http://sourceforge.net/projects/nsnam/files/nam-1/1.14/\">\r\n    http://sourceforge.net/projects/nsnam/files/nam-1/1.14/</a>  [<strong>Note:</strong> download only nam-1.14.tar.gz not ns-allinone package.]</li>\r\n<li> Download <strong>xgraph</strong> from: <a href=\"http://sourceforge.net/projects/nsnam/files/xgraph/xgraph-12.1/\">\r\n    http://sourceforge.net/projects/nsnam/files/xgraph/xgraph-12.1/</a></li>\r\n</p>\r\n\r\n<p>\r\n<strong>Note:</strong> There are some other few things to be downloaded but that depends upon your requirement. For example, if some error occurs for absence of any package, then you need to detect the error and download the required package. A good amount of troubleshooting guidance will be provided in the subsequent sections.\r\n</p>\r\n\r\n<h3>Installation</h3>\r\n\r\n<p>Following steps illustrate how to install the packages separately</p>\r\n\r\n<p> 1. All the files will be zip format -- you need to unzip all the files at first. The command to unzip the files:\r\n</p>\r\n\r\n<p>\r\n<pre class = \"brush : bash;\">\r\ntar -xzvf  &lt;file_name&gt;\r\n</pre>\r\n</p>\r\n<p>for e.g  if we want to unzip the Tcl package the type: tar -xzvf tcl8.4.19</p>\r\n\r\n<p>To unzip all the files together use the following command:\r\n\r\n<pre class = \"brush : bash;\">\r\nfor ifile in ` ls *.tar.gz`\r\ndo\r\ntar -xzvf $ifile\r\ndone\r\n</pre>\r\n</p>\r\n\r\n<p>2. Now let\'s begin with installing Tcl. The steps required are:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd tcl8.4.19    # Move inside the directory containing (unzipped) source code of Tcl\r\nls\r\ncd unix\r\n./configure\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n\r\n<p>3. Install Tk:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd tk8.4.19\r\nls\r\ncd unix\r\n./configure\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n\r\n<p>4. Install OTcl:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd otcl-1.13\r\n./configure --with-tcl=../tcl8.4.19  # Note: while configuring we need to specify the path of tcl\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n\r\n<p>5. Install Tclcl-1.19:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd tclcl-1.19\r\n./configure --with-tcl=../tcl8.4.19  # Note: while configuring we need to specify the path of tcl\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n\r\n<p>6. Install ns-2.34:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd ns-2.34\r\n./configure --with-tcl=../tcl8.4.19\r\nmake \r\nsudo make install\r\n</pre>\r\n\r\nIf the above steps complete successfully, open a terminal, and type in <strong>ns</strong>. If you see a <strong>%</strong> prompt, then, congrats, your installation was successful!\r\n</p>\r\n\r\n<p>7. Install NAM:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd nam-1.14\r\n./configure --with-tcl=../tcl8.4.19\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n\r\n<p>8. Install xgraph:\r\n\r\n<pre class = \"brush : bash;\">\r\ncd xgraph-12.1\r\n./configure\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n\r\n\r\n<h3>Probable problems that could appear while installing the packages and their solution</h3>\r\n\r\n<ol>\r\n<li>\r\n<p>\r\n<strong>While installing Tk, \'make\' fails. It generates some error message like:</strong>\r\n<pre class=\"code-message\">\r\ngcc -c -O2  -pipe  -Wall -Wno-implicit-int -fno-strict-aliasing -fPIC -I/home/tamoghna/Downloads/tk8.4.19/unix -I/home/tamoghna/Downloads/tk8.4.19/unix/../generic -I/home/tamoghna/Downloads/tk8.4.19/unix/../bitmaps -I/home/tamoghna/Downloads/tcl8.4.19/generic  -DHAVE_LIMITS_H=1 -DHAVE_UNISTD_H=1 -DPEEK_XCLOSEIM=1 -D_LARGEFILE64_SOURCE=1 -DTCL_WIDE_INT_TYPE=long\\ long -DHAVE_STRUCT_STAT64=1 -DHAVE_OPEN64=1 -DHAVE_LSEEK64=1 -DHAVE_TYPE_OFF64_T=1 -DHAVE_SYS_TIME_H=1 -DTIME_WITH_SYS_TIME=1 -DSTDC_HEADERS=1 -DHAVE_PW_GECOS=1      -DTCL_NO_DEPRECATED  -DUSE_TCL_STUBS  /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk3d.c\r\nIn file included from /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tkInt.h:21,\r\n                 from /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk3d.h:18,\r\n                 from /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk3d.c:16:\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:81:23: error: X11/Xlib.h: No such file or directory\r\nIn file included from /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tkInt.h:21,\r\n                 from /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk3d.h:18,\r\n                 from /home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk3d.c:16:\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:557: error: expected declaration specifiers or ‘...’ before ‘Window’\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:557: error: ‘Window’ declared as function returning a function\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:557: warning: parameter names (without types) in function declaration\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:560: error: expected declaration specifiers or ‘...’ before ‘XEvent’\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:569: error: expected specifier-qualifier-list before ‘Tk_ClassCreateProc’\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:663: error: expected specifier-qualifier-list before ‘Bool’\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:679: error: expected specifier-qualifier-list before ‘Bool’\r\n/home/tamoghna/Downloads/tk8.4.19/unix/../generic/tk.h:756: error: expected specifier-qualifier-list before ‘Display’\r\n...\r\n...\r\n...\r\nmake: *** [tk3d.o] Error 1\r\n</pre>\r\n</p>\r\n\r\n<p><strong>Solution:</strong></p>\r\n\r\n<p>Install the libx11-dev package. Open a terminal, and type in\r\n\r\n<pre class = \"brush : bash;\">\r\nsudo apt-get install libx11-dev\r\n</pre>\r\n</p>\r\n</li>\r\n\r\n<li>\r\n<p>\r\n<strong>Tk was installed properly but it failed to run somehow.</strong>\r\n</p>\r\n<p><strong>How to identify this:</strong></p>\r\n\r\n<p>After installing tk8.4.19 try to run the script tk8.4.19/unix/wish from the terminal. A small window will open, close it.\r\nIf no error messages appears in the terminal then Tk installation is successful and Tk is working properly.\r\nThis can also be verified after installing nam and then trying to run nam. The error message would be something like:\r\n</p>\r\n<p>\r\n<pre class=\"code-message\">\r\nnam:\r\n[code omitted because of length]\r\n: no event type or button # or keysym\r\n    while executing\r\n\"bind Listbox &lt;MouseWheel&gt; {\r\n%W yview scroll [expr {- (%D / 120) * 4}] units\r\n}\"\r\n    invoked from within\r\n\"if {[tk windowingsystem] eq \"classic\" || [tk windowingsystem] eq \"aqua\"} {\r\nbind Listbox &lt;MouseWheel&gt; {\r\n%W yview scroll [expr {- (%D)}] units\r\n}\r\nbind Li...\"\r\n</pre>\r\n</p>\r\n\r\n<p><strong>Solution:</strong></p>\r\n\r\n<p>If you get error messages then download the patch files tk-8.4.18-tkBind.patch  and tk-8.4-lastevent.patch from \r\n<a href=\"http://bugs.gentoo.org/show_bug.cgi?id=225999\">http://bugs.gentoo.org/show_bug.cgi?id=225999</a>.</p>\r\n<p>then copy those files into Tk directory.Now apply the patches by using the following command:\r\n<pre class = \"brush : bash;\">\r\n patch -p1 &lt; tk-8.4.18-tkBind.patch\r\n patch -p0 &lt; tk-8.4-lastevent.patch\r\n</pre>\r\n</p>\r\n\r\n<p>If fail to apply the patches then open the patch, check the name of the file to be patched, and make the relevant modifications to that file accordingly.\r\n</p>\r\n<p>Note: the contents of the original file are shown with a minus(-) sign at the beginning.The modified contents do begin with a plus(+) sign. The contents of the two patch files are shown below for easy reference:\r\n</p>\r\n<p>\r\n<pre class=\"brush: cpp\">\r\n--- tk8.4.18-orig/generic/tkBind.c	2006-07-21 08:26:54.000000000 +0200\r\n+++ tk8.4.18/generic/tkBind.c	2008-07-05 12:17:10.000000000 +0200\r\n@@ -586,6 +586,9 @@\r\n    /* ColormapNotify */		COLORMAP,\r\n    /* ClientMessage */		0,\r\n    /* MappingNotify */		0,\r\n+#ifdef GenericEvent\r\n+   /* GenericEvent */          0,\r\n+#endif \r\n    /* VirtualEvent */		VIRTUAL,\r\n    /* Activate */		ACTIVATE,	    \r\n    /* Deactivate */		ACTIVATE,\r\n</pre>\r\n\r\nand\r\n\r\n<pre class=\"brush: cpp\">\r\n--- generic/tk.h.orig	2008-02-06 16:31:40.000000000 +0100\r\n+++ generic/tk.h	2008-07-24 08:21:46.000000000 +0200\r\n@@ -635,17 +635,15 @@\r\n  *\r\n  *---------------------------------------------------------------------------\r\n  */\r\n-#define VirtualEvent	    (LASTEvent)\r\n-#define ActivateNotify	    (LASTEvent + 1)\r\n-#define DeactivateNotify    (LASTEvent + 2)\r\n-#define MouseWheelEvent     (LASTEvent + 3)\r\n-#define TK_LASTEVENT	    (LASTEvent + 4)\r\n+#define VirtualEvent	    (MappingNotify + 1)\r\n+#define ActivateNotify	    (MappingNotify + 2)\r\n+#define DeactivateNotify    (MappingNotify + 3)\r\n+#define MouseWheelEvent     (MappingNotify + 4)\r\n+#define TK_LASTEVENT	    (MappingNotify + 5)\r\n \r\n #define MouseWheelMask	    (1L &lt;&lt; 28)\r\n-\r\n #define ActivateMask	    (1L &lt; 29)\r\n #define VirtualEventMask    (1L &lt; 30)\r\n-#define TK_LASTEVENT	    (LASTEvent + 4)\r\n \r\n \r\n /*\r\n</pre>\r\n\r\n<p>After this install Tk from beginning again and also verify whether \'wish\' runs properly (as indicated above).</p>\r\n</li>\r\n\r\n<li>\r\n<p><strong>Problem while running \'make\' for OTcl</strong></p>\r\n<p>\r\n<pre class=\"code-message\">\r\notcl.o: In function `OTclDispatch\':\r\n/home/tanay/Desktop/ns2/otcl-1.13/otcl.c:495: undefined reference to `__stack_chk_fail_local\'\r\notcl.o: In function `Otcl_Init\':\r\n/home/tanay/Desktop/ns2/otcl-1.13/otcl.c:2284: undefined reference to `__stack_chk_fail_local\'\r\nld: libotcl.so: hidden symbol `__stack_chk_fail_local\' isn\'t defined\r\nld: final link failed: Nonrepresentable section on output\r\nmake: *** [libotcl.so] Error 1\r\n</pre>\r\n</p>\r\n\r\n</p><strong>Solution:</strong></p>\r\n\r\n<p>1.goto the \'configure\' file</p>\r\n<p>2.In line no. 5516</p>\r\n<p><pre class=\"code-message\">SHLIB_LD=\"ld -shared\"</pre></p>\r\n<p>change the above to</p>\r\n<p><pre class=\"code-message\">SHLIB_LD=\"gcc -shared\"</pre></p>\r\n\r\n<p>Now reapeat the installation process starting from \'./configure\'. For further information you can go to \r\n<a href=\"http://nsnam.isi.edu/nsnam/index.php/User_Information\">http://nsnam.isi.edu/nsnam/index.php/User_Information</a></p>\r\n</li>\r\n\r\n<li>\r\n<p><strong>Problem wile running \' sudo make install\' for ns-2.34</strong></p>\r\n<p>\r\n<pre class=\"code-message\">\r\nns: error while loading shared libraries: libotcl.so: cannot open shared object file: No such file or directory\r\n</pre>\r\n</p>\r\n\r\n<p><strong>Solution:</strong></p>\r\n\r\n<p>We need to set the following environment variables, and store them in the ~/.bashrc file.\r\n<pre class = \"brush : bash;\">\r\nOTCL_LIB=/your/path/ns2_packages/otcl-1.13\r\nNS2_LIB=/your/path/ns2_packages/ns-2.34/lib\r\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OTCL_LIB:$NS2_LIB\r\n</pre>\r\nNow open a new terminal, and type ns. This should now work without any error.\r\n</p>\r\n</li>\r\n\r\n<li>\r\n<p><strong>Problem while running \'make\' for nam</strong></p>\r\n<pre class=\"code-message\">\r\nrm -f tkcompat.o; gcc -o tkcompat.o -c -Wall -Wno-write-strings -DTCL_TK -DNO_VOID  -DNDEBUG -DUSE_SHM\r\n-DHAVE_LIBTCLCL -DHAVE_TCLCL_H -DHAVE_LIBOTCL1_13 -DHAVE_OTCL_H -DHAVE_LIBTK8_4 -DHAVE_TK_H -DHAVE_LIBTCL8_4 -DHAVE_TCLINT_H -DHAVE_TCL_H  -I. -I/home/bibudhendu/Desktop/ns2/tclcl-1.19 -I/home/bibudhendu/Desktop/ns2/otcl-1.13 -I/usr/local/include -I/home/bibudhendu/Desktop/ns2/tcl8.4.19/generic -I/home/bibudhendu/Desktop/ns2/tcl8.4.19/generic  tkcompat.c\r\n\r\nrm -f tkUnixInit.o; gcc -o tkUnixInit.o -c -Wall -Wno-write-strings -DTCL_TK -DNO_VOID  -DNDEBUG -DUSE_SHM -DHAVE_LIBTCLCL -DHAVE_TCLCL_H -DHAVE_LIBOTCL1_13 -DHAVE_OTCL_H -DHAVE_LIBTK8_4 -DHAVE_TK_H -DHAVE_LIBTCL8_4 -DHAVE_TCLINT_H -DHAVE_TCL_H  -I. -I/home/bibudhendu/Desktop/ns2/tclcl-1.19 -I/home/bibudhendu/Desktop/ns2/otcl-1.13 -I/usr/local/include -I/home/bibudhendu/Desktop/ns2/tcl8.4.19/generic -I/home/bibudhendu/Desktop/ns2/tcl8.4.19/generic  tkUnixInit.c\r\n\r\nrm -f xwd.o; gcc -o xwd.o -c -Wall -Wno-write-strings -DTCL_TK -DNO_VOID  -DNDEBUG -DUSE_SHM -DHAVE_LIBTCLCL -DHAVE_TCLCL_H -DHAVE_LIBOTCL1_13 -DHAVE_OTCL_H -DHAVE_LIBTK8_4 -DHAVE_TK_H -DHAVE_LIBTCL8_4 -DHAVE_TCLINT_H -DHAVE_TCL_H  -I. -I/home/bibudhendu/Desktop/ns2/tclcl-1.19 -I/home/bibudhendu/Desktop/ns2/otcl-1.13 -I/usr/local/include -I/home/bibudhendu/Desktop/ns2/tcl8.4.19/generic -I/home/bibudhendu/Desktop/ns2/tcl8.4.19/generic  xwd.c\r\n\r\nxwd.c:87:29: error: X11/Xmu/WinUtil.h: No such file or directory\r\nmake: *** [xwd.o] Error 1\r\n</pre>\r\n\r\n<p><strong>Solution:</strong></p>\r\n\r\n<p>Install the package <strong>libxmu-dev</strong>. Then run \r\n<pre class=\"brush: bash\">\r\n./configure\r\nmake clean\r\nmake\r\nsudo make install\r\n</pre>\r\n</p>\r\n</li>\r\n\r\n<li>\r\n<p><strong>Problem while running \'make\' for xgraph</strong></p>\r\n<p>\r\n<pre class=\"code-message\">\r\n/usr/include/stdio.h:651: note: expected ‘size_t * __restrict__’ but argument is of type ‘char *’\r\ndialog.c:780: error: too few arguments to function ‘getline’\r\ndialog.c: In function ‘getline’:\r\ndialog.c:899: error: argument ‘lptr’ doesn’t match prototype\r\n/usr/include/stdio.h:651: error: prototype declaration\r\ndialog.c:899: error: number of arguments doesn’t match prototype\r\n/usr/include/stdio.h:651: error: prototype declaration\r\nmake: *** [dialog.o] Error 1\r\n</pre>\r\n</p>\r\n\r\n<p><strong>Solution:</strong></p>\r\n\r\n<p>Download the patch below-</p>\r\n<p><a href=\"http://archive.ubuntu.com/ubuntu/pool/universe/x/xgraph/xgraph_12.1-12.diff.gz\">\r\nhttp://archive.ubuntu.com/ubuntu/pool/universe/x/xgraph/xgraph_12.1-12.diff.gz</a></p>\r\n\r\n<p>Note: copy and unzip the above patch file into xgraph-12.1\r\n\r\n<pre class = \"brush : bash;\">\r\npatch &lt; xgraph_12.1-12.diff\r\n</pre>\r\nAfter applying the patch if you see in get any problem with the configure.in file like<br>\r\n<pre class=\"code-message\">\r\nconfigure.in:3: version mismatch.  This is Automake 1.11,\r\nconfigure.in:3: but the definition used by this AM_INIT_AUTOMAKE\r\nconfigure.in:3: comes from Automake 1.11.1.  You should recreate\r\nconfigure.in:3: aclocal.m4 with aclocal and run automake again.\r\n</pre>\r\n\r\nthen goto configure.in file and add \'AC_LOCAL\' in the first line.\r\n</p>\r\n</li>\r\n</ol>\r\n\r\n<div id=\"note\" class=\"note\">\r\n<p>\r\nThe above is an attempt to list frequent problems faced while trying to\r\ninstall ns2. This list is by no means exhaustive. In the worst case, you\r\nmight require to do a bit of troubleshooting by yourself, which, in most\r\ncases, would be installing certain missing packages.\r\n</p>\r\n<p>\r\nYou can also look at the following places for further help:\r\n<ul>\r\n  <li><a href=\"http://nsnam.isi.edu/nsnam/index.php/Installing_ns2.31_on_Ubuntu7.04\">Installing ns2.31 on Ubuntu7.04</a></li>\r\n  <li><a href=\"http://nsnam.isi.edu/nsnam/index.php/Distribution_Specific_instructions\">Distribution Specific instructions</a></li> \r\n</ul>\r\n</p>\r\n</div>'),(2,3,'<ol>\r\n    <li>Create the topology as shown in the exercises</li>\r\n    <li>Set up the traffic flows</li>\r\n    <li>Run the simulation</li>\r\n    <li>Take measurements from by analyzing the trace file</li>\r\n    <li>Alter the parameter(s) specified in the experiment, run the simulation\r\n    and take the measurements again</li>\r\n    <li>Repeat the above step until desired result is obtained</li>\r\n</ol>'),(3,2,'<ol>\r\n    <li>Create the nodes</li>\r\n    <li>Set up a LAN using the desired nodes</li>\r\n    <li>Create agents and attach them to the nodes</li>\r\n    <li>Create applications and attach them to the agents</li>\r\n    <li>Define a finish procedure</li>\r\n    <li>Run the simulation</li>\r\n    <li>After the simulation has run successfully and the trace file is\r\n    generated, analyze the trace file with the tool provided at the bottom\r\n    of the exercise page</li>\r\n</ol>'),(4,7,'<ol>\r\n<li>The problem statement is presented on the \'Exercises\' page, which you have to simulate with ns2.</li>\r\n<li>Provide the information for different types of layers such as: channel, radio-propagation model, network interface, MAC, interface queue type, link layer, antenna, topography, Max packet in ifq, routing protocol used, number of mobilenodes used, simulation time etc. </li>\r\n<pre class=\"brush: bash;\">\r\nset val(chan) Channel/WirelessChannel; # Channel type \r\nset val(prop) Propagation/TwoRayGround; # Radio-propagation model \r\nset val(netif) Phy/WirelessPhy; # Network interface type \r\nset val(mac) Mac/802_11; # MAC type \r\nset val(ifq) CMUPriQueue; # Interface queue type \r\nset val(ll) LL; # Link layer type \r\nset val(ant) Antenna/OmniAntenna; # Antenna type \r\nset val(x) 600; # X dimension of the topography \r\nset val(y) 500; # Y dimension of the topography \r\nset val(ifqlen) 50; # Max packet in ifq \r\nset val(rp) DSDV; # Ad-hoc routing protocol \r\nset val(nn) 3; # Number of mobilenodes \r\nset val(stop) 150.0; # simulation time </pre>\r\n<li>Define global variables for creating simulator trace file objects as required:</li> <p> Described in previous experiments.</p>\r\n<li>Create General Operation Director(GOD) such as:</li><pre class=\"brush: bash;\">set god_ [create-god $val(nn)]</pre>\r\n<p>GOD stores smallest number of hops from one node to another node. This is autometically generated by scenario file.</p>\r\n<li>Configure different options for a mobile node to be created:</li><pre class=\"brush: bash;\">$ns_ node-config -adhocRouting $val(rp) \\ \r\n-llType $val(ll) \\ \r\n-macType $val(mac) \\ \r\n-ifqType $val(ifq) \\ \r\n-ifqLen $val(ifqlen) \\ \r\n-antType $val(ant) \\ \r\n-propType $val(prop) \\ \r\n-phyType $val(netif) \\ \r\n-channelType $val(chan) \\ \r\n-topoInstance $topo \\ \r\n-agentTrace ON \\ \r\n-routerTrace ON \\ \r\n-macTrace OFF \\\r\n-movementTrace OFF</pre>\r\n<p>The four last option in node configuration can either be ON or OFF based on the condition of the mobile nodes. The agent trace will give the trace of TCP, routerTrace provides tracing of packets used in routing, macTrace is used to trace MAC protocol packets and movementTrace is used to allow tracing the motion of nodes for nam.</p>\r\n<li>Create mobile nodes</li><pre class=\"brush: bash;\">set node(0) [$ns node]</pre>\r\n<li>Generate topology</li>\r\n<li>Assign trafic pattern for the network</li>\r\n<li>Define a finish procedure</li>\r\n<li>Set the start and stop time for the simulator</li>\r\n<p><strong>Following is the sample code to create a network with two mobile nodes</strong></p>\r\n<pre class=\"brush: bash;\">\r\n# Create a new simulator object.\r\nset ns [new Simulator]\r\n\r\n# ----- Setup wireless environment. ----\r\nset wireless_tracefile [open mobile-nodes-2.tr w]\r\nset topography [new Topography]\r\n$ns trace-all $wireless_tracefile\r\n$ns namtrace-all-wireless $namfile 700 700\r\n$topography load_flatgrid 700 700\r\n\r\n#\r\n# Create God\r\n#\r\nset god_ [create-god 2]\r\n\r\n#global node setting\r\n$ns node-config -adhocRouting DSR \\\r\n                 -llType LL \\\r\n                 -macType Mac/802_11 \\\r\n                 -ifqType CMUPriQueue \\\r\n                 -ifqLen 50 \\\r\n                 -antType Antenna/OmniAntenna \\\r\n                 -propType Propagation/TwoRayGround \\\r\n                 -phyType Phy/WirelessPhy \\\r\n                 -channel [new Channel/WirelessChannel] \\\r\n                 -topoInstance $topography \\\r\n                 -agentTrace ON \\\r\n                 -routerTrace OFF \\\r\n                 -macTrace ON\r\n\r\n# Create wireless nodes\r\nset node(0) [$ns node]\r\n$node(0) set X_ 150\r\n$node(0) set Y_ 300\r\n$node(0) set Z_ 0.0\r\n$node(0) color \"black\"\r\n$ns initial_node_pos $node(0) 30.000000\r\n\r\nset node(1) [$ns node]\r\n$node(1) set X_ 300\r\n$node(1) set Y_ 500\r\n$node(1) set Z_ 0.0\r\n$node(1) color \"black\"\r\n$ns initial_node_pos $node(1) 30.000000\r\n\r\n# Node movement patterns\r\n$ns at 4.0 \"$node(1) setdest 300.0 500.0 5.0\"\r\n$ns at 4.0 \"$god_ set-dist 0 1 1\"\r\n\r\n# Create links between nodes.\r\nfor {set i 0} {$i < $val(nn)}{incr i}\r\n {\r\n    set node_($i) [$ns_node]\r\n    $node_($i) random-motion 0;\r\n }\r\n\r\n# Create agents.\r\nset tcp [new Agent/TCP]\r\n$tcp set class_ 2\r\nset sink [new Agent/TCPSink]\r\n$ns attach-agent $node(0) $tcp\r\n$ns attach-agent $node(1) $sink\r\n$ns connect $tcp $sink\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n$ns at 3.0 \"$ftp start\" \r\n\r\n\r\n#\r\n# Tell nodes when the simulation ends\r\n#\r\n$ns at 10.000000 \"$node(0) reset\";\r\n$ns at 10.000000 \"$node(1) reset\";\r\n\r\n# Connect agents.\r\n# Run the simulation\r\nproc finish {} {\r\n	global ns \r\n	$ns flush-trace\r\n	exit 0\r\n}\r\n\r\n$ns at 10.000000 \"finish\"\r\n$ns run\r\n</pre>\r\n'),(5,5,'<p>\r\nCreate two nodes: an access point (AP) and a base station (BS). The BS will sends message to the AP, also the AP will sends a response back to the base station. Since the medium of communication is wireless (over air), the BS could send (or receive) messages to (or from) the AP only when ir is within a certain distance from the AP.\r\n</p>\r\n\r\n\r\n<ol>\r\n    <li>Create the nodes and hold them in a container:\r\n    <pre class=\"brush: cpp;\">\r\nNodeContainer wifiStaNodes, wifiApNode;      \r\nwifiStaNodes.Create (nWifi);\r\nwifiApNode = wifiStaNodes.Get (0);\r\n    </pre>\r\n    </li>\r\n\r\n    <li>Create channel for communication:\r\n    <pre class=\"brush: cpp;\">\r\nYansWifiChannelHelper channel = YansWifiChannelHelper::Default ();\r\nYansWifiPhyHelper phy = YansWifiPhyHelper::Default ();\r\nphy.SetChannel (channel.Create ());\r\nWifiHelper wifi = WifiHelper::Default ();\r\nwifi.SetRemoteStationManager (\"ns3::AarfWifiManager\");\r\nNqosWifiMacHelper mac = NqosWifiMacHelper::Default ();\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Set up MAC for base station:\r\n    <pre class=\"brush: cpp;\">\r\nSsid ssid = Ssid (\"ns-3-ssid\");\r\nmac.SetType (\"ns3::StaWifiMac\",\r\n    \"Ssid\", SsidValue (ssid),\r\n    \"ActiveProbing\", BooleanValue (false));\r\nNetDeviceContainer staDevices; \r\nstaDevices = wifi.Install (phy, mac, wifiStaNodes.Get (1));\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Set up MAC for AP:\r\n    <pre class=\"brush: cpp;\">\r\nmac.SetType (\"ns3::ApWifiMac\",\r\n    \"Ssid\", SsidValue (ssid),\r\n    \"BeaconGeneration\", \r\n    BooleanValue (true),         \r\n    \"BeaconInterval\", \r\n    TimeValue (Seconds (5)));\r\nNetDeviceContainer apDevice;\r\napDevice = wifi.Install (phy, mac, wifiApNode);\r\n    </pre>\r\n    </li>\r\n\r\n    <li>Set mobility of the nodes:\r\n    <pre class=\"brush: cpp;\">\r\nMobilityHelper mobility;\r\nmobility.SetPositionAllocator (\"ns3::GridPositionAllocator\",\r\n    \"MinX\", DoubleValue (0.0),\r\n    \"MinY\", DoubleValue (0.0),\r\n    \"DeltaX\", DoubleValue (xDistance),\r\n    \"DeltaY\", DoubleValue (10.0),\r\n    \"GridWidth\", UintegerValue (3),\r\n    \"LayoutType\", StringValue \"RowFirst\"));                        \r\nmobility.SetMobilityModel (\"ns3::ConstantPositionMobilityModel\");\r\nmobility.Install (wifiStaNodes);\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Add Internet layers stack:\r\n    <pre class=\"brush: cpp;\">\r\nInternetStackHelper stack; \r\nstack.Install (wifiStaNodes);\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Assign IP address to each device:\r\n    <pre class=\"brush: cpp;\">\r\nIpv4AddressHelper address; \r\nIpv4InterfaceContainer wifiInterfaces, wifiApInterface;               \r\naddress.SetBase \"10.1.1.0\", \"255.255.255.0\");    \r\nwifiApInterface = address.Assign (apDevice);\r\nwifiInterfaces = address.Assign (staDevices);\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Create and setup applications (traffic sink):\r\n    <pre class=\"brush: cpp;\">\r\nUdpEchoServerHelper echoServer (9);     // Port # 9\r\nApplicationContainer serverApps = echoServer.Install (wifiApNode); \r\nserverApps.Start (Seconds (1.0));\r\nserverApps.Stop (Seconds (4.0));\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Create and setup applications (traffic source):\r\n    <pre class=\"brush: cpp;\">\r\nUdpEchoClientHelper echoClient (wifiApInterface.GetAddress (0), 9);\r\nechoClient.SetAttribute (\"MaxPackets\", UintegerValue (1));\r\nechoClient.SetAttribute (\"Interval\", TimeValue (Seconds (1.)));\r\nechoClient.SetAttribute (\"PacketSize\", UintegerValue (1024));\r\nApplicationContainer clientApps = echoClient.Install (wifiStaNodes.Get (1));     \r\nclientApps.Start (Seconds (2.0));\r\nclientApps.Stop (Seconds (3.0));\r\nIpv4GlobalRoutingHelper::PopulateRoutingTables ();\r\nSimulator::Stop (Seconds (4.0));\r\n    </pre>\r\n    </li>\r\n    \r\n    <li>Now, verify the distance between two nodes and check for which values of Xdistance you get the reply back from the server.</li>\r\n\r\n    <li>For exercise #2, you need to check the number of packet re-transmission that occur in the network. This can be found by counting number of lines that appear in the output. </li>\r\n\r\n</ol>\r\n'),(6,8,'<ol>\r\n    <li>Make necessary changes in the code</li>\r\n    <li>The output is displaying the cluster head with the node # and the time like: <pre class=\"brush: bash;\">Node 10 is a cluster head at time 0.203612</pre></li>\r\n<li>We are filtering the output with this output string</li>\r\n<li>Paste the line in the space given for filtering</li>\r\n<li>It will display only the lines containing in the previous step</li>\r\n</ol>\r\n</p>\r\n<p>\r\n<strong>NOTE: </strong> Analysis of trace file for Wireless Sensor Networks is currently not supported</p>\r\n\r\n</ol>'),(7,4,'<ol>\r\n<li> The problem statement is presented on the \'Exercises\' page, which you have to simulate with ns2. </li>\r\n<li> Set the global configuration parameter for satellite terminals.</li>\r\n<pre class=\"brush: bash;\"> global opt\r\nset opt(chan)           Channel/Sat\r\nset opt(bw_up)		2Mb\r\nset opt(bw_down)	2Mb\r\nset opt(phy)            Phy/Sat\r\nset opt(mac)            Mac/Sat\r\nset opt(ifq)            Queue/DropTail\r\nset opt(qlim)		50\r\nset opt(ll)             LL/Sat\r\nset opt(wiredRouting)   OFF\r\n</pre><p>\r\n<li> For exercise#1, find the position of geostationary satellite node and satellite terminals. </li>\r\n<p> The INSAT-3A is positioned at 93.5 degrees longitude East. In our simulation we used two terminals one in Bangkok and one in Baghdad . The longitude and latitude of Bangkok is 13 degree north and 100 degree east and Baghdad is 33 degree north and 44 degree east.</p>\r\n<li> Configure the geostationary satellite node for bent-pipe satellite and  set the position of INSAT-3A at 93.5 degrees longitude East.</li><pre class=\"brush: bash;\">\r\n$ns node-config -satNodeType geo-repeater \\\r\n		-phyType Phy/Repeater \\\r\n		-channelType $opt(chan) \\\r\n		-downlinkBW $opt(bw_down)  \\\r\n		-wiredRouting $opt(wiredRouting)\r\n\r\n# GEO satellite at 93.5 degrees longitude East\r\nset n1 [$ns node]\r\n$n1 set-position 93.5</pre><p>\r\n<li> Configure the node generator for terminal nodes and set the position of Bangkok and Baghdad.</li>\r\n<pre class=\"brush: bash;\">\r\n# Configure the node generator for satellite terminals\r\n$ns node-config -satNodeType terminal \\\r\n                -llType $opt(ll) \\\r\n                -ifqType $opt(ifq) \\\r\n                -ifqLen $opt(qlim) \\\r\n                -macType $opt(mac) \\\r\n                -phyType $opt(phy) \\\r\n                -channelType $opt(chan) \\\r\n                -downlinkBW $opt(bw_down) \\\r\n                -wiredRouting $opt(wiredRouting)\r\n\r\n# Two terminals: one in Bangkok and one in Baghdad\r\nset n2 [$ns node]\r\n$n2 set-position 13.9 100.9; # BK\r\nset n3 [$ns node]\r\n$n3 set-position 33.8 44.4; # BD\r\n</pre><p>\r\n<li> Add GSL(Ground to Satellite Link) to Bangkok and Baghdad. </li>\r\n<pre class=\"brush: bash;\">\r\n$n2 add-gsl geo $opt(ll) $opt(ifq) $opt(qlim) $opt(mac) $opt(bw_up) \\\r\n    $opt(phy) [$n1 set downlink_] [$n1 set uplink_]\r\n$n3 add-gsl geo $opt(ll) $opt(ifq) $opt(qlim) $opt(mac) $opt(bw_up) \\\r\n    $opt(phy) [$n1 set downlink_] [$n1 set uplink_]</pre></p>\r\n<li> Trace all satellite links.</li>\r\n<li> Set up the UDP connection(s), a FTP source and a CBR stream that will run over it </li>\r\n<li> Set centralizing routing for all nodes to compute new routes and use the routes to build a forwarding table on each node.</li><pre class=\"brush: bash;\">\r\n# We use centralized routing\r\nset satrouteobject_ [new SatRouteObject]\r\n$satrouteobject_ compute_routes</pre></p>\r\n<li>  Schedule the different events like simulation start and stop, data transmission start and stop. </li>\r\n<li>  Call the finish procedure and mention the time when your simulation will end.</li>\r\n<li>  Find out the average delay for this process using the tool trace file analysis.  For satellite use wired simulation model as  first 12 fields of satellite trace format are similar to conventional ns tracing. </li>\r\n<li> For exercise #2, follow the following instructions written below:</li>\r\n<li>  Set global configuration parameters  for leo satellite networks.</li><pre class=\"brush: bash;\">\r\nHandoffManager/Term set elevation_mask_ 8.2\r\nHandoffManager/Term set term_handoff_int_ 10\r\nHandoffManager/Sat set sat_handoff_int_ 10\r\nHandoffManager/Sat set latitude_threshold_ 60 \r\nHandoffManager/Sat set longitude_threshold_ 10 \r\nHandoffManager set handoff_randomization_ true\r\n</pre></p>\r\n<li> The Iridium satellite constellation consists of 66 (n0 – n65) operational satellites which are organized into six orbital planes. The satellites are in near-polar orbits at an altitude of 780 km above the earth. Each satellite is cross-linked to four other satellites — two in the same orbital plane and two others in adjacent planes. </li>\r\n<li>  Iridium satellites are organized into six orbital planes. Each plane have 11 satellites. Set position of 11 satellites in plane-1(n0 - n10), then next 11 satellites in plane-2(n11- n21), and so on for 6 planes. Set position of these satellites on six planes.</li>\r\n<li> Intraplane  ISLs exists in its own plane.Set intraplane ISLs for each nodes with its neighboring nodes in its own plane.</li>\r\n<li> Interplane  ISLs exists between satellites of neighboring co-rotating planes.Set inetplane ISLs for each nodes with its neighboring nodes in its neighboring planes.</li>\r\n<li>  Set up terrestrial nodes one in Berkeley another at Boston and add GSL(Ground to Satellite Link) to of them.</li>\r\n<li>  Then follow step-7 to step-11 as written above.</li>\r\n<li> Find out end-to-end delays and number of hop versus packet sequence number between Berkeley and Boston using the tool trace file analysis (use wired simulation model).</li>\r\n'),(8,6,' For this experiment you have to follow the following steps:\r\n<ol>\r\n<li>After simulation is over go to the trace file analysis part and select simulation mode as \'Mixed\'\r\n<li>Click on Average Throughput.\r\n<li>Give the value of node as 0.0.0 for sink node.\r\n<li>Keep copy of throughput value for different distance separately.\r\n<li>Paste the set of values which were kept separately in custom plot area, separate the distance and throughput by comma.\r\n<br>e.g. If the distance is 1000,2000 and so on and the corresponding throughput is 630,635 and so on, then it should be written in custom plot area as,\r\n<br>1000,630\r\n<br>2000,635\r\n<li>For second plot clear the custom plot area and give the another set of values.\r\n<li>Give different label name and click on plot to plot the graph.\r\n<li>Repeat the steps for different modulation scheme and for different distances.\r\n</ol>\r\n'),(9,9,'<ol>\r\n    <li>The problem statement is presented in the \'Exercises\' page, which you have to simulate with NS2.</li>\r\n    <li>Simulate the code given in the \'Exercise\' page and find out the no. of formation of Piconet and Scatternet.</li>\r\n    <li>Set the global configuration parameters for Bluetooth network.</li>\r\n    <li>Configure the nodes:</li>\r\n    \r\n<pre class=\"brush: bash;\">\r\n$ns node-config -macType Mac/BNEP\r\nset btRouting AODV \r\nset val(nn)     32\r\n\r\nset P 0.5	;# 0.3333 ~ 0.6667\r\nset K 7\r\nset delta 5\r\nset lastRoundTries 6\r\n\r\nset trafficStartTime 90\r\nset collisionRng 22.4	;# set to 0 to turn collision off.\r\nset rpAlgo	DRP\r\nset tsniff	256\r\nset seed 1634\r\nset tracePageScan off\r\n</pre>\r\n    \r\n    <li>The following line of code shows the number of nodes in the network:</li>\r\n<pre class=\"brush: bash;\">\r\nset val(nn)     32\r\n</pre>\r\n\r\n\r\n<li>Run the simulation by varying the number of nodes</li>\r\n<li>After the simulation of the code is over, scroll its output, and go to the end. There you can find information on the number of master, slave, master-slave and slave-slave nodes in the network. Note down these values -- for each value of the total number of nodes -- in a text file.</li>\r\n<li>Compute the piconet density and slave degree from the above obtained values.</li>\r\n\r\n<ol>\r\n\r\n<div class=\"note\">\r\nThe UCBT Bluetooth extension for NS-2, which we have used here, generates a lot of informative messages when a simulation is executed. To preserve bandwith, and reduce the delay, over the Web, we have disabled most of such messages.\r\n</div>'),(10,10,'<ol>\r\n<li> The problem statement is presented on the \'Exercises\' page, which you have to simulate with ns2. </li>\r\n<li> Set the global configuration parameter.</li>\r\n<li>Set application time for different traffic movement as shown below: </li>\r\n<pre class=\"brush: bash;\">\r\nset appTime1            7.0 ;# in seconds</pre><p>\r\n<li>Create an instance of simulator for required simulation and generate a trace file for the analysis of simulation. </li>\r\n<li>Run simulation in verbose mode as shown below: </li>\r\n<pre class=\"brush: bash;\">\r\nMac/802_15_4 wpanCmd verbose on</pre><p>\r\n<li>Set   carrier sensing threshold and  reception threshold as shown below: </li>\r\n<pre class=\"brush: bash;\">\r\nset dist(15m) 8.54570e-07\r\nPhy/WirelessPhy set CSThresh_ $dist(15m)\r\nPhy/WirelessPhy set RXThresh_ $dist(15m)</pre><p>\r\n<p>If the received signal strength is greater than RXThresh_  threshold, the packet can be successfully received.If received signal strength is greater than CSThresh_ threshold, the packet transmission can be sensed.  </p>\r\n<li>Set the topography object by defining the grid on x and y axix.</li>\r\n<li>Create God and channel. </li>\r\n<li>Configure the node by including  routing protocol , link layer, ifq , MAC layer,energy model, initial energy etc. as shown below: </li>\r\n<pre class=\"brush: bash;\">\r\n$ns_ node-config -adhocRouting $val(rp) \\\r\n        -llType $val(ll) \\\r\n        -macType $val(mac) \\\r\n        -ifqType $val(ifq) \\\r\n        -ifqLen $val(ifqlen) \\\r\n        -antType $val(ant) \\\r\n        -propType $val(prop) \\\r\n        -phyType $val(netif) \\\r\n        -topoInstance $topo \\\r\n        -agentTrace OFF \\\r\n        -routerTrace OFF \\\r\n        -macTrace ON \\\r\n                -movementTrace OFF \\\r\n                -energyModel \"EnergyModel\" \\\r\n                -initialEnergy 1 \\\r\n                -rxPower 0.3 \\\r\n                -txPower 0.3 \\\r\n                -channel $chan_1_ </pre><p>\r\n\r\n<li>The node position are defined by x,y and z coordinates as follows:  </li>\r\n<pre class=\"brush: bash;\">\r\n$node_(0) set X_ 25\r\n$node_(0) set Y_ 25\r\n$node_(0) set Z_ 0</pre><p>\r\n<li>Start a new PAN coordinator and activate it as a PAN coordinator as shown below:  </li>\r\n<pre class=\"brush: bash;\">\r\n$ns_ at 0.0 \"$node_(0) NodeLabel PAN Coor\"\r\n$ns_ at 0.0 \"$node_(0) sscs startPANCoord 1 6 0\"        ;# startPANCoord &lt;txBeacon&gt; &lt;BO&gt; &lt;SO&gt; </pre><p>\r\n<li>Similarly set up and start device as shown below for different nodes:  </li>\r\n<pre class=\"brush: bash;\">\r\n$ns_ at 0.5 \"$node_(1) sscs startDevice 1 0 0 6 0\"  ;# startDevice &lt;FFD&gt; &lt;assoPermit&gt; &lt;txBeacon&gt; &lt;BO&gt; &lt;SO&gt;\r\n$ns_ at 1.5 \"$node_(2) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 2.5 \"$node_(3) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 3.5 \"$node_(4) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 4.5 \"$node_(5) sscs startDevice 1 0 0 6 0\"\r\n$ns_ at 5.5 \"$node_(6) sscs startDevice 1 0 0 6 0\"</pre><p>\r\n<li>Assign traffic pattern for the network. </li>\r\n<li>Define a finish procedure.  </li>\r\n<li>Set the start and stop time for the simulator </li>\r\n<li>Check the trace file and find the average energy consumption of nodes excluding coordinator.(See the exercise for calculating the average energy consumption of each node.) for beacon order(BO)= 6,7,8,9,10 and superframe order(SO)=0,1,2. </li>\r\n<li>Plot the data for average energy consumption by taking beacon order in x-axis and average energy in y-axis for SO=0,1,2 . </li>\r\n</ol>\r\n');
/*!40000 ALTER TABLE `ant_procedure` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_reference`
--

DROP TABLE IF EXISTS `ant_reference`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_reference` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `url` varchar(200) DEFAULT NULL,
  `url_desc` longtext,
  `book_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `ant_reference_453a65b7` (`theory_id`),
  KEY `ant_reference_752eb95b` (`book_id`),
  CONSTRAINT `book_id_refs_id_1f7ad70c` FOREIGN KEY (`book_id`) REFERENCES `ant_book` (`id`),
  CONSTRAINT `theory_id_refs_id_18465e52` FOREIGN KEY (`theory_id`) REFERENCES `ant_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_reference`
--

LOCK TABLES `ant_reference` WRITE;
/*!40000 ALTER TABLE `ant_reference` DISABLE KEYS */;
INSERT INTO `ant_reference` VALUES (1,1,'http://www.isi.edu/nsnam/ns/tutorial','Marc Greis tutorial',NULL),(2,1,'http://www.isi.edu/nsnam/ns/ns-documentation.html','The NS Manual',NULL),(3,1,'http://nile.wpi.edu/NS/','NS by Example',NULL),(4,3,'http://www.cs.ucl.ac.uk/staff/a.greenhalgh/teaching/msctelecomsns/MScTelecomsNS2005.pdf.','Introduction to NS by Adam Greenhalgh',NULL),(5,3,'http://hpds.ee.ncku.edu.tw/~smallko/ns2/tool_en.htm','How to measure packet loss rate, jitter, and end-to-end delay for UDP-based applications?',NULL),(6,2,'http://www.isi.edu/nsnam/ns/ns-documentation.html','The NS Manual',NULL),(7,2,'http://www.isi.edu/nsnam/ns/tutorial','Marc Greis Tutorial',NULL),(8,2,'','',1),(9,2,'','',2),(10,3,'http://www.eurojournals.com/ejsr_37_3_11.pdf','Ikram Ud din and Saeed Mahfooz. \"Performance Evaluation of Different Ethernet LANs Connected by Switches and Hubs\",\r\nEuropean Journal of Scientific Research.Vol 37 No.3(2009),pp.461-470',NULL),(11,3,'http://web.cs.wpi.edu/~rek/PerformanceMeasurement.ppt.','\"Performance Evaluation of Computer Networks\", Prof. Bob Kinicki, Computer Science Department, Worcester Polytechnic Institute (WPI)',NULL),(12,3,'','',2),(13,2,'http://www.google.com/','Lecture Notes 2003-2004 Univ. de Los andes, Merida, Venezuela, and ESSI, “NS simulator for beginners”',NULL),(14,2,'http://en.wikipedia.org/wiki/Local_area_network','Local Area Networks',NULL),(15,1,'http://en.wikipedia.org/wiki/Ns_%28simulator%29','Network Simulator 2',NULL),(16,3,'http://en.wikipedia.org/wiki/Network_performance','Network Performance Evaluation',NULL),(17,1,'','',3),(18,5,'http://glassonionblog.wordpress.com/2008/08/04/wireless-protocols-ieee-80211-a-b-g-n-compared/','Wireless protocols IEEE 802.11 A B G N compared',NULL),(19,5,'http://www.nsnam.org/','The ns-3 network simulator',NULL),(20,5,'http://www.nsnam.org/doxygen-release/','Ns-3 Documentation',NULL),(21,5,'http://www.ndsu.nodak.edu/asee/conferences/2007/proceedings/Jasani_Wireless_Course_Development.pdf','Developing an Innovative Mobile and Wireless Networks Course',NULL),(22,5,'http://en.wikipedia.org/wiki/Wi-Fi','WiFi Defination',NULL),(23,5,'http://en.wikipedia.org/wiki/IEEE_802.11','IEEE 802.11 Standards',NULL),(24,5,'http://www.mail-archive.com/ns-users@isi.edu/msg15291.html','[ns] Solution to ns2 dsr segmentation fault',NULL),(25,7,'http://en.wikipedia.org/wiki/Routing','Routing from Wikipedia',NULL),(26,7,'http://www.soi.wide.ad.jp/class/20060035/slides/04/','Routing',NULL),(27,7,'http://www.authorstream.com/Presentation/gj2685-215683-project-report-science-technology-ppt-powerpoint/','DSR',NULL),(28,7,'','',5),(29,7,'http://www.saching.com/Article/MANET---Mobile-Adhoc-NETwork--/334','MANETs',NULL),(30,7,'http://www.monarch.cs.rice.edu/monarch-papers/dsr-chapter00.pdf','DSR: The Dynamic Source Routing Protocol for Multi-Hop Wireless Ad Hoc Networks \r\n',NULL),(31,6,'http://en.wikipedia.org/wiki/WiMAX','About WiMAX',NULL),(32,6,'http://media.techtarget.com/searchMobileComputing/downloads/Finneran.pdf','WiFi vs WiMAX',NULL),(33,6,'http://www.networkworld.com/news/2010/012810-wimax-2.html','WiMAX 2',NULL),(34,8,'http://my.safaribooksonline.com/book/programming/mobile/9788131731666/mobile-ad-hoc-networks/ch06lev1sec10#X2ludGVybmFsX0ZsYXNoUmVhZGVyP3htbGlkPTk3ODgxMzE3MzE2NjYvY2gwNw==','WSN',NULL),(35,8,'http://sensorwebs.jpl.nasa.gov/','Volcano Sensorweb',NULL),(36,8,'http://www.google.co.in/url?sa=t&source=web&cd=26&ved=0CE8QFjAFOBQ&url=http%3A%2F%2Fwww.winsoc.org%2Fpdf%2FICW6339-ICWN09.pdf&rct=j&q=download%20sample%20%20data%20collected%20by%20sensor%20networks&e','WSN Landslide Detection',NULL),(37,8,'http://modis.higp.hawaii.edu/','MODVOLC',NULL),(38,8,'http://www.mannasim.dcc.ufmg.br/','Mannasim',NULL),(39,8,'http://www.wretch.cc/blog/ERIC80098/14177425','Mannasim for NS2.34 (Install ns-allinone-2.34 and mannasim on Ubuntu 10.10)',NULL),(40,8,'http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=926982','Energy-Efficient Communication Protocol for Wireless Microsensor Networks\r\n',NULL),(42,8,'http://www.springerlink.com/content/m45p484206t47808/','Cluster Number Variability Problem in LEACH\r\n',NULL),(43,8,'http://www.google.co.in/#sclient=psy&hl=en&site=&source=hp&q=+An+Application-Specific+Protocol+Architecture+for.+Wireless+Microsensor+Networks.+Wendi+B.+Heinzelman%2C+Member%2C+IEEE&pbx=1&oq=+An+Appli','An Application-Specific Protocol Architecture for Wireless Microsensor Networks\r\n',NULL),(45,4,'http://www.isi.edu/nsnam/ns/doc/node197.html','Satellite Networking in ns',NULL),(46,4,'http://www.satcom.co.uk/article.asp?article=11','Satellite Orbits',NULL),(47,4,'http://en.wikipedia.org/wiki/Geostationary_orbit','Geostationary_orbit',NULL),(48,6,'http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Linux.Wireless.modem.html#multirate','Linux Wireless LAN Howto',NULL),(49,6,'http://www.complextoreal.com/chapters/mod1.pdf','Modulation',NULL),(50,6,'http://wiki.answers.com/Q/what_is_digital_modulation','Digital Modulation',NULL),(51,6,'http://cp.literature.agilent.com/litweb/pdf/5965-7160E.pdf','Digital Modulation in Communications Systems - Agilent(Symbol Rate)',NULL),(52,6,'http://en.wikipedia.org/wiki/Signal-to-noise_ratio','SNR',NULL),(53,6,'http://code.google.com/p/ns2-wimax-awg/downloads/detail?name=NS-2_Release_2_6_Documentation.pdf','Available Features',NULL),(54,6,'http://www.isi.edu/nsnam/ns/doc/ns_doc.pdf','NS_Manual',NULL),(55,9,'','',3),(56,10,'','',3),(57,2,'http://gurkulindia.com/main/2012/01/solaris-calculate-collision-rate-in-ethernet-network/','Solaris Troubleshooting : Calculate Collision rate in Ethernet network',NULL),(58,2,'http://www.aims-conference.org/issnsm-2008/02-ns2.pdf','2nd ISSNSM’s Tutorial on Simulating Networks with Network Simulator 2 (ns-2)',NULL),(59,6,'http://www.docstoc.com/docs/7764210/Wireless-Network-Simulation-With-NS-2','Trace File Format',NULL),(60,6,'http://shyzhou.blogspot.com/2009/06/80211-trace-file-analysis-in-ns2.html','Trace File Analysis',NULL),(61,9,'http://www.bluetomorrow.com/about-bluetooth-technology/history-of-bluetooth/bluetooth-history.html','Bluetooth history',NULL),(62,9,'http://www.cs.uc.edu/~cdmc/ucbt/','UCBT - Bluetooth extension for NS2 at the University of Cincinnati ',NULL),(63,9,'http://www.informit.com/articles/article.aspx?p=19735&seqNum=4','The Bluetooth Special Interest Group',NULL),(64,9,'http://en.wikipedia.org/wiki/Bluetooth','Bluetooth - Versions',NULL),(65,3,'','',6),(66,10,'http://www.eetimes.com/design/embedded-internet-design/4201087/ZigBee-applications--Part-1-Sending-and-receiving-data/','ZigBee Wireless Networking, Drew Gislason',NULL),(67,10,'http://www.wowgao.com/2005wirelessandmobile/PDFfiles/2005/presentation_files/ChrisHerzog_ZigBeeAlliance.ppt','Overview of ZigBee',NULL),(68,10,'http://aut.researchgateway.ac.nz/bitstream/handle/10292/800/Prince-PikeA.pdf?sequence=4','Power Characterisation of a Zigbee Wireless Network in a Real Time Monitoring Application, Arrian Prince-Pike, Auckland University of Technology, 2009',NULL),(69,10,'http://ieeexplore.ieee.org/ielx5/35/28971/01304251.pdf?tp=&arnumber=1304251&isnumber=28971','Will IEEE 802.15.4 Make Ubiquitous Networking a Reality?: A Discussion on a Potential Low Power Low Bit Rate Standard,Jianliang Zheng, and Myung J. Lee\r\n',NULL),(70,10,'http://www.freewimaxinfo.com/zigbee.html','What is Zigbee Technology - Zigbee Features & Applications',NULL),(71,10,'http://www.vaddina.com/images/ZIGBEE_zigbee.pdf','The simulative Investigation of Zigbee/IEEE 802.15.4,Vaddina Prakash Rao',NULL),(72,10,'http://pages.cs.wisc.edu/~suman/courses/838/papers/zigbee.pdf','Overview of IEEE 802.15.4 LR-WPAN\r\n\r\n',NULL),(73,10,'http://www.ifn.et.tu-dresden.de/~marandin/ZigBee/ZigBeeTutorial.htm','Zigbee tutorial\r\n \r\n',NULL),(74,10,'http://www.scribd.com/doc/72247111/Full-Text-01','Implementation and performance analysis of star-based mesh network,Muhammad Wamiq ul haq\r\n\r\n',NULL),(75,10,'http://www.isi.edu/nsnam/ns/doc/ns_doc.pdf','The ns Manual, Kevin Fall & Kannan Varadhan, 2011 ',NULL),(76,9,'http://folk.uio.no/paalee/publications/Paper1-for-3GWireless03.pdf','P. E. Engelstad, T. E. Jonvik and T. V. Do. \"Asynchronous Formation of Non-Hierarchical Bluetooth Scatternets\", in Proceedings of 3G-Wireless Conference 2003 (3GWireless\'03), San Francisco, May 27-30, 2003.',NULL);
/*!40000 ALTER TABLE `ant_reference` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_selfevaluation`
--

DROP TABLE IF EXISTS `ant_selfevaluation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_selfevaluation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `question_num` int(11) NOT NULL,
  `question` longtext NOT NULL,
  `option1` varchar(100) NOT NULL,
  `option2` varchar(100) NOT NULL,
  `option3` varchar(100) DEFAULT NULL,
  `option4` varchar(100) DEFAULT NULL,
  `answer` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ant_selfevaluation_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_5fac5f86` FOREIGN KEY (`theory_id`) REFERENCES `ant_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=62 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_selfevaluation`
--

LOCK TABLES `ant_selfevaluation` WRITE;
/*!40000 ALTER TABLE `ant_selfevaluation` DISABLE KEYS */;
INSERT INTO `ant_selfevaluation` VALUES (1,1,1,'What information do you get from the sixth field of a tracefile','Packet type','Packet size','Packet id','',2),(2,1,2,'What is the code to view the simulation of the network in NAM ?','nam <namfilename>','$ns nam <namfilename>','$ns nam','',1),(3,1,3,'What is the function of trace-all ?','Traces some specific events','Traces all the events in a specific format','Traces some specific events in some specific format','',2),(4,1,4,'At what point of program the \'finish\' procedure should be called ?','At the end of the program','At the top of the program','It can be called at anypoint in the program','',3),(5,1,5,'Sink can','only recieve packets','send  packets','send acknowledgement and recieve packets','',3),(6,1,6,'What is the default packet size of tcp in NS2 ?','1000','552','785','',1),(7,3,1,'Which of these is a performance metric for network performance evaluation ?','Packet type',' Packet size','Packet loss','',3),(8,3,2,'Throughput depends on','Queue type','Packet id','Flags','',1),(9,3,3,'What is Propagation Delay ?','Total time required by a packet to travel from the sender to reciver and acknowledgement to travel f','Total time required by a sender to transmit the packet','Total time required by a packet to travel from sender to the reciever','',3),(10,3,4,'If bandwidth of a link in a network is arbitrarily increased, then throughput will','increase','decrease','might increase but get saturated beyond a point','',3),(11,5,1,'What is another name for Wi-Fi?','801.12 networking ','801.22 networking ','802.11 networking ','',3),(12,2,1,'What kind of topology is being used in the above experiment ?','Ring topology','Star topology','Bus topology','',3),(13,2,2,'In CSMA/CD if there is a traffic,what does the workstation do ?','transmits the data','stop transmitting the data','wait for sometime and then transmit','',3),(14,2,3,'Bandwidth of 10Broad36 Ethernet','10Mbps','100Mbps','75Mbps','',1),(19,2,4,'Ethernet includes a backoff algorithm for retransmissions. A number M is chosen randomly, 0 <= M < 2^k  where k= min(n,10),where n is the','Total number of collisions experienced by each packet','Total number of packets send during absence of traffic','Total number of packets returned back durin traffic','',1),(20,2,5,'Which of the following is a type of MAC protocol','Contention based protocols','Transmission control protocol','Border gateway protocol','',1),(21,5,2,'Which device includes an adapter to decode data sent in radio signals?','Modem ','Digital translator ','Router','',3),(22,5,3,'Which networking standard is not used in Wi-Fi data transmissions?','802.11g','802.11b','802.11c','',3),(23,5,4,'Which was the first networking standard to use orthogonal frequency-division multiplexing (OFDM) as a coding technique?','802.11n','802.11a','802.11g','',2),(24,5,5,'Which is the slowest and least expensive networking standard?','802.11b','802.11a','802.11n','',1),(25,5,6,'In which frequencies do Wi-Fi radios make transmissions?','2 GHz or 7.3 GHz','3 GHz or 8 GHz ','2.4 GHz or 5 GHz ','',3),(26,5,7,'Which waves uses to transmit signals in Wi Fi?','Mechanical ','Sound ','Radio	','',3),(27,5,8,'Suppose you want to change the settings on your wireless router through a web interface. There is one option that you can change the channel. So, what channel do routers use by default?','7','6','2','',2),(28,7,1,'Which of the following is a reactive routing protocol for MANETs?','Link state routing protocol','DSDV','Dynamic source routing (DSR)','CSMA/CA',3),(29,7,2,'Which one of the following is a type of MANET?','Body area network','Personal area network','Wireless LAN','All of the above',4),(30,7,3,'Which of the following is NOT true with respect to a MANET?','MANETs offer less mobility as compared to 802.11 Wi-Fi','Power consumption is a major issue in MANETs','All the nodes in a MANET are free to move arbitrarily',' MANETs are more vulnerable to security threats than wired or 802.11 Wi-Fi networks.',1),(31,7,4,'Which one of the following is the memory requirement of destination-sequenced distance\r\nvector (DSDV) protocol?\r\n','O(1)','O(n)','O(nlogn)','O(n2)',2),(32,6,4,'Which networking standard is used in WiMAX data transmission?','IEEE 802.11','IEEE 802.16','IEEE 802.6','IEEE 802.2',2),(33,6,2,'WiMAX is design to operate','wireless PAN','wireless LAN','wireless MAN ','wireless WAN',3),(34,6,3,'What is the maximum distance that WiMAX provide the wireless broadband access in a fixed station ?','upto 5 km','upto 50 km','upto 500 km','upto 5000 km',2),(35,6,1,'What is the acronym meaning of WiMAX ?','Worldwide Interoperability for Multiple Access','Worldwide Internet for Microwave Access','Worldwide Interoperability for Multipath Address','Worldwide Interoperability for Microwave Access',4),(37,6,5,'Which type of radio tchnology is used in WiMAX network ?','AM','FM','OFDM','SDMA',3),(39,4,1,'In which orbit rotational period of satellite is equal to that of earth.','GEO','LEO','MEO','HEO',1),(40,4,2,'In ns2 a terminal node is specified by its','Longitude','Latitude','Latitude and longitude','None of the above',3),(41,4,3,'A special type of LEO is the','Geostationary satellite ','Polar Orbiting satellite','HEO satellite','None of the above',2),(42,4,4,'Which parameter of Polar orbiting satellite node specifies the initial position of the satellite along the orbit, starting from the ascending node.','Altitude','Inclination','Alpha','Plane',3),(43,4,5,'The satellite handoff interval is set by the following command','HandoffManager/Term set elevation_mask_ 10;','HandoffManager/Sat set sat_handoff_int_ 10;','HandoffManager/Sat set latitude_threshold_ 70;','HandoffManager/Term set term_handoff_int_ 10;',2),(44,8,1,'Which  event driven operating system is specifically designed for wireless sensor networks ?','Linux','TinyOS','DOS','MVS/ESA',2),(45,8,2,'Which of the WSN protocol is  able to increase the maximum network lifetime?','SPIN','LEACH','Directed Diffusion','AODV',2),(46,8,3,'Transmission in one cluster may affect the communication in a nearby cluster. Which technique will be used to reduce this type of interference?\r\n','FDMA','TDMA','CDMA','None of the above',3),(47,8,4,'From the point of energy consumptions in WSN, which type of communication is more suitable ?','Multipath ','Point to point','All of the above','None of these',1),(48,8,5,'What is the advantage of Wireless Sensor Network over wired sensor network ?','Robust','Reliable','Mobility and easy to install','None of the above',3),(49,8,6,'What is the main characteristic of a sensor node ?','Autonomous','Low power cosumption','Small & capable of complex computation','Both ii & iii',4),(50,9,3,'What is the maximum number of active Bluetooth devices in a piconet ?','6','7','8','9',3),(51,10,1,'In which topology the end devices are directly connected with the coordinator?','Star topology','Tree topology','Cluster tree topology','Mesh topology',1),(52,9,2,'Which statement is NOT true regarding Bluetooth ?','The name ‘Bluetooth’ was named after 10th century Viking king in Denmark Harald Bluetooth','A piconet starts with two connected devices, and may grow to eight connected devices','Bluetooth technology provides both point-to-point and point-to-multipoint connection','Bluetooth technology simplifies wide area wireless connections',4),(53,9,1,'Bluetooth is ','WAN','PAN','MAN','LAN',2),(54,9,4,'Which Bluetooth modulation technique, used to avoid interference ?','QAM','FM','FHSS','DSSS',3),(55,9,5,'Bluetooth supports the frequency band of','GSM','ISM','VHF','UNII',2),(56,9,6,'Who defined Bluetooth specification?','IEEE','Bluetooth SIG','Ericsson','Bluetooth Forum',2),(57,10,2,'Which one of the following node can sleep in LR-PAN? ','Coordinator','Router','End device','None of the above',3),(58,10,3,'ZigBee is based on which standard?','IEEE 802.15.1','IEEE 802.15.2','IEEE 802.15.3','IEEE 802.15.4',4),(59,10,4,'Which RF band is not used by ZiggBee?','2.4GHz','568Hz','868Hz','915Hz',2),(60,10,5,'Network depth is the maximum number of hops from the root of the network to the most distant device in the network.What is the depth of star network topology?','1','2','3','4',1),(61,10,6,'Maximum number of end devices in ZigBee node is','8','256','240','1024',3);
/*!40000 ALTER TABLE `ant_selfevaluation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_simulation`
--

DROP TABLE IF EXISTS `ant_simulation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_simulation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `problem` longtext NOT NULL,
  `video_url` varchar(120) DEFAULT NULL,
  `discussion` longtext,
  `type` varchar(6) NOT NULL,
  `html_inline` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `ant_simulation_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_62da0893` FOREIGN KEY (`theory_id`) REFERENCES `ant_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_simulation`
--

LOCK TABLES `ant_simulation` WRITE;
/*!40000 ALTER TABLE `ant_simulation` DISABLE KEYS */;
INSERT INTO `ant_simulation` VALUES (1,1,'<p>Create a network with three nodes namely 0, 1 and 2. Establish a TCP connection between node 0 and node 2 such that node 0 will send TCP packets to node 2  via node 1.</p>','basic.swf','<p>At first the simulator is started and then the trace files, nam files ,finish procedure are defined.\r\nNext, three three nodes are created and connected by duplex links while defining bandwidth,delay and queue type.The queue size has been set to define the buffer capacity. A TCP connection is created between node 0 and node 2. Node 0 sends TCP packets to node 2 through node 1 while node 2 in turn send acknowledgements to node 0.The events are scheduled at a particular time.And at last we run to ns to view the simulation and get the required outputs.\r\n</p>','flash',''),(2,3,'<p>\r\nConsider a local area network connecting node numbers 3, 4, 5. This LAN is connected to two  external servers(node no.0 and node no.1) through a router(node no.2).\r\n</p>\r\n<p>\r\nHere in this network node no. 0 is connected to node no.2 by a duplex link and node no.1 is connected to node no.2 by a duplex link. Again, node no.2 and node no.3 are connected to each other with two simplex links thereby allowing bi-directional data transmission.\r\n</p>              \r\n<p>\r\nThe server at node no.0 is running an application on TCP/IP and sending data to node no.4.\r\n</p>\r\n<p>\r\nFor the two simplex links between node 2 and node 3, different possible values for the link bandwidth, propagation delay, queue type are shown in the right hand side panel. \r\n</p>\r\n<p>\r\nAltering any of these parameters affects the throughput of the network(which is simply no. of bytes received per unit time). the different throughput curves can be viewed in the right hand side panel.\r\n</p>','','','html',''),(3,2,'<p>Consider a local area network formed by nodes 3, 4, and 5.This LAN communicates with the external world through a router  denoted by node 2. There are two servers connected to  the router and represented by node no.s 0 and 1. Node 0 is running a application over TCP, which is accessed by node 4.Node 1 is running a application on UDP, which is accessed by node 5.\r\n</p>\r\n<p>The flash video on the right hand side shows how packets are being sent from the external servers to the nodes in LAN.\r\n</p>','lan.swf','<p>From the above simulation we observe that the packets sent by node 0 to node 4 also reaches node 5 but are eventually dropped there since node 5 is not the destination node. Similarly packets sent by node 1 to node 5 gets dropped at node 4.</p>','flash',''),(4,5,'<p>Consider an access point and two base stations A and B as shown in figure. Base stations can communicate with the access point, if they are within the communication range. Initially base station A is not within communication range. After sometimes, A starts moving and comes within the range and starts transmitting packets to the access point.</p>\r\n<p>Base station A does not know the presence of another base station B (hidden node) and vice versa. Both the hidden nodes start transmitting at the same time and collision occurs. To overcome this RTS and CTS frames are used.</p>\r\n<p><strong>The flash video on the right hand side shows </strong></p>\r\n<ul>\r\n<li>Base station can transmit packets to access point , it they are in communication range</li>\r\n<li>Collision occurs if both the hidden node starts transmission at the same time</li>\r\n<li>To avoid hidden node problem, RTS/CTS are used</li>\r\n</ul>','Simulation_wifi.swf','<p>From the above simulation we observe that hidden terminal problem is overcome by using RTS and CTS </p>','flash',''),(5,7,'<p>Consider a typical MANET with four mobile nodes 1, 2, 3, 4 as shown in figure.  Nodes are acting as router where any node can transmit packets to other nodes, if they are in communication range. Node 1 is sending packet to node 3 via node 2. After some time node 2 starts moving away and not in the communication range of node 1. So the route breaks between node 1 and 2. In the mean time node 4 comes in the communication range of node 1 and a new route 1-4-3 is created and transmission of packets begins from node 1 to 3 via node 4.</p>\r\n<p>The flash video on the right hand side shows how nodes are acting as routers in a mobile adhoc networks.\r\n</p>','Simulation_manet.swf','<p>From the above simulation we observed that the packet sent by node 1 is not reached to node 3, if they are not in communication range. So, packet gets lost. Node 1 will create a new route and again starts transmission.\r\n</p>','flash',''),(6,4,'<p>Consider two satellite terminals located at two different places on the earth and a geostationary satellite. One satellite terminal  act as transmitting antenna and another act as receiving antenna.Transmitting antenna sending signals using \"Bent-pipe\" geostationary satellite.On receiving signal, receiving antenna is sending acknowledgment.</p>\r\n<p>The flash video on the right hand side shows forecasting using geostationary satellite.\r\n</p>','Simulation_satellite_final.swf','<p>From the above simulation we observed that geostationary satellite appear to be fixed over one spot above the equator. so satellite terminals do not track the geostationary satellite.\r\n</p>','flash',''),(7,8,'<p>\r\nConsider a hierarchical WSN, where nodes are running LEACH protocol in order to reduce energy footprint. The concerned network is not so huge, \r\nand the expected number of cluster heads is three.\r\n</p>\r\n\r\n<p>\r\nThe animation on the right hand side illustrates the working principle of LEACH in the following four steps:\r\n</p>\r\n\r\n<ol>\r\n  <li>Cluster head selection</li>\r\n  <li>Cluster head advertisement</li>\r\n  <li>Cluster formation</li>\r\n  <li>Data transmission</li>\r\n</ol>','wsn.swf','','flash',''),(8,6,'<p>\r\nA WiMAX deployment could typically work in three architectural modes: Point-to-Multipoint (PMP), Mesh, or Mobile Multi-hop Relay (MMR) mode. \r\nIn this simulation we would visualize how a typical WiMAX network works in PMP and Mesh mode.\r\n</p>','wimax.swf','','flash',''),(9,9,'<p>Consider a typical Bluetooth Network with  Piconet and Scatternet scenario. A Master node with maximum seven no. of Slave nodes forming a Piconet. No. of Piconet can form Scatternet. Where the no. of Piconet may be connected with Slave/Slave nodes or Master/Slave nodes. </p>\r\n<p>The flash video on the right hand side shows the formation of Piconet and Scatternet.</p>','bluetooth.swf','','flash',''),(10,10,'<p>Consider a typical zigbee network with star topology. Node0 act as PAN coordinator and have the primary control over all devices. It emits periodic beacon and superframe is sent along with this. Node2 (End device) synchronises with the coordinator (Node0). Then, data transfer begins between two device.  </p>\r\n<p>The flash video on the right hand side shows the stepwise illustration of star topology in zigbee network.\r\n</p>','zigbee2.swf','','flash','');
/*!40000 ALTER TABLE `ant_simulation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_solution`
--

DROP TABLE IF EXISTS `ant_solution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_solution` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exercise_id` int(11) NOT NULL,
  `graph` longtext,
  `image_url` varchar(120) DEFAULT NULL,
  `other` longtext,
  PRIMARY KEY (`id`),
  KEY `ant_solution_2799bae2` (`exercise_id`),
  CONSTRAINT `exercise_id_refs_id_3de68888` FOREIGN KEY (`exercise_id`) REFERENCES `ant_exercise` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_solution`
--

LOCK TABLES `ant_solution` WRITE;
/*!40000 ALTER TABLE `ant_solution` DISABLE KEYS */;
INSERT INTO `ant_solution` VALUES (1,1,'','xs1_1.png','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<strong>Solution for the exercise is given below:</strong>\r\n<pre class= \"brush : bash;\">\r\nset ns [new Simulator]\r\n\r\n$ns color 1 Blue\r\n$ns color 2 Red\r\n\r\n# create trace file\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile\r\n\r\n# define finish procedure\r\nproc finish {} {\r\n     global ns tracefile\r\n     $ns flush-trace\r\n     close $tracefile\r\n     exit 0\r\n}\r\n\r\n# create three nodes\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\nset n2 [$ns node]\r\nset n3 [$ns node]\r\nset n4 [$ns node]\r\n\r\n# create links between the nodes\r\n$ns duplex-link $n0 $n4 2Mb 20ms DropTail\r\n$ns duplex-link $n1 $n4 2Mb 10ms DropTail\r\n$ns duplex-link $n4 $n3 2Mb 20ms DropTail\r\n$ns duplex-link $n4 $n2 2Mb 10ms DropTail\r\n\r\n\r\n# set TCP connection\r\nset tcp [new Agent/TCP]\r\n$ns attach-agent $n0 $tcp\r\nset sink [new Agent/TCPSink]\r\n$ns attach-agent $n3 $sink\r\n$ns connect $tcp $sink\r\n$tcp set fid_ 1\r\n\r\n# set FTP connection\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n\r\n# setup a UDP connection\r\nset udp [new Agent/UDP]\r\n$ns attach-agent $n1 $udp\r\nset null [new Agent/Null]\r\n$ns attach-agent $n2 $null\r\n$ns connect $udp $null\r\n$udp set fid_ 2\r\n\r\n# setup CBR over UDP\r\nset cbr [new Application/Traffic/CBR]\r\n$cbr attach-agent $udp\r\n$cbr set packetSize_ 1000\r\n$cbr set rate_ 0.01Mb\r\n$cbr set random_ false\r\n\r\n# schedule the events\r\n$ns at 0.5 \"$cbr start\"\r\n$ns at 1.0 \"$ftp start\"\r\n$ns at 9.0 \"$ftp stop\"\r\n$ns at 9.5 \"$cbr stop\"\r\n\r\n$ns at 10.0 \"finish\"\r\n\r\n$ns run\r\n</pre>\r\n</p>'),(2,2,'','exp1-ex2.png','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<strong>Solution for the exercise is given below:</strong>\r\n<pre class= \"brush : bash;\">\r\n# This script is created by NSG2 beta1\r\n# http://wushoupong.googlepages.com/nsg\r\n\r\n#===================================\r\n#     Simulation parameters setup\r\n#===================================\r\nset val(stop)   150.0                         ;# time of simulation end\r\nset val(file_size)	[expr 10*1024*1024]	;     #  Send a file of size 10 MB\r\n\r\n#===================================\r\n#        Initialization        \r\n#===================================\r\n#Create a ns simulator\r\nset ns [new Simulator]\r\n\r\n#Open the NS trace file\r\nset tracefile [open ftp.tr w]\r\n$ns trace-all $tracefile\r\n\r\n\r\n#===================================\r\n#        Nodes Definition        \r\n#===================================\r\n#Create 2 nodes\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\n\r\n#===================================\r\n#        Links Definition        \r\n#===================================\r\n#Createlinks between nodes\r\n$ns duplex-link $n0 $n1 5.0Mb 50ms DropTail\r\n$ns queue-limit $n0 $n1 10\r\n\r\n\r\n#===================================\r\n#        Agents Definition        \r\n#===================================\r\n#Setup a TCP connection\r\nset tcp0 [new Agent/TCP]\r\n$ns attach-agent $n0 $tcp0\r\n\r\nset sink1 [new Agent/TCPSink]\r\n$ns attach-agent $n1 $sink1\r\n$ns connect $tcp0 $sink1\r\n$tcp0 set packetSize_ 1500\r\n\r\n\r\n#===================================\r\n#        Applications Definition        \r\n#===================================\r\n#Setup a FTP Application over TCP connection\r\nset ftp0 [new Application/FTP]\r\n$ftp0 attach-agent $tcp0\r\n$ftp0 set type_ FTP\r\n\r\n$ns at 1.5 \"$ftp0 send $val(file_size)\"	\r\n\r\n\r\n#===================================\r\n#        Termination        \r\n#===================================\r\n#Define a \'finish\' procedure\r\nproc finish {} {\r\n    global ns tracefile\r\n    $ns flush-trace\r\n    close $tracefile\r\n    exit 0\r\n}\r\n\r\n# Schedule events\r\n$ns at $val(stop) \"finish\"\r\n$ns at $val(stop) \"puts \\\"done\\\" ; $ns halt\"\r\n\r\n$ns run\r\n</pre>\r\n<p>'),(3,5,'','exp2-ex1.png','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<pre class = \"brush : bash;\">\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile\r\n\r\n# Define the finish procedure\r\nproc finish {} {\r\n    global ns tracefile\r\n    $ns flush-trace\r\n    close $tracefile\r\n    exit 0\r\n}\r\n\r\n# Create the nodes\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\nset n2 [$ns node]\r\nset n3 [$ns node]\r\nset n4 [$ns node]\r\nset n5 [$ns node]\r\nset n6 [$ns node]\r\nset n7 [$ns node]\r\n\r\n\r\n# Setup LAN\r\nset lan [$ns newLan \"$n0 $n1 $n2 $n3 $n4 $n5 $n6\" 1Mb 40ms LL Queue/DropTail MAC/Csma/Cd Channel]\r\n\r\n# A gateway\r\n$ns duplex-link $n0 $n7 1.0Mb 50ms DropTail\r\n\r\n\r\n# Setup a UDP connection\r\nset udp [new Agent/UDP]\r\n$ns attach-agent $n7 $udp\r\nset null [new Agent/Null]\r\n\r\n$ns attach-agent $n6 $null\r\n$ns connect $udp $null\r\n\r\n# Setup a CBR over UDP connection\r\nset cbr [new Application/Traffic/CBR]\r\n$cbr attach-agent $udp\r\n$cbr set type_ CBR\r\n$cbr set packet_size_ 1000\r\n$cbr set rate_ 0.5Mb\r\n$cbr set random_ false\r\n\r\n# Scheduling the events\r\n$ns at 0.5 \"$cbr start\"\r\n$ns at 24.5 \"$cbr stop\"\r\n$ns at 25.0 \"finish\"\r\n\r\n$ns run\r\n</pre>\r\n</p>    '),(4,4,'','exp3-ex2.png','<p>\r\nThe above is a plot of bytes received at nodes 6 and 7 for CBR rates: 1 Mb, 2 Mb (plot legend with #1), 3 Mb (plot legend with #2). All the links have 4 Mb bandwidth.\r\n</p>\r\n\r\n\r\n<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<pre class = \"brush: bash;\">\r\nset ns [new Simulator]\r\n\r\n# Open tracefiles\r\nset tracefile1 [open out.tr w]\r\n$ns trace-all $tracefile1\r\n\r\n\r\n# Define the finish procedure\r\nproc finish {} {\r\n    global ns tracefile1 \r\n    $ns flush-trace\r\n    close $tracefile1   \r\n    exit 0\r\n}\r\n\r\n# Create nodes\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\nset n2 [$ns node]\r\nset n3 [$ns node]\r\nset n4 [$ns node]\r\nset n5 [$ns node]\r\nset n6 [$ns node]\r\nset n7 [$ns node]\r\n\r\n# Create links between the nodes\r\n$ns duplex-link $n0 $n2 4Mb 10ms DropTail\r\n$ns duplex-link $n1 $n2 4Mb 10ms DropTail\r\n$ns duplex-link $n2 $n3 4Mb 10ms DropTail\r\n$ns duplex-link $n3 $n4 4Mb 10ms DropTail\r\n$ns duplex-link $n3 $n5 4Mb 10ms DropTail\r\n$ns duplex-link $n4 $n6 4Mb 10ms DropTail\r\n$ns duplex-link $n5 $n7 4Mb 10ms DropTail\r\n\r\n\r\n# Set queue size of link(n2-n3) to 10\r\n$ns queue-limit $n2 $n3 20\r\n\r\n# Setup TCP connection\r\nset tcp [new Agent/TCP/Reno]\r\n$ns attach-agent $n0 $tcp\r\n\r\nset sink [new Agent/TCPSink/DelAck]\r\n$ns attach-agent $n6 $sink\r\n$ns connect $tcp $sink\r\n$tcp set fid_ 1\r\n$tcp set packetSize_ 1460\r\n\r\n# Set ftp over tcp connection\r\nset ftp [new Application/FTP]\r\n$ftp set type_ FTP\r\n$ftp attach-agent $tcp\r\n\r\n# Setup a UDP connection\r\nset udp [new Agent/UDP]\r\n$ns attach-agent $n1 $udp\r\n\r\nset null [new Agent/Null]\r\nns attach-agent $n7 $null\r\n$ns connect $udp $null\r\n$udp set fid_ 2\r\n\r\n# Setup a CBR over UDP connection\r\nset cbr [new Application/Traffic/CBR]\r\n$cbr attach-agent $udp\r\n$cbr set type_ CBR\r\n$cbr set rate 1Mb\r\n$cbr set random_ false\r\n\r\n$udp set packetSize_ 1500\r\n$cbr set packetSize_ 1500\r\n\r\n# Scheduling the events\r\n$ns at 1.0 \"$ftp start\"\r\n$ns at 1.5 \"$cbr start\"\r\n$ns at 24.0 \"$cbr stop\"\r\n$ns at 24.5 \"$ftp stop\"\r\n\r\n$ns at 25.0 \"finish\"\r\n\r\n$ns run\r\n</pre>\r\n</p>'),(5,3,'','exp3-ex1.png','<p>\r\nThe throughput vs. bandwidth graph show that there is no increase in throughput beyond a bandwidth of 2 Mb for the link 2-3. This is due to the fact that the net incoming traffic at node # 2 is 2 Mb. However, operating at a bandwidth, which is equal to the throughput, is not a good idea from the delay point of view. This is because, as the network traffic reaches near the link capacity, the delay tends to increase. Refer to chapter 3.6 &quot;Principles of Congestion Control&quot; of <a href=\"/ant/ant/3/references/\">[2]</a> for an overview on this topic.\r\n</p>\r\n\r\n<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<pre class = \"brush: bash;\">\r\nset ns [new Simulator]\r\n\r\n#open tracefiles\r\nset tracefile1 [open out.tr w]\r\n$ns trace-all $tracefile1\r\n\r\n\r\n#define the finish procedure\r\nproc finish {} {\r\n        global ns tracefile1 \r\n        $ns flush-trace\r\n        close $tracefile1   \r\n        exit 0\r\n}\r\n\r\n#create six nodes\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\nset n2 [$ns node]\r\nset n3 [$ns node]\r\nset n4 [$ns node]\r\nset n5 [$ns node]\r\nset n6 [$ns node]\r\nset n7 [$ns node]\r\n\r\n#create links between the nodes\r\n$ns duplex-link $n0 $n2 1Mb 10ms DropTail\r\n$ns duplex-link $n1 $n2 1Mb 10ms DropTail\r\n$ns duplex-link $n2 $n3 0.5Mb 10ms RED\r\n$ns duplex-link $n3 $n4 1Mb 10ms DropTail\r\n$ns duplex-link $n3 $n5 1Mb 10ms DropTail\r\n$ns duplex-link $n4 $n6 1Mb 10ms DropTail\r\n$ns duplex-link $n5 $n7 1Mb 10ms DropTail\r\n\r\n\r\n#set queue size of link(n2-n3) to 10\r\n$ns queue-limit $n2 $n3 10\r\n\r\n#setup TCP connection\r\nset tcp [new Agent/TCP/Newreno]\r\n$ns attach-agent $n0 $tcp\r\nset sink [new Agent/TCPSink/DelAck]\r\n$ns attach-agent $n6 $sink\r\n$ns connect $tcp $sink\r\n$tcp set fid_ 1\r\n$tcp set packet_size_ 1000\r\n\r\n#set ftp over tcp connection\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n\r\n#setup a UDP connection\r\nset udp [new Agent/UDP]\r\n$ns attach-agent $n1 $udp\r\nset null [new Agent/Null]\r\nns attach-agent $n7 $null\r\n$ns connect $udp $null\r\n$udp set fid_ 2\r\n\r\n#setup a CBR over UDP connection\r\nset cbr [new Application/Traffic/CBR]\r\n$cbr attach-agent $udp\r\n$cbr set type_ CBR\r\n$cbr set packet_size_ 1000\r\n$cbr set interval_ 0.005\r\n$cbr set random_ false\r\n\r\n#scheduling the events\r\n$ns at 1.0 \"$ftp start\"\r\n$ns at 2.0 \"$cbr start\"\r\n$ns at 9.0 \"$cbr stop\"\r\n$ns at 10.0 \"$ftp stop\"\r\n\r\n$ns at 15.0 \"finish\"\r\n$ns run\r\n</pre>\r\n</p>'),(6,6,'','exp2-ex2.png','<p>\r\nThe &quot;Bytes Received&quot; plot is a cumulative plot of Kbits received by a node. The graph would be linear when the concerned node receives constant amount of data all the time. However, presence of link errors make variable amount of data available to the node. Hence the graph is non-linear.\r\n</p>\r\n\r\n<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<pre class = \"brush : bash;\">\r\nset val(file_size)	[expr 4*1024*1024]	;     #  Send a file of size 4 MB\r\n\r\nset ns [new Simulator]\r\n\r\n# Open tracefile\r\nset tracefile [open out.tr w]\r\n$ns trace-all $tracefile\r\n\r\n# Define the finish procedure\r\nproc finish {} {\r\n    global ns tracefile\r\n    $ns flush-trace\r\n    close $tracefile\r\n    exit 0\r\n}\r\n\r\n# Create six nodes\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\nset n2 [$ns node]\r\nset n3 [$ns node]\r\nset n4 [$ns node]\r\nset n5 [$ns node]\r\nset n6 [$ns node]\r\n\r\n# Create links between the nodes\r\n$ns duplex-link $n0 $n1 2Mb 10ms DropTail\r\n$ns duplex-link $n0 $n2 2Mb 10ms DropTail\r\n$ns duplex-link $n1 $n2 2Mb 10ms DropTail\r\n$ns simplex-link $n2 $n3 0.3Mb 100ms DropTail\r\n$ns simplex-link $n3 $n2 0.3Mb 100ms DropTail\r\n\r\n# Set queue size of link(n2-n3) to 20\r\n$ns queue-limit $n2 $n3 20\r\n\r\n# Set up the LAN\r\nset lan [$ns newLan \"$n3 $n4 $n5 $n6\" 0.5Mb 40ms LL Queue/DropTail MAC/Csma/Cd Channel]\r\n\r\n# Set error model\r\nset loss_module [new ErrorModel]\r\n$loss_module set rate_ 0.2\r\n$loss_module ranvar [new RandomVariable/Uniform]\r\n$loss_module drop-target [new Agent/Null]\r\n$ns lossmodel $loss_module $n2 $n3\r\n\r\n# Setup TCP connection\r\nset tcp [new Agent/TCP]\r\n$ns attach-agent $n1 $tcp\r\n\r\nset sink [new Agent/TCPSink]\r\n$ns attach-agent $n5 $sink\r\n$ns connect $tcp $sink\r\n$tcp set packet_size_ 1500\r\n\r\n# Set ftp over tcp connection\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n\r\n# Scheduling the events\r\n$ns at 1.5 \"$ftp send $val(file_size)\"\r\n\r\n$ns at 2000.0 \"finish\"\r\n\r\n$ns run\r\n</pre>\r\n</p>'),(8,10,'','','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n<p><strong>Solution for the exercise 1 is given below:</strong></p>\r\n<pre class=\"brush : bash;\">#\r\nset val(chan)           Channel/WirelessChannel    ;#Channel Type\r\nset val(prop)           Propagation/TwoRayGround   ;# radio-propagation model\r\nset val(netif)          Phy/WirelessPhy            ;# network interface type\r\nset val(mac)            Mac/802_11                 ;# MAC type\r\nset val(ifq)            Queue/DropTail/PriQueue    ;# interface queue type\r\nset val(ll)             LL                         ;# link layer type\r\nset val(ant)            Antenna/OmniAntenna        ;# antenna model\r\nset val(ifqlen)         50                         ;# max packet in ifq\r\nset val(nn)             3                          ;# number of mobilenodes\r\nset val(rp)             AODV                       ;# routing protocol\r\nset val(x)		        500\r\nset val(y)		        500\r\n#set val(scene)          \"/home/barun/Desktop/ns2/ns-2.34/indep-utils/cmu-scen-gen/setdest/ant/scene-3n-2\" \r\nset val(stop)              70.0                   ;# simulation time\r\n\r\n# Initialize Global Variables\r\nset ns_		[new Simulator]\r\n$ns_ use-newtrace\r\nset tracefd     [open wireless2.tr w]\r\n$ns_ trace-all $tracefd\r\n\r\n\r\n# set up topography object\r\nset topo       [new Topography]\r\n\r\n$topo load_flatgrid $val(x) $val(y)\r\n\r\n# Create God\r\nset god_ [create-god $val(nn)]\r\n\r\n# New API to config node: \r\n# 1. Create channel (or multiple-channels);\r\n# 2. Specify channel in node-config (instead of channelType);\r\n# 3. Create nodes for simulations.\r\n\r\n# Create channel #1 and #2\r\nset chan_1_ [new $val(chan)]\r\nset chan_2_ [new $val(chan)]\r\n\r\n# Create node(0) \"attached\" to channel #1\r\n\r\n# configure node, please note the change below.\r\n$ns_ node-config -adhocRouting $val(rp) \\\r\n		-llType $val(ll) \\\r\n		-macType $val(mac) \\\r\n		-ifqType $val(ifq) \\\r\n		-ifqLen $val(ifqlen) \\\r\n		-antType $val(ant) \\\r\n		-propType $val(prop) \\\r\n		-phyType $val(netif) \\\r\n		-topoInstance $topo \\\r\n		-agentTrace ON \\\r\n		-routerTrace ON \\\r\n		-macTrace ON \\\r\n		-movementTrace ON \\\r\n		-channel $chan_1_ \r\n\r\nset node_(0) [$ns_ node]\r\n\r\n# node_(1) can also be created with the same configuration, or with a different\r\n# channel specified.\r\n# Uncomment below two lines will create node_(1) with a different channel.\r\n#  $ns_ node-config \\\r\n#		 -channel $chan_2_ \r\nset node_(1) [$ns_ node]\r\n\r\nset node_(2) [$ns_ node]\r\n\r\n$node_(0) random-motion 0\r\n$node_(1) random-motion 0\r\n$node_(2) random-motion 0\r\n\r\n# \r\n# Define traffic model\r\n#\r\nputs \"Loading scenario file...\"\r\n#source $val(scene)\r\n# nodes: 3, speed type: 1, min speed: 1.00, max speed: 15.00\r\n# avg speed: 4.97, pause type: 1, pause: 2.00, max x: 500.00, max y: 500.00\r\n#\r\n$node_(0) set X_ 454.060071018640\r\n$node_(0) set Y_ 403.968538862061\r\n$node_(0) set Z_ 0.000000000000\r\n$node_(1) set X_ 22.178026058951\r\n$node_(1) set Y_ 243.738350737276\r\n$node_(1) set Z_ 0.000000000000\r\n$node_(2) set X_ 371.008451369069\r\n$node_(2) set Y_ 185.301693166316\r\n$node_(2) set Z_ 0.000000000000\r\n$ns_ at 0.000000000000 \"$node_(0) setdest 356.793785866608 11.405992524802 3.552472957623\"\r\n$ns_ at 0.000000000000 \"$node_(1) setdest 238.321861617953 391.660135696947 11.421343547674\"\r\n$ns_ at 0.000000000000 \"$node_(2) setdest 146.063853609674 445.314010285147 9.794277769329\"\r\n$god_ set-dist 0 1 16777215\r\n$god_ set-dist 0 2 1\r\n$god_ set-dist 1 2 16777215\r\n$ns_ at 6.588983535475 \"$god_ set-dist 0 1 2\"\r\n$ns_ at 6.588983535475 \"$god_ set-dist 1 2 1\"\r\n$ns_ at 17.739115189630 \"$god_ set-dist 0 1 1\"\r\n$ns_ at 22.931989576748 \"$node_(1) setdest 238.321861617953 391.660135696947 0.000000000000\"\r\n$ns_ at 24.931989576748 \"$node_(1) setdest 320.540534372542 254.623600971352 7.991026077916\"\r\n$ns_ at 55.931989576748 \"$node_(2) setdest 290.540534372542 254.623600971352 5.991026077916\"\r\n$ns_ at 27.621738856783 \"$god_ set-dist 0 1 1\"\r\n$ns_ at 27.621738856783 \"$god_ set-dist 1 2 1\"\r\n$ns_ at 27.621738856783 \"$god_ set-dist 0 2 2\"\r\n#\r\n# Destination Unreachables: 2\r\n#\r\n# Route Changes: 4\r\n#\r\n# Link Changes: 3\r\n#\r\n# Node | Route Changes | Link Changes\r\n#    0 |             3 |            2\r\n#    1 |             3 |            2\r\n#    2 |             2 |            2\r\n\r\n$ns_ at 35 \"$god_ set-dist 0 2 2\"\r\n\r\n# Nodes and their sizes\r\nfor {set i 0} {$i &lt; $val(nn)} {incr i} {\r\n    #$node_($i) random-motion 0\r\n	$ns_ initial_node_pos $node_($i) 20\r\n}\r\n\r\n# Setup traffic flow between nodes\r\n# TCP connections between node_(0) and node_(1)\r\n\r\n\r\nset tcp [new Agent/TCP]\r\n$tcp set class_ 2\r\nset sink [new Agent/TCPSink]\r\n$ns_ attach-agent $node_(0) $tcp\r\n$ns_ attach-agent $node_(2) $sink\r\n$ns_ connect $tcp $sink\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n$ns_ at 3.0 \"$ftp start\" \r\n\r\n#\r\n# Tell nodes when the simulation ends\r\n#\r\nfor {set i 0} {$i &lt; $val(nn) } {incr i} {\r\n    $ns_ at $val(stop) \"$node_($i) reset\";\r\n}\r\n$ns_ at $val(stop) \"stop\"\r\n$ns_ at $val(stop) \"puts \\\"NS EXITING...\\\" ; $ns_ halt\"\r\nproc stop {} {\r\n    global ns_ tracefd\r\n    $ns_ flush-trace\r\n    close $tracefd\r\n}\r\n\r\nputs \"Starting Simulation...\"\r\n$ns_ run\r\n\r\n</pre>\r\n\r\n\r\n\r\n<p>For analysis check the trace file of the program.</p>\r\n\r\n<p>Node 0 is starts sending data at time 3.009523851 as shown below :</p>\r\n<pre>\r\ns -t 3.009523851 -Hs 0 -Hd -2 -Ni 0 -Nx 451.49 -Ny 393.59 -Nz 0.00 -Ne -1.000000 -Nl AGT -Nw --- -Ma 0 -Md 0 -Ms 0 -Mt 0 -Is 0.0 -Id 2.0 -It tcp -Il 1040 -If 2 -Ii 2 -Iv 32 -Pn tcp -Ps 1 -Pa 0 -Pf 0 -Po 1\r\n</pre>\r\n\r\n<p>Data moves from node 0 to node 2 directly as long as the -Hs  and -Hd field  of the trace contain  node id 0 and next hop id 2.</p>\r\n<p>This process lasts upto time 27.641873637 as shown below.</p>\r\n<pre>\r\ns -t 27.641873637 -Hs 0 -Hd 0 -Ni 0 -Nx 430.44 -Ny 308.65 -Nz 0.00 -Ne -1.000000 -Nl MAC -Nw --- -Ma 0 -Md ffffffff -Ms 0 -Mt 800 -Is 0.255 -Id -1.255 -It AODV -Il 90 -If 0 -Ii 0 -Iv 1 -P aodv -Pt 0x8 -Ph 1 -Pd 2 -Pds 0 -Pl 0.000000 -Pc ERROR\r\n</pre>\r\n<p>After this trace we see an 1 in the -Hs field of the next trace as shown below.</p>\r\n<pre>\r\nr -t 27.642594277 -Hs 1 -Hd 0 -Ni 1 -Nx 249.47 -Ny 373.09 -Nz 0.00 -Ne -1.000000 -Nl MAC -Nw --- -Ma 0 -Md ffffffff -Ms 0 -Mt 800 -Is 0.255 -Id -1.255 -It AODV -Il 32 -If 0 -Ii 0 -Iv 1 -P aodv -Pt 0x8 -Ph 1 -Pd 2 -Pds 0 -Pl 0.000000 -Pc ERROR\r\n</pre>\r\n<p>So roughly for 24.632349786 time data moves directly from node 0 to 2.</p>\r\n<p>Data moves from node 0 to node 2 via node 1 as long as \'0\' or \'1\' or \'2\' present in the -Hs field of the trace and \'s\' or \'r\' or \'f\' present in the first field of each trace.It lasts up to 69.999992435 as shown below.</p>\r\n<pre>r -t 69.999992435 -Hs 0 -Hd 0 -Ni 0 -Nx 394.25 -Ny 162.59 -Nz 0.00 -Ne -1.000000 -Nl MAC -Nw --- -Ma 13a -Md 0 -Ms 1 -Mt 800 -Is 2.0 -Id 0.0 -It ack -Il 40 -If 2 -Ii 6262 -Iv 29 -Pn tcp -Ps 3107 -Pa 0 -Pf 2 -Po 2\r\n</pre>\r\n<p>So roughly for 42.357398158 time data moves from node 0 to 2 via node 1.</p>'),(9,12,'','manet/route-change.png','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n<p><strong>Solution for the exercise #2 is given below:</strong></p>\r\n<pre class=\"brush : bash;\"># Create a new simulator object.\r\nset ns [new Simulator]\r\n\r\n# ----- Setup wireless environment. ----\r\nset wireless_tracefile [open dsr-6-nodes.tr w]\r\n# Use new trace format\r\n$ns use-newtrace\r\nset topography [new Topography]\r\n$ns trace-all $wireless_tracefile\r\n\r\n$topography load_flatgrid 700 700\r\n\r\n#\r\n# Create God\r\n#\r\nset god_ [create-god 6]\r\n\r\n#global node setting\r\n$ns node-config -adhocRouting DSR \\\r\n                 -llType LL \\\r\n                 -macType Mac/802_11 \\\r\n                 -ifqType CMUPriQueue  \\\r\n                 -ifqLen 50 \\\r\n                 -antType Antenna/OmniAntenna \\\r\n                 -propType Propagation/TwoRayGround \\\r\n                 -phyType Phy/WirelessPhy \\\r\n                 -channel [new Channel/WirelessChannel] \\\r\n                 -topoInstance $topography \\\r\n                 -agentTrace ON \\\r\n                 -routerTrace OFF \\\r\n                 -macTrace ON\r\n\r\n# Create wireless nodes\r\nset node(0) [$ns node]\r\n$node(0) set X_ 150\r\n$node(0) set Y_ 300\r\n$node(0) set Z_ 0.0\r\n$node(0) color \"black\"\r\n$ns initial_node_pos $node(0) 30.000000\r\n\r\nset node(1) [$ns node]\r\n$node(1) set X_ 300\r\n$node(1) set Y_ 500\r\n$node(1) set Z_ 0.0\r\n$node(1) color \"black\"\r\n$ns initial_node_pos $node(1) 30.000000\r\n\r\nset node(2) [$ns node]\r\n$node(2) set X_ 500\r\n$node(2) set Y_ 500\r\n$node(2) set Z_ 0.0\r\n$node(2) color \"black\"\r\n$ns initial_node_pos $node(2) 30.000000\r\n\r\nset node(3) [$ns node]\r\n$node(3) set X_ 300\r\n$node(3) set Y_ 100\r\n$node(3) set Z_ 0.0\r\n$node(3) color \"black\"\r\n$ns initial_node_pos $node(3) 30.000000\r\n\r\nset node(4) [$ns node]\r\n$node(4) set X_ 500\r\n$node(4) set Y_ 100\r\n$node(4) set Z_ 0.0\r\n$node(4) color \"black\"\r\n$ns initial_node_pos $node(4) 30.000000\r\n\r\nset node(5) [$ns node]\r\n$node(5) set X_ 650\r\n$node(5) set Y_ 300\r\n$node(5) set Z_ 0.0\r\n$node(5) color \"black\"\r\n$ns initial_node_pos $node(5) 30.000000\r\n\r\n# Node movement patterns\r\n# $ns at 30 \"$node(0) setdest 150.0 450.0 1.5\"\r\n$ns at 4.0 \"$node(3) setdest 300.0 500.0 5.0\"\r\n$ns at 4.0 \"$god_ set-dist 0 5 3\"\r\n\r\n# Create links between nodes.\r\n# Add Link Loss Models\r\n\r\n# Create agents.\r\nset tcp [new Agent/TCP]\r\n$tcp set class_ 2\r\nset sink [new Agent/TCPSink]\r\n$ns attach-agent $node(0) $tcp\r\n$ns attach-agent $node(5) $sink\r\n$ns connect $tcp $sink\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n$ns at 3.0 \"$ftp start\" \r\n\r\n#\r\n# Tell nodes when the simulation ends\r\n#\r\nfor {set i 0} {$i &lt; 6 } {incr i} {\r\n    $ns at 60.000000 \"$node($i) reset\";\r\n}\r\n\r\n# Connect agents.\r\n# Run the simulation\r\nproc finish {} {\r\n	global ns \r\n	$ns flush-trace	\r\n	exit 0\r\n}\r\n\r\n$ns at 60.000000 \"finish\"\r\n$ns run\r\n</pre>\r\n\r\n\r\n<p><strong><span style=\"text-decoration: underline;\">Analyze the trace file and determine when the use of second route commence</span></strong></p>\r\n<p>&nbsp;Here the node 0 is the source node and node 5 is the destination node. Initially data moves from node 0 to node 5 through the route 0-3-4-5. This movement begins at time&nbsp; 3.080088359 as shown below.</p>\r\n<p>&nbsp; SFESTs 3.080088359 _0_ 0 [0 -&gt; 5] 1(1) to 3 [0 |3 4 5 ]</p>\r\n<ul>\r\n<li>The first field is Established Flowstate (SFEST)</li>\r\n<li>The second field is the time</li>\r\n<li>The third field is the node number</li>\r\n<li>The fourth field is the Header UID</li>\r\n<li>The fifth field is the source</li>\r\n<li>The sixth field is the destination</li>\r\n<li>The next field is the&nbsp; Flow ID&nbsp; and Flow Header</li>\r\n<li>The next number is the next hop id.</li>\r\n<li>The next numbers in the square brackets concerns the adresses through which the data travels to destination.</li>\r\n</ul>\r\n<p>The above trace indicates flowstate established&nbsp; from source 0 to destination 5 with 3 is the next hop address through the route 0-3-4-5.</p>\r\n<p>When we see \'D\' or SSendFailure in the first field of trace and node number \'3\' or \'4\' or \'5\' in the -Hs field of the trace(as shown below), then the existing route breaks and data will not reach to the destination.</p>\r\n<pre>d -t 34.114865014 -Hs 3 -Hd -2 -Ni 3 -Nx 300.00 -Ny 250.57 -Nz 0.00 -Ne -1.000000 -Nl MAC -Nw RET -Ma 256e -Md 4 -Ms 3 -Mt 0 </pre>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; SSendFailure 34.114865014 _3_ 1659 0 0:0 5:0 3-&gt;4 0 3 0 4 [0 |3 4 5 ]</p>\r\n<ul>\r\n<li>The first field is Send Failure (SSendFailure)</li>\r\n<li>The second field is the time</li>\r\n<li>The third field is the node number</li>\r\n<li>The fourth field is the Header UID</li>\r\n<li>The fifth field is the protocol type</li>\r\n<li>The sixth field is the Source : Source port</li>\r\n<li>The next field is the&nbsp; Destination : Destination port</li>\r\n<li>After this is the&nbsp; Flow ID&nbsp; and Flow Header</li>\r\n<li>The next number is the number of&nbsp; Hops: From -&gt; To</li>\r\n<li>The next field is the number of&nbsp; Hops: Source -&gt; Destination</li>\r\n<li>The next field is the number of&nbsp; Hops: From -&gt; Destination</li>\r\n<li>The next number is the number of&nbsp; Addresses&nbsp;</li>\r\n<li>The next numbers in the square brackets concerns the adresses through which the data travels to destination.</li>\r\n</ul>\r\n<p>&nbsp;So roughly in 31.000212318 time data moves from node 0 to 5 through the route 0-3-4-5.</p>\r\n<p>&nbsp;The Second route commence at time 34.249896832 when we see flowstate established from 0(source) to 5(destination) with the next hop 3 through the route 0-1-2-5 as shown below.</p>\r\n<p>SFESTs 34.249896832 _0_ 1712 [0 -&gt; 5] 3(1) to 1 [0 |1 2 5 ]</p>\r\n<p>&nbsp;For detail explanation of DSR trace formats follow the link given below &nbsp;&nbsp;&nbsp;</p>\r\n<p>&nbsp;http://nsnam.isi.edu/nsnam/index.php/NS-2_Trace_Formats</p>\r\n<p><strong>Plot the number of packets received by each node over the entire time duration of the simulation</strong></p>\r\n\r\n<p>\r\n<ul>\r\n  <li>Choose the tool Trace File Analysis and select wireless (New) simulation mode.</li>\r\n<li>As per the question given, choose the statistics “Byte Recieved” for plotting the number of packets received by each node.</li> \r\n<li> For example, enter node number 5 and choose MAC, RTR and AGT layer and  then select plot.Similarly plot for node number 3 and 1. </li>\r\n<li> The above graph is shown for byte received by node number 1, 3 and 5.Initially TCP connection is intiated between node 0 and 5 through node 3,4.At time 34.114865014 TCP connection breaks between node 0 and node3 and second route commence from node 0 to node 5 via node 1,2 at time 34.249896832.So the above graph shows byte received by node 3 is starts from time 3.009523851 to 34.114865014 and  byte received by node 1 is starts at time 34.249896832. </li>\r\n<ul>\r\n </p>\r\n'),(10,15,'','satellite/ex2_soln.png','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n<p><strong>Solution for Exercise 2:</strong></p>\r\n<p>\r\n<ul>\r\n  <li>Choose the tool Trace File Analysis and select wired simulation mode because the trace file format for satellite mode is similar to conventional ns tracing.</li>\r\n  <li>As per the question given, plot the graph for hop count by choosing the statistics hop count and entering source node as 66 and destination node as 67.Check the first few line of trace file:\r\n<p>+ 1.0000 66 26 cbr 210 ------- 0 66.0 67.0 0 0 37.90 -122.30 48.90 -120.94</p>\r\n<p>- 1.0000 66 26 cbr 210 ------- 0 66.0 67.0 0 0 37.90 -122.30 48.90 -120.94</p>\r\n<p>r 1.0063 66 26 cbr 210 ------- 0 66.0 67.0 0 0 37.90 -122.30 48.90 -120.94</p>\r\n<p>+ 1.0063 26 37 cbr 210 ------- 0 66.0 67.0 0 0 48.90 -120.94 32.60 -87.51</p>\r\n<p>- 1.0063 26 37 cbr 210 ------- 0 66.0 67.0 0 0 48.90 -120.94 32.60 -87.51</p>\r\n<p>r 1.0186 26 37 cbr 210 ------- 0 66.0 67.0 0 0 48.90 -120.94 32.60 -87.51</p>\r\n<p>+ 1.0186 37 48 cbr 210 ------- 0 66.0 67.0 0 0 32.60 -87.51 48.90 -57.74</p>\r\n<p>- 1.0186 37 48 cbr 210 ------- 0 66.0 67.0 0 0 32.60 -87.51 48.90 -57.74</p>\r\n<p>r 1.0300 37 48 cbr 210 ------- 0 66.0 67.0 0 0 32.60 -87.51 48.90 -57.74</p>\r\n<p>+ 1.0300 48 67 cbr 210 ------- 0 66.0 67.0 0 0 48.90 -57.74 42.30 -71.10</p>\r\n<p>- 1.0300 48 67 cbr 210 ------- 0 66.0 67.0 0 0 48.90 -57.74 42.30 -71.10</p>\r\n<p>r 1.0364 48 67 cbr 210 ------- 0 66.0 67.0 0 0 48.90 -57.74 42.30 -71.10</p>\r\nPacket id \'0\' is transmitted from source(66) to destination(67) through 4 hops (66-26-37-48-67). Similarly consider another packet id \'315\' .It is transmitted from source to destination through 9 hops (66-47-36-25-14-3-2-1-0-67).In case of LEO satellite if the current satellite is fallen below the elevation mask of the terminal, the hand off manager detaches the terminal from the satellite\'s up and down links and searches another possible satellite and connects its network interfaces to that satellite\'s uplink and downlink channels. This graph is shown for one earth rotation(86400.00).Run this simulation for two earth rotation and check the graph for this. We can see the graph is somehow periodic in nature or the same pattern is repeated after one earth rotation.</li>\r\n<li>End-to-end delay is directly proportional to number of hop-count. So its graph is related to hop count and it is periodic in nature. \r\n</li> <ul>\r\n </p>\r\n'),(11,13,'','satellite/ex1_soln.png','<!-- For syntax highlighting -->\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushBash.js\"></script>\r\n    <script type=\"text/javascript\" src=\"_STATIC_URL_/ant/}lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>    \r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n\r\n    <script type=\"text/javascript\">\r\n        SyntaxHighlighter.config.clipboardSwf = \'scripts/clipboard.swf\';\r\n        SyntaxHighlighter.all();\r\n   </script>\r\n\r\n<p>\r\n<ul>\r\n  <li>Choose the tool Trace File Analysis and select wired simulation mode because the trace file format for satellite mode is similar to conventional ns tracing.</li>\r\n  <li>As per the question given, plot the graph for end-to-end delay by choosing the statistics end-to-end delay and entering source node as 1 and destination node as 2</li>\r\n<li>End-to-end delay after packet sequence number 20 is almost constant with little fluctuation because in case of geostationary satellite, satellite appear to be fixed over one spot above the equator or in other words two terminals and satellite nodes are appear to be fixed with respect to each other.\r\n</li> <ul>\r\n </p>\r\n'),(12,17,'','','<p><strong>Solution for the exercise 1 is given below:</strong></p>\r\n<p>In the given script, we have 4 no. of CHs and 11 no. of common nodes. But in our output, we have the actual number of cluster heads formed per round is varying with respect to the desired number of cluster heads<p>\r\n<p>\r\n<pre class = \"brush : bash;\">\r\nNode 1 is a cluster head at time 0.066042\r\nNode 7 is a cluster head at time 0.387768\r\nNode 6 is a cluster head at time 0.399554\r\nNode 3 is a cluster head at time 0.874293\r\nNode 4 is a cluster head at time 100.653160\r\nNode 9 is a cluster head at time 100.750737\r\nNode 5 is a cluster head at time 100.794918\r\nNode 2 is a cluster head at time 100.935482\r\nNode 10 is a cluster head at time 200.843925\r\nNode 8 is a cluster head at time 300.115853\r\nNode 4 is a cluster head at time 300.653160\r\nNode 5 is a cluster head at time 300.794918\r\nNode 7 is a cluster head at time 400.387768\r\nNode 1 is a cluster head at time 500.066042\r\nNode 6 is a cluster head at time 500.399554\r\nNode 9 is a cluster head at time 500.750737\r\nNode 2 is a cluster head at time 500.935482\r\n</pre>\r\n</p>'),(13,18,'','wimax/wimax01.png','Note that the above plot show a very sharp fall in data rate. This is due to the fact that we have considered distances at intervals of 500m. Greater sampling rate would reflect a more accurate curve. '),(14,7,'','','Communication is possible while xDistance &le; 116. Beyond that no packets are being received, which can be verified from the output:\r\n\r\n<pre>\r\n    IP addresses of base stations\r\n    10.1.1.2\r\n\r\n    IP address of AP\r\n    10.1.1.1\r\n\r\n    Location of all nodes\r\n    (0, 0, 0)\r\n    (117, 0, 0)\r\n\r\n\r\n    Sent 1024 bytes to 10.1.1.1\r\n</pre>'),(15,8,'','wifi/rts_cts.png','Run the simulation with RTS/CTS disabled as shown below:\r\n\r\n<script type=\'text/javascript\' src=\'_STATIC_URL_/ant/js/jquery.min.js\'></script>\r\n<script type=\"text/javascript\" src=\"_STATIC_URL_/ant/js/common.js\"></script>\r\n<script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shCore.js\"></script>\r\n<script type=\"text/javascript\" src=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/scripts/shBrushCpp.js\"></script>\r\n<link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shCore.css\"/>\r\n<link type=\"text/css\" rel=\"stylesheet\" href=\"_STATIC_URL_/ant/lib/SyntaxHighlighter/styles/shThemeDefault.css\"/>\r\n    \r\n<pre class=\"brush: cpp;\">\r\n    std::cout &lt;&lt; \"Hidden station experiment with RTS/CTS disabled:\\n\" &lt;&lt; std::endl;\r\n    experiment (false, 10);     \r\n    std::cout &lt;&lt; std::endl;\r\n    //std::cout &lt;&lt; \"Hidden station experiment with RTS/CTS enabled:\\n\" &lt;&lt; std::endl;\r\n    //experiment (true, 10); \r\n</pre>\r\n\r\n<p>  \r\nOnce the simulation is complete, if we filter the output with the &quot;NeedDataRetransmission&quot;\r\nstring, 1437 occurences could be found, as shown in the above picture. This implies that 1437 packet\r\nretransmissions took place during the simulation as a result of collision.\r\n</p>\r\n\r\n<p>\r\nNext, run the simulation with RTS/CTS enabled:\r\n</p>\r\n\r\n<pre class=\"brush: cpp;\">\r\n    //std::cout &lt;&lt; \"Hidden station experiment with RTS/CTS disabled:\\n\" &lt;&lt; std::endl;\r\n    //experiment (false, 10);     \r\n    //std::cout &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; \"Hidden station experiment with RTS/CTS enabled:\\n\" &lt;&lt; std::endl;\r\n    experiment (true, 10); \r\n</pre>\r\n\r\n<p>\r\nIn this case, 107 occurences of the &quot;NeedDataRetransmission&quot; string could be found. Thus,\r\nthe number of retransmissions has been largely reduced when RTS/CTS is being used. This is because\r\nnodes now usually transmit when the receiver has agreed to receive. Note that, even with RTS/CTS\r\nexchange, collisions in the network could not be avoided entirely.\r\n</p>'),(16,20,'','zigbee/ZigbeeSol.png','<p>The above figure show that on increasing the beacon order, average energy consumption of nodes decreases and on increasing the superframe order,  average energy consumption of nodes increases.\r\nHigher superframe order indicate longer active period,  which results less contention for the channel. A device trying to transmit data senses the channel repeatedly and wait for a significant amount of time. This delay increases the average energy consumption of nodes, when  superframe order is high.\r\n</p>'),(17,21,'','bluetooth/piconet_density.jpg','<img src=\"_STATIC_URL_/ant/images/__solutions/ant/bluetooth/slave_degree.jpg\" alt=\"Slave density vs. no. of nodes\">\r\n\r\n<p>Data set for the exercise:</p>\r\n\r\n<pre>\r\n[8 nodes]\r\n-slave 6 1.000000\r\n-master 1 1.000000 1.000000 6.000000\r\n-S/S br 0 0.000000\r\n-M/S br 1 1.000000 0.000000 1.000000\r\nPiconet density = 1 / 8 = 0.12\r\nSlave degree = (6 + 0 + 1) / 1 = 7\r\n\r\n\r\n[16 nodes]\r\n-slave 12 1.000000\r\n-master 2 0.500000 1.000000 6.000000\r\n-S/S br 1 2.000000\r\n-M/S br 1 2.000000 0.500000 1.500000\r\nPiconet density = 2 / 16 = 0.12\r\nSlave degree = 14 / 2 = 7\r\n\r\n\r\n[24 nodes]\r\n-slave 18 1.000000\r\n-master 3 1.333333 1.333333 6.333333\r\n-S/S br 2 2.000000\r\n-M/S br 1 2.000000 0.333333 1.333333\r\nPiconet density = 3 / 24 = 0.12\r\nSlave degree = 21 / 3 = 7\r\n\r\n\r\n[32 nodes]\r\n-slave 25 1.000000\r\n-master 4 0.750000 0.750000 6.000000\r\n-S/S br 2 2.000000\r\n-M/S br 1 3.000000 0.500000 1.500000\r\nPiconet density = 4 / 32 = 0.12\r\nSlave degree = 28 / 4 = 7\r\n\r\n\r\n[40 nodes]\r\n-slave 28 1.000000\r\n-master 6 1.833333 1.833333 6.333333\r\n-S/S br 5 2.000000\r\n-M/S br 1 1.000000 0.000000 0.166667\r\nPiconet density = 6 / 40 = 0.15\r\nSlave degree = 34 / 6 = 5.66\r\n\r\n\r\n[48 nodes]\r\n-slave 37 1.000000\r\n-master 7 1.000000 1.142857 6.428571\r\n-S/S br 4 2.000000\r\n-M/S br 0 0.000000 0.000000 0.000000\r\nPiconet density = 7 / 48 = 0.14\r\nSlave degree = 41 / 7 = 5.85\r\n\r\n\r\n[56 nodes]\r\n-slave 41 1.000000\r\n-master 8 1.375000 1.500000 6.000000\r\n-S/S br 6 2.000000\r\n-M/S br 1 2.000000 0.125000 0.750000\r\nPiconet density = 8 / 56 = 0.14\r\nSlave degree = 48 / 8 = 6\r\n\r\n\r\n[64 nodes]\r\n-slave 49 1.000000\r\n-master 8 1.125000 1.125000 6.250000\r\n-S/S br 4 2.000000\r\n-M/S br 2 1.500000 0.125000 1.125000\r\nPiconet density = 8 / 64 = 0.12\r\nSlave degree = 55 / 8 = 6.87\r\n\r\n\r\n[72 nodes]\r\n-slave 54 1.000000\r\n-master 8 1.500000 1.500000 6.375000\r\n-S/S br 6 2.000000\r\n-M/S br 4 2.000000 0.500000 2.375000\r\nPiconet density = 8 / 72 = 0.11\r\nSlave degree = 64 / 8 = 8\r\n\r\n\r\n[80 nodes]\r\n-slave 60 1.000000\r\n-master 11 1.000000 1.181818 6.363636\r\n-S/S br 8 2.000000\r\n-M/S br 1 5.000000 0.363636 0.636364\r\nPiconet density = 11 / 80 = 0.13\r\nSlave degree = 69 / 11 = 6.27\r\n\r\n\r\n\r\n8, 0.12\r\n16, 0.12\r\n24, 0.12\r\n32, 0.12\r\n40, 0.15\r\n48, 0.14\r\n56, 0.14\r\n64, 0.12\r\n72, 0.11\r\n80, 0.13\r\n\r\n\r\n8, 7\r\n16, 7\r\n24, 7\r\n32, 7\r\n40, 5.66\r\n48, 5.85\r\n56, 6\r\n64, 6.87\r\n72, 8\r\n80, 6.27\r\n</pre>');
/*!40000 ALTER TABLE `ant_solution` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_theory`
--

DROP TABLE IF EXISTS `ant_theory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_theory` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `content` longtext NOT NULL,
  `objectives` longtext,
  `time_required` decimal(4,2) NOT NULL,
  `extra` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_theory`
--

LOCK TABLES `ant_theory` WRITE;
/*!40000 ALTER TABLE `ant_theory` DISABLE KEYS */;
INSERT INTO `ant_theory` VALUES (1,'Basics of Network Simulation','<h2>Introduction</h2>\r\n\r\n<p>Network Simulator version 2 (NS-2) is discrete event packet level simulator. The network simulator covers a very large number of application of different kind of protocols of different network types consisting of different network elements and traffic models. NS-2 is a package of tools that simulates behavior of networks such as creating network topologies, log events that happen under any load, analyze the events and understand the network. The aim of this first experiment is to learn how to use NS-2, to get acquainted with the simulated objects and understand the operations of network simulation. We will also look at how to analyze the outcome of a simulation.</p>\r\n\r\n\r\n<h2>Platform required to run network simulator</h2>\r\n\r\n<ul>\r\n<li>Unix and Unix like systems</li>\r\n<ul style=\"margin-left: 6px;\">\r\n<li>Linux</li>\r\n<li>Free BSD</li>\r\n<li>SunOS/Solaris</li>\r\n</ul>\r\n<li>Windows 95/98/NT/2000/XP (requires Cygwin)</li>\r\n</ul>\r\n\r\n\r\n<h2>Backend Environment of Network Simulator</h2>\r\n\r\n<p>Network Simulator is based on two languages: C++ and OTcl. OTcl is the object oriented version of Tool Command Language. While the core of NS-2 is written in C++, one uses OTcl to write simulation scripts. C++ helps in the following way:</p>\r\n<ul>\r\n<li>It helps to increase the efficiency of simulation.</li>\r\n<li>Its is used to provide details of the protocols and their operation.</li>\r\n<li>It is used to reduce packet and event processing time.</li>\r\n</ul>\r\n<p>OTcl helps in the following way:</p>\r\n<ul>\r\n<li>With the help of OTcl we can describe different network topologies</li>\r\n<li>It helps us to specify the protocols and their applications</li>\r\n<li>It allows fast development</li>\r\n<li>Tcl is compatible with many platforms and it is flexible for integration</li>\r\n<li>Tcl is very easy to use and it is available in free</li>\r\n</ul>\r\n<p>\r\nAnd of course, there is a linkage between C++ and OTcl, which allows us to run the simulation scripts.\r\n</p>\r\n\r\n\r\n<h2>Basics of Tcl Programming for NS-2</h2>\r\n\r\n<p>\r\nNetwork simulation with NS-2 would involve the following general steps:\r\n</p>\r\n<ol>\r\n<li>Initialization and termination aspects of network simulator object</li>\r\n<li>Defining the network topology: nodes, links, queues, mobility of nodes, if any</li>\r\n<li>Defining the network traffic: creating agents and their applications</li>\r\n<li>Setting trace for Network Animator (NAM) [optional]</li>\r\n<li>Tracing</li>\r\n</ol>\r\n\r\n<p>In this section, we provide a brief overview of the most commonly used features of NS-2. This summary has been prepared based on various tutorials on, and the manual for, NS-2. See the <a href=\"/ant/ant/1/references/\">References</a> section for some of the different tutorials available.</p>\r\n\r\n<p><strong>Initialization</strong></p>\r\n<p>To create a new simulator we write</p>\r\n<pre class=\"brush : bash;\"> set ns [new Simulator]\r\n</pre>\r\n<p>From the above command we get that a variable ns is being initialized by using the set command. Here the code <span class=\"syntax\">[new Simulator]</span> is a instantiation of the class Simulator which uses the reserved word <span class=\"syntax\">new</span>. So we can call all the methods present inside the class simulator by using the variable \'ns\'.</p>\r\n<p><strong>Creating the output files</strong></p>\r\n<pre class=\"brush : bash;\"># Create the trace files\r\n set tracefile [open out.tr w]\r\n $ns trace-all $tracefile\r\n\r\n# Create the nam files\r\n set namfile [open out.nam w]\r\n $ns namtrace-all $namfile\r\n</pre>\r\n<p>In the above we create a output trace file \'out.tr\' and a NAM visualization file \'out.nam\'. But in the Tcl script they are not called by their names declared, while they are called by the pointers initialized for them such as \'tracefile\' and \'namfile\' respectively.The line which starts with <span class=\"syntax\">#</span> are commented. The next line opens the file \'out.tr\' which is used for writing is declared \'w\'. The next line uses a simulator method <span class=\"syntax\">trace-all</span> by which we will trace all the events in a particular format.</p>\r\n<p>The termination program is done by using a \'finish\' procedure</p>\r\n<pre class=\"brush : bash;\"># Defining the \'finish\' procedure\'\r\n\r\nproc finish {} {\r\n     global ns tracefile namfile\r\n     $ns flush-trace\r\n     close $tracefile\r\n     close $namfile\r\n     exit 0\r\n}\r\n</pre>\r\n\r\n<p>In the above, the keyword <span class=\"syntax\">proc</span> is used to declare a procedure called \'finish\'. The keyword <span class=\"syntax\">global</span> is used to tell what variables are being used outside the procedure.</p>\r\n<p><span class=\"syntax\">flush-trace</span> is a simulator method that dumps the traces on the respective files. The command <span class=\"syntax\">close</span> is used to close the trace files and the command <span class=\"syntax\">exec</span> is used to execute the NAM visualization. The command <span class=\"syntax\">exit</span> closes the application and returns zero as default for clean exit.</p>\r\n\r\n<p>In ns we end the program by calling the \'finish\' procedure</p>\r\n<pre class=\"brush : bash;\"># End the program\r\n$ns at 125.0 \"finish\"\r\n</pre>\r\n<p>Thus the entire operation ends at 125 seconds.To begin the simulation we will use the command</p>\r\n<pre class=\"brush : bash;\"># Start the the simulation process\r\n$ns run\r\n</pre>\r\n\r\n<p><strong>Defining nodes, links, queues (topology)</strong></p>\r\n<p>Way to create a node:</p>\r\n<pre class=\"brush : bash;\">set n0 [$ns node]\r\n</pre>\r\n\r\n<p>In the above we created a node that is pointed by a variable n0. While referring the node in the script we use <span class=\"syntax\">$n0</span>. Similarly we create another node n2. Now we will set a link between the two nodes.</p>\r\n<pre class=\"brush : bash;\">$ns duplex-link $n0 $n2 10Mb 10ms DropTail\r\n</pre>\r\n\r\n<p>So we are creating a bi-directional link between nodes n0 and n2 with a capacity of 10 Mb/sec and a propagation delay of 10 ms.</p>\r\n\r\n<p>In NS an output queue of a node is implemented as a part of a link whose input is that node to handle the overflow at the queue. If the buffer capacity of the output queue is exceeded then the last packet arrived is dropped and here we will use a \'DropTail\' option. There are other queue types such as RED (Random Early Discard) mechanism, FQ (Fair Queuing), DRR (Deficit Round Robin), SFQ (Stochastic Fair Queuing) also available.</p>\r\n\r\n<p>Now we will define the buffer capacity of the queue related to the above link</p>\r\n<pre class=\"brush : bash;\"># Set queue size of the link\r\n$ns queue-limit $n0 $n2 20\r\n</pre>\r\n<p>So, if we summarize the above three things we get</p>\r\n<pre class=\"brush : bash;\"># Create nodes\r\n\r\nset n0 [$ns node]\r\nset n1 [$ns node]\r\nset n2 [$ns node]\r\nset n3 [$ns node]\r\nset n4 [$ns node]\r\nset n5 [$ns node]\r\n\r\n# Create links between the nodes\r\n\r\n$ns duplex-link $n0 $n2 10Mb 10ms DropTail\r\n$ns duplex-link $n1 $n2 10Mb 10ms DropTail\r\n$ns simplex-link $n2 $n3 0.3Mb 100ms DropTail\r\n$ns simplex-link $n3 $n2 0.3Mb 100ms DropTail\r\n$ns duplex-link $n0 $n2 0.5Mb 40ms DropTail\r\n$ns duplex-link $n0 $n2 0.5Mb 40ms DropTail\r\n\r\n# Set queue-size of the link (n2-n3) to 20\r\n$ns queue-limit $n2 $n3 20\r\n</pre>\r\n\r\n<h3>Agents and applications</h3>\r\n<p><strong>TCP</strong></p>\r\n<p>TCP is used to provide reliable transport of packets from one host to another host by sending acknowledgements on proper transfer or loss of packets. Thus, TCP requires bi-directional links in order for acknowledgements to return to the source.</p>\r\n<p>Now we will show how to set up tcp connection between two nodes</p>\r\n<pre class=\"brush : bash;\"># Setting a TCP connection\r\n\r\nset tcp [new Agent/TCP]\r\n$ns attach-agent $n0 $tcp\r\nset sink [new Agent/TCPSink]\r\n$ns attach-agent $n4 $sink\r\n$ns connect $tcp $sink\r\n$tcp set fid_ 1\r\n$tcp set packetSize_ 552\r\n</pre>\r\n<p>The command <span class=\"syntax\">set tcp [new Agent/TCP]</span> gives a pointer called \'tcp\' to the TCP agent object of ns. The command <span class=\"syntax\">$ns attach-agent $n0 $tcp</span> defines the source node of TCP connection. Next the command <span class=\"syntax\">set sink [new Agent/TCPSink]</span> defines the destination of TCP by a pointer called \'sink\'. The next command <span class=\"syntax\">$ns attach-agent $n4 $sink</span> defines the destination node as n4. Next, the command <span class=\"syntax\">$ns connect $tcp $sink</span> makes the TCP connection between the source and the destination i.e n0 and n4. When we have several flows (such as TCP, UDP) in a network, to identify these flows we set their flow ID by using the command <span class=\"syntax\">$tcp set fid_1</span>. In the last line we set the packet size of TCP as 552 byte. The default packet size of TCP is 1000 B.</p>\r\n\r\n<p><strong>FTP over TCP</strong></p>\r\n<p>File Transfer Protocol (FTP) is a standard mechanism provided by the Internet for transferring files from one host to another. FTP differs from other client server applications in that it establishes two connections between the client and the server. One connection is used for data transfer and other one is used for providing control information. FTP uses the services of the TCP. The well Known port 21 is used for control connections and the other port 20 is used for data transfer.</p>\r\n<p>Here we will learn in how to run a FTP connection over a TCP:</p>\r\n<pre class=\"brush : bash;\"># Initiating FTP over TCP\r\n\r\nset ftp [new Application/FTP]\r\n$ftp attach-agent $tcp\r\n</pre>\r\n<p>In above,the command <span class=\"syntax\">set ftp [new Application/FTP]</span> gives a pointer called \'ftp\' which indicates the FTP application. Next, we attach the ftp application with tcp agent as FTP uses the services of TCP.</p>\r\n\r\n<p><strong>UDP</strong></p>\r\n<p>The User datagram Protocol is one of the main protocols of the Internet protocol suite. UDP helps the host to send send messages in the form of datagrams to another host which is present in a Internet protocol network without any kind of requirement for channel transmission setup. UDP provides a unreliable service and the datagrams may arrive out of order, appear duplicated, or go missing without notice. UDP assumes that error checking and correction is either not necessary or performed in the application, avoiding the overhead of such processing at the network interface level. Time-sensitive applications often use UDP because dropping packets is preferable to waiting for delayed packets, which may not be an option in a real-time system.</p>\r\n<p>Now we will learn how to create a UDP connection in network simulator.</p>\r\n<pre class=\"brush : bash;\"># Setup a UDP connection\r\nset udp [new Agent/UDP]\r\n$ns attach-agent $n1 $udp\r\n$set null [new Agent/Null]\r\n$ns attach-agent $n5 $null\r\n$ns connect $udp $null\r\n$udp set fid_ 2\r\n</pre>\r\n\r\n<p>The command <span class=\"syntax\">set udp [new Agent/UDP]</span> gives a pointer called \'udp\' which indicates the udp agent which is a object of ns. Then the command <span class=\"syntax\">$ns attach-agent $n1 $udp</span> defines the source node of UDP connection. Next the command <span class=\"syntax\">set null [new Agent/Null]</span> defines the destination of udp by a pointer called null. The next command <span class=\"syntax\">$ns attach-agent $n5 $null</span> defines the destination node as n5. Next, the command <span class=\"syntax\">$ns connect $udp $null</span> makes the UDP connection between the source and the destination i.e n1 and n5. To identify a particular flow we mark it using the command <span class=\"syntax\">$udp set fid_2</span>.</p>\r\n\r\n<p><strong>Constant Bit Rate (CBR)</strong></p>\r\n<p>Constant Bit Rate (CBR) is a term used in telecommunications, relating to the quality of service.When referring to codecs, constant bit rate encoding means that the rate at which a codec\'s output data should be consumed is constant. CBR is useful for streaming multimedia content on limited capacity channels since it is the maximum bit rate that matters, not the average, so CBR would be used to take advantage of all of the capacity. CBR would not be the optimal choice for storage as it would not allocate enough data for complex sections (resulting in degraded quality) while wasting data on simple sections.</p>\r\n<p><strong>CBR over UDP Connection</strong></p>\r\n<pre class=\"brush : bash;\"># Setup CBR over UDP\r\n\r\nset cbr [new Application/Traffic/CBR]\r\n$cbr attach-agent $udp\r\n$cbr set packetSize_ 1000\r\n$cbr set rate_ 0.01Mb\r\n$cbr set random_ false\r\n</pre>\r\n<p>In the above we define a CBR connection over a UDP one. Well we have already defined the UDP source and UDP agent as same as TCP. Instead of defining the rate we define the time interval between the transmission of packets in the command <span class=\"syntax\">$cbr set rate_ 0.01Mb</span>. Next, with the help of the command <span class=\"syntax\">$cbr set random_ false</span> we can set random noise in cbr traffic. We can keep the noise by setting it to <span class=\"syntax\">false</span> or we can set the noise on by the command <span class=\"syntax\">$cbr set random_ 1</span>. We can set by packet size by using the command <span class=\"syntax\">$cbr set packetSize_</span>. The packet size is specified in bytes.</p>\r\n\r\n<p><strong>Scheduling Events</strong></p>\r\n<p>In ns the tcl script defines how to schedule the events or in other words at what time which event will occur and stop. This can be done using the command <span class=\"syntax\">$ns at time event</span>. Here in our program we will schedule when the ftp and cbr traffic should start and stop.</p>\r\n<pre class=\"brush : bash;\"># Scheduling the events\r\n\r\n$ns at 0.1 \"$cbr start\"\r\n$ns at 1.0 \"$ftp start\"\r\n$ns at 124.0 \"$ftp stop\"\r\n$ns at 124.5 \"$cbr stop\"\r\n</pre>\r\n\r\n<p><strong>Network Animator (NAM)</strong></p>\r\n<p>\r\nWhen we will run the above program in ns then we can can visualize the network in the NAM. But instead of giving random positions to the nodes, we can give suitable initial positions to the nodes and can form a suitable topology. So, in our program we can give positions to the nodes in NAM in the following way</p>\r\n<pre class=\"brush : bash;\"># Give position to the nodes (for NAM)\r\n\r\n$ns duplex-link-op $n0 $n2 orient-right-down\r\n$ns duplex-link-op $n1 $n2 orient-right-up\r\n$ns simplex-link-op $n2 $n3 orient-right\r\n$ns simplex-link-op $n3 $n2 orient-left\r\n$ns duplex-link-op $n3 $n4 orient-right-up\r\n$ns duplex-link-op $n3 $n5 orient-right-down\r\n</pre>\r\n<p>We can also define the color of CBR and TCP packets for identification in NAM. For this we use the following command</p>\r\n<pre class=\"brush : bash;\"># Marking the flows (for NAM)\r\n$ns color1 Blue\r\n$ns color2 Red\r\n</pre>\r\n<p>To view the network animator we need to type the command: nam</p>\r\n<p class=\"note\" style=\"padding-left: 60px; padding-right: 20px;\">\r\n Network Animator could only be run on a desktop. This Virtual Lab does not provide any option to visualize the NAM output (apart from a few screenshots). Henceforth, we would skip creating NAM trace files in our code.\r\n</p>\r\n\r\n<h3>Tracing</h3>\r\n\r\n<p><strong>Tracing Objects</strong></p>\r\n<p>NS-2 simulation can produce visualization trace as well as ASCII file corresponding to the events that are registered at the network. While tracing ns inserts four objects: EnqT, DeqT, RecvT, and DrpT. EnqT registers information regarding the arrival of packet and is queued at the input queue of the link. When overflow of a packet occurs, then the information of the dropped packet is registered in DrpT. DeqT holds the information about the packet that is dequeued instantly. RecvT hold the information about the packet that has been received instantly.</p>\r\n<center><img class=\"diagram\" src=\"_STATIC_URL_/ant/images/theory/ant/01/ns2_trace_file.png\" alt=\"NS-2 trace file format\" width=\"679\" height=\"114\">Figure-01: NS-2 trace file format (wired networks)</center>\r\n<p><strong>Structure of Trace Files</strong></p>\r\n\r\n<p>The following describe about the structure of the trace files produced for wired networks. The format of the trace files are different for wireless networks, and will be discussed in the <a href=\"/ant/ant/6/theory/\">Experiment on WiMax</a>.</p>\r\n\r\n<ol><ol>\r\n<li>The first field is event.It gives you four possible symbols \'+\' \'-\' \'r\' \'d\'. These four symbols correspond respectively to enqueued, dequeued, received and dropped.</li>\r\n<li>The second field gives the time at which the event occurs</li>\r\n<li>The third field gives you the input node of the link at which the event occurs</li>\r\n<li>The fourth field gives you the the output node at which the event occurs</li>\r\n<li>The fifth field shows the information about the packet type.i.e whether the packet is UDP or TCP</li>\r\n<li>The sixth field gives the packet size</li>\r\n<li>The seventh field give information about some flags</li>\r\n<li>The eight field is the flow id(fid) for IPv6 that a user can set for each flow in a tcl script.It is also used for specifying the color of flow in NAM display</li>\r\n<li>The ninth field is the source address</li>\r\n<li>The tenth field is the destination address</li>\r\n<li>The eleventh field is the network layer protocol\'s packet sequence number</li>\r\n<li>The last field shows the unique id of packet</li>\r\n</ol></ol>\r\n<p>Following are trace of two events:</p>\r\n<pre>r 1.84471 2 1 cbr 210 ------- 1 3.0 1.0 195 600\r\nr 1.84566 2 0 ack 40 ------- 2 3.2 0.1 82 602\r\n</pre>','<ul>\r\n<li>Learn the basic concepts about open source network simulator NS-2, and how to download, install and work with NS-2</li>\r\n<li>Defining the different agents and their applications like TCP, FTP over TCP, UDP, CBR over UDP</li>\r\n<li>Identifying and solving typical errors encountered during installation of NS-2</li>\r\n</ul>','3.00','<p>\r\nNetwork simulation has become an integral part of most research works in the field of Computer Networks. Whether it is for understanding the behaviour of existing protocols, or to determine the performance of a new protocol, one doesn\'t often get access to real network devices. This gap has been filled up by network simulation to a large extent.\r\n</p>\r\n\r\n<p>\r\nIn this experiment we will get familiar with one of the most popular open source network simulators, Network Simulator version 2 (ns2). The experiment makes one familiar with fundamental concepts of ns2, and provides step-by-step instructions on how to install it.\r\n</p>'),(2,'Simulating a Local Area Network','<h2>Local Area Network</h2>\r\n\r\n<p>\r\nA local area network (LAN) provides networking capability to a group of \r\ncomputers in close proximity to each other such as in an office building, a \r\nschool, or a home. A LAN is useful for sharing resources like files, printers, \r\ngames or other applications. A LAN is often connected to other LANs, which in \r\nturn are connected Internet.\r\n</p>\r\n\r\n\r\n<h2>LAN Topologies</h2>\r\n\r\n<p>\r\nNodes in LAN are interconnected using one of four basic configurations:\r\n</p>\r\n\r\n<ul>\r\n    <li>Bus topology</li>\r\n    <li>Star topology</li>\r\n    <li>Ring topology</li>\r\n    <li>Mesh topology</li>\r\n</ul>\r\n\r\n<p>\r\n<strong>Bus topology:</strong> In case of a bus topology, each machine is \r\nconnected to a single cable through some kind of connector. Terminators\r\n(resistors) are required at each end of the bus cable to prevent the signal from \r\nbouncing back and forth on the cable.\r\n</p>\r\n\r\n<p>\r\n<strong>Star topology:</strong> In local area networks with forming a star \r\ntopology, each network host is connected to a central hub (a signal booster or \r\nrepeater). In contrast to the bus topology, the star topology connects each node \r\nto the hub with a point-to-point connection. All traffic in the network has to \r\npass through the central hub.\r\n</p>\r\n\r\n<p>\r\n<strong>Ring Topology:</strong>  In local area networks where the ring topology \r\nis used, each computer is connected to the network in form of a closed loop or \r\nring. Each machine has a unique address for their identification. Ring \r\ntopologies typically utilize a token passing scheme to control access to the \r\nmedium. By utilizing this scheme, only one machine can transmit on the network \r\nat a time.\r\n</p>\r\n\r\n<p>\r\n<strong>Mesh Topology:</strong> In a mesh network where all nodes are connected \r\nto each other through one or more hops.\r\n</p>\r\n\r\n\r\n<h2>MAC Protocols</h2>\r\n\r\n\r\n<p>\r\nMedium Access Control (MAC) protocols allows machines to access the \r\ncommunication medium, and thereby to \"take turns\" at transmitting data.\r\n</p>\r\n\r\n<p>\r\nMAC protocols could be broadly classified into three types:\r\n</p>\r\n\r\n<ol>\r\n    <li>Channel partitioning based protocols (TDMA, CDMA)</li>\r\n    <li>Random access based protocols (ALOHA, CSMA)</li>\r\n    <li>Taking turns (token passing, polling)</li>\r\n</ul>\r\n\r\n<h3>Contention Based Protocol: Carrier Sense Multiple Access / Collision \r\nDetection (CSMA/CD)</h3>\r\n\r\n<p>In Carrier Sense Multiple Access with Collision Detection all work stations \r\nlisten to the shared medium. If there is no ongoing transmission (by other \r\ndevices), a workstation can transmit. However, if someone else is transmitting, \r\nthe workstation backs off and waits. If two or more workstations sense that the \r\nmedium is free, and start transmitting at the same time, a collision occurs!\r\nThe end devices are however capable of detecting this collision (from the energy\r\nlevel of the medium), and they stop transmitting under such scenario. Each \r\nworkstation waits for a random amount of time and tries again. CSMA/CD is non \r\ndeterministic protocol. This works only on wired networks -- collisions can\'t be\r\ndetected on a wireless network. CSMA/CA based protocols are used instead.\r\n</p>\r\n\r\n<h3>Taking turns</h3>\r\n\r\n<p>\r\nIn this protocol each workstation takes turn in transmitting. A very common \r\nexample is token ring LAN. Here a software token is passed from one device to \r\nthe next. Token ring is an example of deterministic protocol.\r\n</p>\r\n\r\n\r\n<h2>Ethernet</h2>\r\n\r\n<p>\r\nEthernet is the most popular CSMA/CD protocol. It is standardized as IEEE 802.3.\r\nIn Ethernet when only one computer needs to transmit data, it can immediately \r\n(almost) access the line. However, when many computers want to access the medium \r\nfrequently it generates a high traffic. This results in high average waiting \r\ntime and higher chances of collision. In other words, when the size of a LAN\r\nincreases, it\'s performance decreases. For example, an Ethernet network with\r\nmore than 5% collision rate could indicate that the network is getting loaded.\r\nWhen the rate crosses 10%, the network could be considerably overloaded\r\n<a href=\"/ant/ant/2/references/\">[v]</a>.\r\n</p>\r\n\r\n<h3>Ethernet Frame Structure</h3>\r\n\r\n<p>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/02/lan.png\' \r\nalt=\'Ethernet frame structure\' class=\'diagram\'>\r\nAn Ethernet frame consists of the following fields:\r\n</p>\r\n\r\n<ul>\r\n    <li>\r\n    <strong>Preamble:</strong> 7 bytes with pattern 10101010 followed by one \r\n    byte with pattern 10101011. It is used to synchronize the receiver, sender.\r\n    </li>\r\n    <li>\r\n    <strong>Addresses:</strong> Destination and source MAC address each 6 bytes \r\n    long.\r\n    </li>\r\n    <li>\r\n    <strong>Type:</strong> It indicates the  higher layer protocol.\r\n    </li>\r\n    <li>\r\n    <strong>CRC:</strong> Cyclic Redundancy Check is used for error detection,\r\n    and correction to some extent.\r\n    </li>\r\n</ul>\r\n\r\n\r\n<h3>Ethernet Versions</h3>\r\n\r\n<p>\r\nFollowing are the different categories of Ethernet available commercially:\r\n</p>\r\n\r\n<ul>\r\n    <li>\r\n    <strong>10Base2:</strong> It is commonly called thin Ethernet. It operates \r\n    at 10 Mbps and its maximum segment length is of 200m.\r\n    </li>\r\n    <li>\r\n    <strong>10Base5:</strong> Also known as thick Ethernet. It also operates at \r\n    10 Mbps, but could extend upto a maximum distance of 500m.\r\n    </li>\r\n    <li>\r\n    <strong>10BaseT:</strong> An Ethernet standard that transmits at 10 Mbps \r\n    basebad signal over twisted wire pairs (telephone wire). Its maximum segment \r\n    length is of 100m.\r\n    </li>\r\n    <li>\r\n    <strong>10BaseF:</strong> This kind of Ethernet use fiber optic cable. \r\n    Its maximum segment length is of 200m.\r\n    </li>\r\n    <li>\r\n    <strong>GbE:</strong> Gigabit Ethernet, which operates at 1000 Mbps.\r\n    </li>\r\n</ul>\r\n</p>\r\n\r\n\r\n<h2>Simulating a LAN using Network Simulator 2</h2>\r\n\r\n<p>The network simulator simulates the three levels related to local area \r\nnetwork. They are:\r\n</p>\r\n<ol>\r\n    <li> Link layer protocols such as ARQ</li>\r\n    <li> MAC protocol</li>\r\n    <li> Physical Channel</li>\r\n</ol>\r\n\r\n\r\n<p>\r\nThere are seven required parameters to setup a LAN with ns2:\r\n</p>\r\n\r\n<ol>\r\n    <li>A group of nodes which are to be connected to form a LAN</li>\r\n    <li>Delay for the link</li>\r\n    <li>Bandwidth of the link</li>\r\n    <li>Link layer type e.g. \"LL\"</li>\r\n    <li>Interfacing queue e.g.\"Queue Drop Tail\"</li>\r\n    <li>MAC layer type</li>\r\n    <li>Channel type</li>\r\n</ol>\r\n\r\n\r\n<p>\r\nThe following code shows how to setup a LAN with three nodes forming a bus \r\ntopology, CSMA/CD based MAC protocol and a DropTail queue attached to the link:\r\n</p>\r\n\r\n<pre class= \"brush : bash;\">\r\nset lan [$ns newLan \"$n3 $n4 $n5\" 0.5Mb 40ms LL Queue/DropTail MAC/Csma/Cd Channel]\r\n</pre>\r\n\r\n<p>\r\nThe nodes <em>$n3</em>, <em>$n4</em>, <em>$n5</em> must be created as usual\r\nbefore the above statement could be executed. However, the above creates nodes\r\nof a different type: <em>LanNode</em>. This implementation of node helps to\r\nsimulate the contention over a shared medium as found in a LAN\r\n<a href=\"/ant/ant/2/references/\">[i, vi]</a>.\r\n</p>','<ul>\r\n  <li>Learn about Local Area Network (LAN); different topologies and protocols uses in LAN</li>\r\n<li>Learn about simulating a LAN using ns2</li>\r\n</ul>','3.00','<p>\r\nThe increasing demand of computers in universities, organizations, offices leads to the development of local area network(LAN). LAN allows to interconnect a number of independent devices with each other within a limited area.\r\n</p>\r\n\r\n<p>\r\nIn this experiment we will learn about the simulation of different network topology used in LAN using TCP/UDP connection and how the FTP/CBR will run over it. \r\n</p>'),(3,'Measuring Network Performance','<h2>Network Performance Evaluation</h2>\r\n\r\n<p>\r\nFor a given network, one might be interested to know how well it is performing. One might also wish to know what could be done to further improve the performance, or if the network is giving the peak performance. Thus, one needs to do a comparative study of the network by considering different options. This performance evaluation helps the user to determine the suitable network configuration that serves him best.\r\n</p>\r\n<p>\r\nFor example consider a new startup organization which has setup its own web portal. As the portal gradually becomes popular then network traffic increases which would degrade its performance. Therefore, one should have a well configured network with proper load balancing capabilities.\r\n</p>\r\n\r\n\r\n<h2>Performance Evaluation Metrics</h2>\r\n\r\n<p>\r\nBefore we can proceed with performance evaluation, we must choose the different metrics that would help us in making comparisons. There could be different metrics to determine the performance like throughput, delay, jitter, packet loss. The choice of metric would depend upon the purpose the network has been setup for. The metrics could be related to the different layers of the network stack. For example, TCP throughput is based on the application layer, whereas IP round trip time is based on the network layer. For example, a network supporting multimedia applications should have minimum delay and jitter.Packet loss might not be a critical issue for such network. However, packet loss might be a considerable factor for networks supporting textual data oriented applications, say someone downloading by FTP.\r\n</p>\r\n<p>\r\nOnce the metrics have been chosen, one goes for their quantitative evaluation by subjecting the network under diverse conditions. For example, one could make step by step increments in bandwidth of the links, which in turn improve the throughput. However, the throughput might get saturated beyond the certain point. That is, further increase in bandwidth would not improve throughput. Thus, the optimum value of bandwidth has been determined.\r\n</p>\r\n<p>\r\nThe table below shows different metrics of evaluation, and categories they are appropriate for <a href=\"/ant/ant/3/references/\">[iv]</a>.\r\n</p>\r\n\r\n<table class=\"techno\">\r\n    <thead>\r\n        <tr>\r\n            <th>Category</th>\r\n            <th>Metric</th>\r\n            <th>Unit</th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        <tr>\r\n            <td>Productivity</td>\r\n            <td>Throughput</td>\r\n            <td>Bytes per second</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Responsiveness</td>\r\n            <td>Delay, jitter</td>\r\n            <td>seconds</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Utilization</td>\r\n            <td>Channel utilization</td>\r\n            <td>Percentage of time busy</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Loss</td>\r\n            <td>Packet drops, Retransmission count</td>\r\n            <td>Number</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Buffer space</td>\r\n            <td>Queue size, overflow or underflow rate</td>\r\n            <td>Bytes</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<p>\r\nIt might not be always possible or feasible to obtain best performance from a network due to various factors like high cost,complexity, compatibility. In such cases one would like to obtain optimum performance by balancing different factors.\r\n</p>\r\n<p>\r\nFollowing are some of the performance measurement metrics:\r\n<ul>\r\n    <li><strong> Latency:</strong> It can take a long time for a packet to be delivered across intervening networks. In reliable protocols where a receiver acknowledges delivery of each chunk of data, it is possible to measure this as round-trip time.</li>\r\n    <li><strong> Packet loss:</strong> In some cases, intermediate devices in a network will lose packets. This may be due to errors, to overloading of the intermediate network, or to intentional discarding of traffic in order to enforce a particular service level.</li>\r\n    <li><strong> Retransmission:</strong> When packets are lost in a reliable network, they are retransmitted. This incurs two delays: First, the delay from re-sending the data; and second, the delay resulting from waiting until the data is received in the correct order before forwarding it up the protocol stack.</li>\r\n    <li><strong>Throughput:</strong> The amount of traffic a network can carry is measured as throughput, usually in terms such as kilobits per second. Throughput is analogous to the number of lanes on a highway, whereas latency is analogous to its speed limit.</li>\r\n</ul>\r\n</p>\r\n<p>\r\n\r\n\r\n<h2>Parameters Affecting the Performance of Networks</h2>\r\n\r\n<p>\r\nDifferent parameters can together or independently determine how well a network would perform. A few such are mentioned below:\r\n<ul>\r\n<li><strong>Bandwidth:</strong> Its is the maximum data transfer rate which a link allows.It is expressed in bits per second(bps).</li>\r\n\r\n<li><strong>Propagation Delay:</strong> It is the amount of time required to for a packet to travel from one node to another.If the propagation delay is high then throughput will be low i.e they are inversely proportional to each other.</li>\r\n\r\n<li><strong>Queue type and queue size:</strong> The queue of a node is implemented as a part of a link whose input is that node to handle the overflow at the queue.But if the buffer capacity of the output queue is exceeded then the last packet arrived is dropped.We do set the buffer capacity by using queue size.</li>\r\n</ul>\r\n</p>\r\n\r\n\r\n<h2>Performance Evaluation Techniques</h2>\r\n\r\n<p>\r\nBefore starting with tuning the performance of a network one must remember that the performance, to some extent, depends on the workload as well as the topology. A given topology might give different throughputs under CBR and exponential traffic. Keeping this in mind, one can go for studying an actual network. Otherwise one can simulate its performance using suitable parameters. these simulations would largely depend on queuing theory.\r\n</p>\r\n\r\n\r\n<h3>Network Performance Evaluation using NS-2</h3>\r\n\r\n<p>\r\nIn this section we discuss how to evaluate performance of a network by simulating it with ns2.\r\n\r\n<ul>\r\n<li>Choose and generate a network topology to be used throughout the simulation. This could be a wired network, in which case the topology remains fixed. However, for a wireless network with mobile nodes the topology would change with time, or randomly.</li>\r\n\r\n<li>Once the topology has been generated, traffic source(s) and destination(s) are fixed. Assign suitable traffic sources to the source nodes, and traffic sinks to the destination nodes. </li>\r\n\r\n<li>Some of the parameters that can be used for comparative study of performance of the network are: link bandwidth, propagation delay, node queue type. For example: In ns2 we do create a link by using this code: \r\n\r\n<pre class=\"brush: bash;\">\r\n$ns simplex-link $n2 $n3 0.3Mb 100ms DropTail\r\n</pre>\r\nIn this code there could be three parameters namely bandwidth, propagation delay and queue type.\r\n<br />\r\n We can vary these parameters and could possibly obtain different throughputs. From there we can determine the conditions that provide higher throughput values.In general, we can alter different parameters and study their effects on one or more performance metrics and thereby filter out the combination of parameters that gives best performance.</li>\r\n \r\n<li>Performance of the network can be determined by considering different metrics for example \'Throughput\'</li>\r\n\r\n<li>We can vary these parameters and could possibly obtain different throughputs, which can be plotted using xgraph</li>\r\n\r\n<li>From there we can determine the conditions that provide higher throughput values</li>\r\n\r\n<li>Make suitable combinations with the parameters that wil bring some changes in the throughput</li>\r\n\r\n<li>Use the best combination of parameters which will bring the best throughput and implement it</li>\r\n\r\n<li>We are considering only one performance metric i.e throughput in our experiment.Other metrics like packet loss,latency,retransmission can measured to evaluate the performance of a network in a more accurate way which will help us to setup the network in a proper way.</li>\r\n</ul>\r\n</p>','<ul>\r\n  <li>Get familiar with the concept of network performance evaluation, and different related metrics</li>\r\n  <li>Get an overview on bandwidth sharing by multiple traffic flows</li>\r\n  <li>Identify bottlenecks in a network</li>\r\n</ul>','3.00','<p>\r\nThe size and scope of the computer networks are increasing day by day. So measurement is necessary for learning and improving the system behavior. Network performances are measured by calculating bandwidth, delay, throughput etc. \r\n</p>\r\n\r\n<p>\r\nIn this experiment we will learn different types of metrics used for measuring the network performance and analyze the performance by different types of curve used in different scenario.\r\n</p>'),(4,'Simulation of a Satellite Network','<h2>Satellite</h2>\r\n<p>The word &lsquo;Satellite&rsquo; comes from the Latin word &lsquo;Satellit&rsquo;&nbsp; meaning an attendant, who is constantly revolving&nbsp; and attaining a larger body.Figure-01 shows a picture of satellite.</p><center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/04/pic1.png\' alt=\'Sat pic-1\' class=\'diagram\' /> Figure-01: Picture of a Satellite </center> \r\n\r\n<p>A satellite is kept in a mathematical calculable path called orbit, around another planet to collect information or communication.Figure-02 shows different satellite orbits.Here two different types of satellite orbits[ii] are discussed namely, Geostationary Orbit and Low Earth Orbit. </p><center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/04/pic3.png\' alt=\'Sat pic-3\' class=\'diagram\' />  Figure-02: Types of Satellite Orbit</center>\r\n<p><strong>Geostationary Orbit</strong></p>\r\n<p>The rotational period of Geostationary Orbit<strong> </strong>is equal to that of earth. The geostationary satellite appear to be stationary from the earth surface as the earth and geostationary satellite move with the same speed. The orbit has zero inclination located directly above the equator (equatorial orbit ). </p>\r\n<p>The geostationary earth orbit satellites are modelled by \"bent pipe\" repeaters which receives radio frequency by an uplink channel and piped to corresponding downlink[i].</p>\r\n\r\n<p>&nbsp;<strong>Low Earth Orbit</strong></p>\r\n<p>A low earth orbit (LEO), circles close to the Earth. Generally, LEOs have altitudes between 500 and 2,000 km above the Earth&rsquo;s surface. A special type of LEO is the Polar Orbit. The polar orbit is a LEO with a high inclination angle (close to 90degrees). So the LEO satellite move around the poles.  Iridium and Teledesic are example of polar orbiting satellite systems and can be modelled in ns.</p>\r\n<p><strong>Courtesy:</strong> The following texts and ns codes are copied from the \"The ns Manual, The VINT project, chapter-17 Satellite Networking in ns [i] \". For further details please refer the ns manual. </p>\r\n<h2>Simulating a Satellite network in ns2</h2>\r\n<p class=\"Textbody\">we could introduce the following positions at the beginning of simulation script in order to correctly configure the terminals and satellite objects.</p>\r\n<pre class=\"brush: bash;\"># Set these global options for the satellite terminals\r\nglobal opt\r\nset opt(chan)		Channel/Sat\r\nset opt(bw_up) 		2Mb 		# uplink bandwidth\r\nset opt(bw_down) 	2Mb 		# downlink bandwidth\r\nset opt(phy) 		Phy/Sat\r\nset opt(mac) 		Mac/Sat\r\nset opt(ifq) 		Queue/DropTail\r\nset opt(qlim) 		50		     # queue size (pkts)\r\nset opt(ll)		LL/Sat\r\nset opt(wiredRouting) 	OFF;\r\nset opt(alt)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 780;&nbsp;&nbsp;&nbsp; # Polar satellite altitude (Iridium)\r\nset opt(inc)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 86.4;&nbsp; 	  # Orbit inclination w.r.t. Equator&nbsp; </pre>\r\n\r\n<p>Specifically, the array opt defines the type of the objects that make up a terminal node and configure their attributes. Then, configure the satellite object and terminals.</p>\r\n<p>There are three different types of nodes in satellite network:</p>\r\n<ul>\r\n<li>Geostationary satellite nodes</li>\r\n<li>Terminal nodes (placed on the Earth\'s surface)</li>\r\n<li>Non-geostationary satellite nodes</li>\r\n</ul>\r\n<p class=\"Textbody\">&nbsp;<h2>Geostationary satellite nodes</h2> A geostationary satellite is specified by its longitude above the equator. The longitude ranges from [-180,180] degrees. Two types of geostationary nodes exist: ``geo\'\' (for processing satellites) and ``geo-repeater\'\' (for bent-pipe satellites).&nbsp;&nbsp;</p>\r\n<pre class=\"brush: bash;\">\r\n# Configure and create the satellite node “n1”\r\n$ns node-config -satNodeType geo (or ``geo-repeater\'\') \\\r\n                -phyType Phy/Repeater \\\r\n		        -channelType $opt(chan) \\\r\n			    -downlinkBW $opt(bw_down) \\\r\n			    -wiredRouting $opt(wiredRouting)\r\nset n1 [$ns node]\r\n$n1 set-position $lon; # in decimal degrees</pre>\r\n\r\n<p class=\"Textbody\"><h2>Terminal nodes</h2> A terminal node[i] is specified by its latitude and longitude. Latitude ranges from [-90, 90]&nbsp; and longitude ranges from [-180, 180], with negative values corresponding to south and west, respectively.</p>\r\n<pre class=\"brush:bash;\">\r\n# Configure and create the terminal node “n2”\r\n$ns node-config -satNodeType terminal \\\r\n                -llType $opt(ll) \\			#Link layer\r\n                -ifqType $opt(ifq) \\		#interface queue type\r\n                -ifqLen $opt(qlim) \\		#interface queue length\r\n                -macType $opt(mac) \\	 	#MAC type\r\n                -phyType $opt(phy) \\		#network interface type\r\n                -channelType $opt(chan) \\		#channel type\r\n                -downlinkBW $opt(bw_down) \\ 	#downlink bandwidth\r\n                -wiredRouting $opt(wiredRouting)\r\n\r\nset n2 [$ns node]\r\n$n2 set-position $lat $lon;	# in decimal degrees</pre>\r\n\r\n<h2>Polar orbiting satellite nodes(Non-geostationary satellite)</h2>\r\n<p class=\"Textbody\">Satellite orbits are usually specified by six parameters: altitude, semi-major axis, eccentricity, right ascension of ascending node, inclination, and time of perigee passage.</p>\r\n<p class=\"Textbody\">The polar orbiting satellites in ns have purely circular orbits, so the orbits include&nbsp; parameters altitude, inclination, longitude, alpha and plane.</p>\r\n<ul>\r\n<li><strong>Altitude</strong> is specified in kilometers above the Earth\'s surface.</li>\r\n<li><strong>Inclination</strong> can range from [0.180]degrees with 90&nbsp; corresponding to pure polar orbits and angles greater than 90 degrees corresponding to &ldquo;retrograde\'\' orbits. The ascending node refers to the point where the footprint of the satellite orbital track crosses the equator moving from south to north. In this simulation model,</li>\r\n<li><strong>Longitude of ascending node</strong> specifies the earth-centric longitude at which the satellite\'s nadir point crosses the equator moving south to north. Longitude of ascending node can range from [-180,180] degrees.</li>\r\n<li><strong>Alpha</strong>, specifies the initial position of the satellite along this orbit, starting from the ascending node. For example, an alpha of 180 degrees indicates that the satellite is initially above the equator moving from north to south. Alpha can range from [0,360] degrees.</li>\r\n<li><strong>Plane</strong>, is specified when creating polar satellite nodes- all satellites in the same plane are given the same plane index.</li>\r\n</ul>\r\n<pre class=\"brush: bash;\">\r\n# Configure and create the polar orbitting satellite nodes “n3”\r\n# Nodes 0-99 are satellite nodes; 100 and higher are earth terminals\r\n\r\n$ns node-config -satNodeType polar \\\r\n		-llType $opt(ll) \\		#Link layer\r\n		-ifqType $opt(ifq) \\		#interface queue type\r\n		-ifqLen $opt(qlim) \\		#interface queue length\r\n		-macType $opt(mac) \\		#MAC type\r\n		-phyType $opt(phy) \\		#network interface type\r\n		-channelType $opt(chan) \\	#channel type\r\n		-downlinkBW $opt(bw_down) \\	#downlink bandwidth\r\n		-wiredRouting $opt(wiredRouting) \r\n\r\nset alt $opt(alt)\r\nset inc $opt(inc)\r\n\r\nset n3 [$ns node]\r\n$n3 set-position $alt $inc $lon $alpha $plane  #set the parameters</pre>\r\n\r\n\r\n<h2>Satellite links</h2>\r\n<p>Satellite links[i] transmit and receive interfaces must be connected to different channels, and there is no ARP implementation in satellite links.</p>\r\n<p>Network interfaces can be added with the following instproc:</p>\r\n<pre class=\"brush: bash;\">$node add-interface $type $ll $qtype $qlim $mac $mac_bw $phy</pre>\r\n<p class=\"Textbody\">The add-interface is eithere a add-gsl or add-isl. The following parameters must be provided:</p>\r\n<ul>\r\n<li><strong>type</strong>: It is used to identify the different types of links: geo or polar for links from a terminal to a geo or polar satellite, respectively, gsl and gsl-repeater for links from a satellite to a terminal, and intraplane, interplane, and crossseam ISLs.</li>\r\n<li><strong>ll</strong>:The link layer type (class LL/Sat is currently the only one defined).</li>\r\n<li><strong>qtype</strong>:The queue type (e.g., class Queue/DropTail).</li>\r\n<li><strong>qlim</strong>:The length of the interface queue, in packets.</li>\r\n<li><strong>mac</strong>:The MAC type. Currently, two types are defined: class Mac/Sat- a basic MAC for links with only one receiver (i.e., it does not do collision detection), and Class Mac/Sat/UnslottedAloha- an implementation of unslotted Aloha.</li>\r\n<li><strong>mac_bw</strong>:The bandwidth of the link is set by this parameter, which controls the transmission time how fast the MAC sends.</li>\r\n<li><strong>phy</strong>:The physical layer- currently two Phys (Class Phy/Sat and Class Phy/Repeater) are defined. The class Phy/Sat just pass the information up and down the stack- as in the wireless code, a radio propagation model could be attached at this point. The class Phy/Repeater pipes any packets received on a receive interface straight through to a transmit interface.</li>\r\n</ul>\r\n<p class=\"Textbody\">An ISL(Inter Satellite Link) can be added between two nodes using the following instproc:</p>\r\n<pre class=\"brush: bash;\">$ns add-isl $ltype $node1 $node2 $bw $qtype $qlim</pre>\r\n<p class=\"Textbody\">This creates two channels, and appropriate network interfaces on both nodes, and attaches the channels to the network interfaces. The bandwidth of the link is set to bw. The linktype (ltype) must be specified as either intraplane, interplane, or crossseam.</p>\r\n<p class=\"Textbody\">A GSL(Ground to Satellite Link) involves adding network interfaces and a channel on board the satellite, and then defining the correct interfaces on the terrestrial node and attaching them to the satellite link, as follows:</p>\r\n<pre class=\"brush: bash;\">$node add-gsl $type $ll $qtype $qlim $mac $bw_up $phy \\\r\n&nbsp;&nbsp; [$node_satellite set downlink_] [$node_satellite set uplink_]</pre>\r\n<p>The type must be either geo or polar.The command setups a bidirectional connection between satellite node and the terminal node using parameters previously indicated opt.</p>\r\n<h2>Handoffs</h2>\r\n<p>Satellite handoff [i] modelling is used in LEO satellite network simulations.There are two types of links to polar orbiting satellites that must be handed off: GSLs to polar satellites, and crossseam ISLs.</p>\r\n<p class=\"Textbody\">Each terminal connected to a polar orbiting satellite runs a timer.when the time expires,the HandoffManager to check the current position of the satellite.If the satellite has fallen below the elevation mask of the terminal, the handoff manager detaches the terminal from that satellite\'s up and down links, and searches for another possible satellite. If it finds a suitable polar satelite, it connects its network interfaces to that satellite\'s uplink and downlink channels, and restarts the handoff timer. If it does not find a suitable satellite, it restarts the timer and tries again later. If any link changes occur, the routing agent is notified.</p>\r\n<p class=\"Textbody\">The elevation mask and handoff timer interval are set as follows:</p>\r\n<pre class=\"brush: bash;\">HandoffManager/Term set elevation_mask_ 10; # degrees\r\nHandoffManager/Term set term_handoff_int_ 10; # seconds</pre>\r\n<p class=\"Textbody\">Handoffs may be randomized to avoid phase effects by setting the following variable:</p>\r\n<pre class=\"brush: bash;\">HandoffManager set handoff_randomization_ 0; # 0 is false, 1 is true</pre>\r\n<p class=\"Textbody\">If handoff_randomization_ is true, then the next handoff interval is a random variate picked from a uniform distribution across.</p>\r\n<p class=\"Textbody\">The satellite handoff interval is set by the following command:</p>\r\n<pre class=\"brush: bash;\">HandoffManager/Sat set sat_handoff_int_ 10; # seconds</pre>\r\n<p class=\"Textbody\">Interplane and crossseam ISLs are deactivated near the poles, because the pointing requirements for the links are too severe as the satellite draw close to one another. Shutdown of these links is governed by a parameter:</p>\r\n<pre class=\"brush: bash;\">HandoffManager/Sat set latitude_threshold_ 70; # degrees</pre>\r\n<p class=\"Textbody\">If crossseam ISLs exist, there are certain situations in which the satellites draw too close to one another in the mid-latitudes (if the orbits are not close to being pure polar orbits). The occurence of this orbital overlap is checked with the following parameter:</p>\r\n<pre class=\"brush: bash;\">HandoffManager/Sat set longitude_threshold_ 10; # degrees</pre>\r\n<p class=\"Textbody\"><h2>Routing </h2></p>\r\n<p class=\"Textbody\">The routing genie[i] is a class SatRouteObject and is created and invoked with the following OTcl commands:</p>\r\n<pre class=\"brush: bash;\">set satrouteobject_ [new SatRouteObject]\r\n$satrouteobject_ compute_routes</pre>\r\n<p class=\"Textbody\">where the call to compute_routes is performed after all of the links and nodes in the simulator have been instantiated.</p>\r\n<p class=\"Textbody\"><h2>Structure of trace files in Satellite network</h2></p>\r\n<p class=\"Textbody\">&nbsp;The trace is organized in 16 fields as follows:</p>\r\n\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/04/tab1.png\' alt=\'Satellite frame structure\' class=\'diagram\' />\r\n\r\n<ul>\r\n<li>The first 12 fields are similar to conventional ns tracing.</li>\r\n<li>The last four fields log the geographic latitude and longitude of the node logging the trace (the latitude and longitude correspond to the nadir point of the satellite). &nbsp;</li>\r\n</ul>\r\n<p class=\"Textbody\">Ex:</p>\r\n<pre class=\"PreformattedText\">+ 1.0000 66 26 cbr 210 ------- 0 66.0 67.0 0 0 37.90 -122.30 48.90 -120.94</pre>\r\n<p class=\"Textbody\">In this case, node 66 is at latitude 37.90 degrees, longitude -122.30 degrees, while node 26 is a LEO satellite whose subsatellite point is at 48.90 degrees latitude, -120.94 degrees longitude (negative latitude corresponds to south, while negative longitude corresponds to west).</p>\r\n<p class=\"Textbody\">To enable tracing of all satellite links in the simulator, use the following commands before instantiating nodes and links:</p>\r\n<pre class=\"brush: bash;\">set f [open out.tr w]\r\n$ns trace-all $f</pre>\r\n<p class=\"Textbody\">Then use the following line after all node and link creation (and all error model insertion, if any) to enable tracing of all satellite links:</p>\r\n<pre class=\"brush: bash;\">$ns trace-all-satlinks $f</pre>','<ul>\r\n  <li>Get familiar with the basics of satellite network and how to simulate them with ns2</li>\r\n  <li>Learn the simulation of geostationary satellite  and Iridium constellation with ns2</li>\r\n </ul>','3.00','<p>\r\nA satellite works as an attendant around the orbit, collect information and relay them to destination. The geostationary satellite appears to be fixed from a ground observer and is useful for telecommunication, television broadcasting, weather forecasting etc. A low earth orbit satellite is closer to the earth and it provide different types of communication service in connection with the small ground terminals.\r\n</p>\r\n\r\n<p>\r\nIn this experiment we will learn the simulation of how two terminals on ground are communicated with each other using geostationary satellite and low earth orbit satellite.\r\n</p>'),(5,'Simulating a Wi-Fi Network','<h2>Wi-Fi Networks</h2> \r\n\r\n<p>Wi-Fi (Wireless Fidelity)  uses the IEEE 802.11 standard. Wi-Fi has some other extensions like 802.11a, 802.11b, and 802.11g. Wi-Fi technology operating at a frequency of 2.4 GHz and uses radio communication. <a href=\"/ant/ant/5/references/\">[v]</a>\r\n</p>\r\n\r\n\r\n<h2>IEEE 802.11 Standards</h2>\r\n<p>Following are the different standards for Wi-Fi <a href=\"/ant/ant/5/references/\">[vi]</a>\r\n<ul>\r\n<li>802.11 is the wireless local area networks (WLANs) standard. Supports 1- 2 Mbps.</li>\r\n<li>802.11a is a high speed WLANs standard for 5 GHz band. It uses an orthogonal frequency division multiplexing (OFDM) encoding scheme.</li>\r\n<li>802.11b is a wireless standard for 2.4 GHz band. It supports 11 Mbps. It uses only DSSS (Direct Sequence Spread Spectrum).</li>\r\n<li>802.11d is a international roaming. This automatically configures devices to meet local radio frequency (RF) regulations.</li>\r\n<li>802.11e address the quality of service (QoS) requirements for all IEEE wireless radio interfaces.</li>\r\n<li>802.11f defines inter-access point communications for multiple vendor-distributed WLANs.</li>\r\n<li>802.11g establishes an additional modulation technique for 2.4 GHz band. This supports speeds up to 54 Mbps.</li>\r\n<li>802.11h supports the spectrum management of the 5 GHz band.</li>\r\n<li>802.11i define the current security weaknesses for both encryption and authentication protocols. </li>\r\n<li>802.11n supports more throughput improvements. Also provides speeds up to 500 Mbps.</li></ul></p>\r\n<p> The basic difference between 802.11a,802.11b and 802.11g are given below : </p>\r\n<p>\r\n<table class=\"techno\">\r\n<thead>\r\n    <tr>\r\n        <th><strong>Parameter</strong></th>\r\n        <th>802.11a</th>\r\n        <th>802.11b</th>\r\n        <th>802.11g</th>\r\n    </tr>\r\n</thead>\r\n\r\n<tbody>\r\n    <tr>\r\n        <td><strong>Standard approved</strong></td>    \r\n        <td>Sept 1999</td>\r\n        <td>Sept 1999</td>\r\n        <td>June 2003</td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>Available bandwidth</strong></td>    \r\n        <td>300MHz</td>\r\n        <td>83.5MHz</td>\r\n        <td>83.5MHz</td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>No. of overlapping channel</strong></td>    \r\n        <td>4</td>\r\n        <td>3</td>\r\n        <td>3</td>\r\n    </tr>\r\n   <tr>\r\n        <td><strong>Frequency</strong></td>\r\n        <td>5GHz</td>\r\n        <td>2.4GHz</td>\r\n        <td>2.4GHz</td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>Typical Data Rate</strong></td>\r\n        <td>23 Mbit/s</td>\r\n        <td>4.5 Mbit/s</td>\r\n        <td>19 Mbit/s</td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>Maximum Data Rate</strong></td>\r\n        <td>54 Mbit/s</td>\r\n        <td>11 Mbit/s</td>\r\n        <td>54 Mbit/s</td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>Range</strong></td>\r\n        <td>115 feet</td>\r\n        <td>115 feet</td>\r\n        <td>125 feet</td>\r\n    </tr>\r\n\r\n<tr>\r\n        <td><strong>Compatibility</strong></td>\r\n        <td>None</td>\r\n        <td>None</td>\r\n        <td>backward compatible with b</td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>Advantages</strong></td>\r\n        <td>fast maximum speed, regulated frequencies prevent signal interference from other devices</td>\r\n        <td>lowest cost,  signal range is good and not easily obstructed </td>\r\n        <td>fast maximum speed,  signal range is good and not easily obstructed </td>\r\n    </tr>\r\n<tr>\r\n        <td><strong>Limitations</strong></td>\r\n        <td>highest cost, shorter range signal that is more easily obstructed </td>\r\n        <td>slowest maximum speed, home appliances may interfere on the unregulated frequency band </td>\r\n        <td>costs more than 802.11b, appliances may interfere on the unregulated signal frequency  </td>\r\n    </tr>\r\n\r\n</tbody>\r\n\r\n</table>\r\n\r\n\r\n</p>\r\n\r\n\r\n \r\n<h2>Hardware Requirements for Wi-Fi</h2>\r\n\r\n<p>The following hardware devices are required for connecting the Wi-Fi Network.</p>\r\n<p><strong>Access Point</strong></p>\r\n<p>Access Point (AP) acts as a bridge between the  wired network and wireless devices. It allows multiple devices to connect through it for accessing the network. An AP can also act as a router through which the data transmission can be possible from one AP to another.</p>\r\n<p><strong>Wireless Network Card</strong></p>\r\n<p> A wireless network card (WNC) is required on each device on a wireless network. A desktop computer would need an internal card, which will usually have a small antenna or an external antenna on it. These antennas are optional on most equipment and they help to increase the signal on the card.</p>\r\n<p><strong>Transmitter</strong></p>\r\n<p>Transmitter is used for emitting the wireless signals and it also receive the connection requests where a wireless client will send the requests and receives the replies from the transmitter. In this case, the transmitter is the wireless router.</p>\r\n\r\n\r\n<h2>How to connect to the Wi-Fi Networks?</h2>\r\n\r\n<p>Wi-Fi Network is easy to connect. Suppose, we will think about our laptop with any operating systems, then we can easily connect to a Wi-Fi network for accessing or we can share different files on a network.</p> \r\n<p>Once we have acquired the necessary wireless networking hardware then, connect it all together to form a network and allow each device to communicate. The instructions below will act as basic guidelines of what needs to be done.</p>\r\n<p><ul><li>The distance between each computer should be below 100 meters </li>\r\n<li>Each computer should be on the same floor</li> \r\n<li>Plug the AP into the power outlet and existing Ethernet jack on the network </li>\r\n<li>Configure the access point (usually through a web browser)</li>\r\n<li>Configure the client computers with the appropriate network settings required to be able to communicate with the AP. </li></ul></p>\r\n\r\n\r\n<h2>Advantages of Wi-Fi</h2>\r\n\r\n<p> Following are the different benefits of Wi-Fi Networks</p>\r\n<p><ul><li>In wireless ad-hoc network mode, devices like consumer electronics and gaming applications can directly connect and exchange data with each other. </li>\r\n<li>Digital images can be transferred wirelessly from cameras and other devices.</li> \r\n<li>All connected devices within the range have access to Internet and inter-networking.</li> \r\n<li>Wi-Fi  enables wireless voice-applications (Vo WLAN or WVOIP).</li> \r\n<li>Wi-Fi provides a secure computer networking gateway, firewall, DHCP server and an intrusion detection system along with other features. </li>\r\n<li>Cost of cabling and network deployment of Local Area Networks is significantly reduced. </li>\r\n<li>Can be used at placed where wiring and cable lay-out is not feasible. </li>\r\n<li>Due to its cost effective nature, it can be used widely in different educational campuses and industries. </li>\r\n<li>Wi-Fi device can function in any type of geographical location.</li></ul></p>\r\n\r\n\r\n<h2>Limitations</h2>\r\n\r\n<p>Like any other types of technology, Wi-Fi has its set of drawbacks that are listed as follows: </p>\r\n<p><ul><li>Global inconsistency of spectrum assignments and operational limitations. </li>\r\n<li>Overlapping of channels.</li> \r\n<li>Limited range of equivalent isotropically radiated power in some areas. </li>\r\n<li>Greater power consumption compared to lower bandwidth standards.</li> \r\n<li>Limited battery life due to range and reach requirements.</li> \r\n<li>Wi-Fi network range is also limited. </li></ul></p>\r\n\r\n\r\n<h2>MAC Protocols</h2>\r\n\r\n<p>The 802.11 standards use a MAC layer known as CSMA/CA (Carrier Sense Multiple Access/Collision Avoidance). </p>\r\n<p>In CSMA/CA a Wireless node that wants to transmit & performs the following sequence:</p>\r\n<p>1.	Listen on the desired channel.</p> \r\n<p>2.	If channel is idle (no active transmitters) it sends a packet. </p>\r\n<p>3.	If channel is busy then, the node waits until the transmission end then a contention period where minimum time a host must transmit before it can be sure that the no other host’s packet has collided with its transmission.</p>\r\n<p>4.	If the channel is still idle at the end of the contention period, then the node transmits its packet otherwise it repeats the process defined in step-3 above until it gets a free channel.</p> <p>The MAC header format shown in the figure-01 below: <a href=\"/ant/ant/5/references/\"> [vi]</a></p>\r\n<center><img src=\'_STATIC_URL_/ant/images/theory/ant/05/theory_05_05.jpg\' alt=\'MAC Header Format\' class=\'diagram\' />Figure-01: Illustration of MAC Header Format</center>\r\n\r\n\r\n<h2>Use of RTS/CTS to Exchange Data</h2>\r\n<p><strong>Step 1: </strong><p>At first the sender check whether the medium is idle or not, if so, after the Distributed Inter Frame Space (DIFS will check the status and sense before transmitting the data in the wireless medium) units of time, it will broadcasts a Request-to-Send (RTS) frame to the receiver address. </p>\r\n<p><strong>Step 2:</strong><p> If the receiver is within the range, then it will wait for Short Inter Frame Space (SIFS is the small time interval between the data frame and its acknowledgment) unit of time, then only it will respond to the sender with a Clear-to-Send (CTS) frame.</p>\r\n<p><strong>Step 3:</strong><p> If the sender receive the CTS frame, then it will wait for another SIFS unit of time before sending the data frame to the receiver.</p>\r\n<p><strong>Step 4: </strong><p>Finally, when the receiver will successfully receive the data frame, it will wait for SIFS unit of time and also send an Acknowledgement (ACK) message return to the sender.</p><p>Following figure-02 shows how data exchanges using RTC/CTS</p>\r\n<center><img src=\'_STATIC_URL_/ant/images/theory/ant/05/theory_05_06.jpg\' alt=\'Data Exchanges between RTS/CTS\' class=\'diagram\' /> Figure-02:How Data exchanges using RTC/CTS</center>\r\n\r\n\r\n<h2>Issues in Wi-Fi Networks</h2>\r\n\r\n<p>\r\nWi-Fi suffers from two well known problems:\r\n<ul>\r\n	<li><strong>Hidden Terminal Problem </strong></li>\r\n	<li><strong>Exposed Terminal Problem </strong></li>\r\n</ul>\r\n</p>\r\n\r\n\r\n<h2>The Hidden Terminal Problem</h2>\r\n\r\n<p>The hidden node/ terminal problem found at a point to multipoint network and it is defined as being one in which three or more nodes are present. Let there are three nodes :node A, node B and node C. </p>\r\n<p>A and C cannot hear each other. </p>\r\n<p>A sends to B, C cannot receive A.</p>\r\n<p>C wants to send B, C senses a free medium.</p>\r\n<p>Collision occurs at B.</p>\r\n<p>A cannot receive the collision.</p>\r\n<p>A is hidden for C.</p> <p>Figure-03 illustrates the Hidden Terminal Problem using node A,B and C</p>\r\n<center><img src=\'_STATIC_URL_/ant/images/theory/ant/05/theory_05_02.png\' alt=\'Hidden Terminal Problem\' class=\'diagram\' />Figure-03: Hidden Terminal Problem</center>\r\n\r\n\r\n<h2>Solution of Hidden Terminal Problem</h2>\r\n\r\n<p> The solution of hidden terminal problem is as follows.</p>\r\n<p><ul><li>When A wants to send a packet to B , A first sends a Request-to-send (RTS) to B. </li>\r\n<li>On receiving RTS, B responds by sending Clear-to-Send (CTS).</li>\r\n<li>When C overhears a CTS, it keeps quiet for the duration of the transfer.</li>\r\n<li>Transfer duration is included in both RTS and CTS.</li>\r\n<li>RTS and CTS are short frames, reduces collision chance.</li></ul></p>\r\n<p><strong>The other methods that can be employed to solve hidden terminal problem are :</strong></p>\r\n<p>- Increase transmitting power from the nodes. </p>\r\n<p>- Use unidirectional antennas.</p>\r\n<p>- Remove obstacles. </p>\r\n<p>- Move the node. </p>\r\n<p>- Use protocol enhancement software.</p>\r\n<p>- Use antenna diversity.</p>\r\n<p><strong>Effect of Hidden Terminal Problem </strong></p>\r\n<p>If one node hidden to another then the re-transmission will increase. It also increase the delay and decrease the throughput.</p> \r\n\r\n\r\n<h2>Exposed Terminal Problem</h2>\r\n\r\n<p> Suppose there are four nodes: node A, node B, node C and node D.</P>\r\n<p> Here - </p>\r\n<p><ul><li>B can send to both A and C	.</li>\r\n<li>C can send to D, but not to A or B.</li>\r\n<li>A and C cannot hear each other.</li></ul></p>\r\n<p> Now the Problem as follows :</p>\r\n<p> - When B transmits to A, C detects the transmission using the carrier sense mechanism.</p>\r\n<p> - So C defers transmitting to D. </p>\r\n<p> - But C could have sent to D, so blocked unnecessarily.</p><p>The following figure-04 shows the Exposed Terminal Problem using node A,B,C and D</p>\r\n<center><img src=\'_STATIC_URL_/ant/images/theory/ant/05/theory_05_03.png\' alt=\'Exposed Terminal Problem\' class=\'diagram\' />Figure-04: Exposed Terminal Problem</center>\r\n\r\n\r\n<h2> Solution to the Exposed Terminal Problem</h2>\r\n\r\n<p>Exposed terminal problems cannot be mitigated with RTS/CTS. This can be explained with the following scenario.</p>\r\n<p>\r\n<ul><li>Suppose B sends RTS to A.</li>\r\n<li>A sends CTS to B.</li>\r\n<li>C hears RTS, but not CTS, assumes it is ok to send to D.</li></ul>\r\n</p>\r\n\r\n\r\n<h2>Simulating a Wi-Fi using Network Simulator 3 </h2>\r\n\r\n<p>\r\nNS-3 is an open source network simulator, and supposed to be the future replacement of NS-2. We would be using NS-3 for this experiment. Providing a tutorial on NS-3 is, however, outside the scope of this experiment. The <strong>Exercises</strong> section presents two problems and their solutions using NS-3. We would use the existing codes and tweak it to get familiarized with the basic characteristics of Wi-Fi. Nevertheless, one could visit the <a href=\"http://www.nsnam.org/\">NS-3</a>website to learn more about this simulator.\r\n</p>','<ul>\r\n  <li>Understand about Wi-Fi network, different standards, and related protocols</li>  \r\n  <li>Analyze the Wi-Fi communication range in the presence of the access point (AP) and the base station (BS)</li>\r\n  <li>Learn about hidden node and exposed node problems, and their possible solutions</li>\r\n</ul>','3.00','<p>\r\nWi-Fi enabled devices are connected wirelessly and can connect to the Internet via a wireless access point. Wi-Fi can function in geographical location and can be used where wiring and cable connection is not feasible.\r\n</p>\r\n\r\n<p>\r\nIn this experiment we will learn the different standards and the simulation of Wi-Fi network. It also explains the concept of hidden node and exposed node problem and solve these issues.\r\n</p>'),(6,'Simulating a WiMAX Network','<h2>WiMAX Network</h2>\r\n\r\n<p>WiMAX stands for Worldwide Interoperability for Microwave Access. It is a broadband wireless point-to-multipoint specification from the IEEE 802.16 working group.  It was developed by Institute of Electrical and Electronics Engineers (IEEE) in June 2001. WiMAX is designed to operate as a wireless MAN (Metropolitan Area Network). It is a telecommunications protocol that provides fixed and mobile Internet access.</p>\r\n\r\n\r\n<h2>Standards</h2>\r\n\r\n<p>•	The IEEE 802.16 WiMAX standard specified for the 10 to 66 GHz ranges.<a href=\"/ant/ant/6/references/\">[i]</a>\r\n </p>\r\n<p>•	802.16d was updated by 802.16a in 2004 to 802.16-2004. It added specification for the 2 to 11 GHz range. 802.16d, it also known as \"fixed WiMAX”.</p>\r\n<p>•	802.16e was updated by 802.16d in December 2005. It is known as \"roaming and mobile WiMAX\" and uses scalable orthogonal frequency-division multiplexing (OFDM). It has potential benefits in terms of coverage, self installation, power consumption, frequency re-use and bandwidth efficiency.</p>\r\n<p>•	802.16e also adds a capability for full mobility support</p>\r\n<p>•      802.16m <strong>(New)</strong> The Institute of Electrical and Electronics Engineers is expected this year in 2011 to provide final approval for the 802.16m standard, also known as \"WiMAX 2\" <a href=\"/ant/ant/6/references/\">[iii]</a>\r\n. However it plans on testing out 802.16m sometime next year in the hopes of deploying it in 2012. \r\n</p>\r\n<p><strong>Following table shows the differentiate among IEEE 802.16,802.16d and 802.16e</strong></p>\r\n\r\n<center><img src=\'_STATIC_URL_/ant/images/theory/ant/06/theory_06_01.jpg\' alt=\'WiMAX Standards\' class=\'diagram\'> Illustration of different WiMAX standards</center>\r\n\r\n\r\n<h2>Comparison of Wi-Fi and WiMAX</h2>\r\n\r\n<p> The following table shows how WiFi is different from WiMAX<center><img src=\'_STATIC_URL_/ant/images/theory/ant/06/theory_06_02.jpg\' alt=\'WiFi vs WiMAX\' class=\'diagram\' />WiFi vs WiMAX <a href=\"/ant/ant/6/references/\">[ii]</a>\r\n</center>\r\n\r\n\r\n<h2>How WiMAX works ?</h2>\r\n\r\n<p>WiMAX is possible through broadband access to DSL lines. The working method of WiMAX is different from Wi-Fi network, because Wi-Fi system can be connected via LAN card or router, while the connectivity of WiMAX network constitutes of two parts in which one is WiMAX tower or booster also known as WiMAX base station and second is WiMAX receiver or Customer Premise Equipment (CPE).</p>\r\n<p>WiMAX technology providers build a network with the help of towers that enable communication access over many miles. The broadband service of WiMAX technology is available in coverage areas. The coverage areas of WiMAX technology separated in series of over lied areas called channel. </p>\r\n<p>When a user sends data from one location to another, the wireless connection is transferred from one cell to another cell. When signal transmit form user to WiMAX base station or base station to user (WiMAX receiver), the wireless channel faces many attenuation such as fraction, reflection, refraction, wall obstruction etc. These all attenuation may cause of distorted, and split toward multi path. The target of WiMAX receiver is to rebuild the transmitted data perfectly to make possible reliable data transmission. </p>\r\n\r\n\r\n<h2>Limitations of WiMAX</h2>\r\n\r\n<p>WiMax cannot provide highest performance over 50 kilometers. As the distance increases, bit error rate reduces the performance. Reducing distance to less than 1km allows a device to operate at higher bit rate. A user closer to base station gets better speed at around 30 Mbps.</p>\r\n<p>As an available bandwidth is shared between no. of users, performance depends on number of active users connecting to that base station. So this needs a use of Quality of Service (QOS) mechanism to provide a minimum guaranteed throughput.</p>\r\n\r\n\r\n<h2>Modulation Shemes</h2>\r\n\r\n<p>Modulation is a technique of transfer information through a medium.<a href=\"/ant/ant/6/references/\">[v]</a> Modulation is used because of noise in the signal and signal attenuation.\r\nBasically in WIMAX Digital Modulation Technique are used. Digital Modulation Technique is known as conversion from digital to analog and reverse is known as demodulation.<a href=\"/ant/ant/6/references/\">[vi]</a>\r\n<p>In WIMAX following modulation techniques are used\r\n<br>\r\n<ol type=\"i\">\r\n<li>BPSK: Binary Phase Shift Keying.\r\n<li>QPSK(1/2): Quadrature Phase Shift Keying.\r\n<li>QPSK(3/4): Quadrature Phase Shift Keying.\r\n<li>16QAM(1/2): Quadrature Amplitude Modulation.\r\n<li>16QAM(3/4): Quadrature Amplitude Modulation.\r\n<li>64QAM(2/3): Quadrature Amplitude Modulation.\r\n<li>64QAM(3/4): Quadrature Amplitude Modulation.\r\n</ol>\r\n<p>\r\n<ul>\r\n<li>BPSK-It is very simple PSK(Phase Shift Keying).Its phase is separated by 180 degree.In this one bit can coded in one symbol.\r\n<li>QPSK-It also a type of PSK(Phase Shift Keying).Two bits coded in one symbol.It is two dimension signalling.\r\n<li>QAM-It is combination of Phase Modulation and Amplitude Modulation.It is advantageousn in performance of noise.In thin n bits can coded in one symbol.\r\n</ul>\r\n<P><br>Now one importent question why different modulation techniques are used in WIMAX?\r\n<p>Different modulation technique perform good task for a certain distance.Some modulation scheme does not work for a long distance.\r\n<br><h3>Here some terminology,expression and table are given below</h3>\r\n<p><b>Symbol rate= Bit rate/no of bit transmitted in each symbol</b><a href=\"/ant/ant/6/references/\">[vii]</a>\r\n<br>which means that the symbol rates depend upon the number of bits transmitted in each symbol.\r\n<p><br>\r\n\r\n\r\n<h3>Difference between low symbol rate and high symbol rate</h3>\r\n\r\n<table class=\"techno\">\r\n<tr>\r\n<td><b><center>Low Symbol Rate</td>\r\n<td><b><center>High Symbol Rate</td>\r\n</tr> \r\n<tr>\r\n<td>i)Number of bit per symbol is more.</td>\r\n<td>i)Number of bit per symbol is less.</td>\r\n</tr>\r\n<tr>\r\n<td>ii)Power needed to transfer All bits are more.</td>\r\n<td>ii)Power needed to transfer All bits are less.</td>\r\n</tr>\r\n<tr>\r\n<td>iii)At low power, when no of bit per symbol is more then at receiver end it may<br>not receive same bit pattern as send form sender side</td>\r\n<td>iii)At low power, when no of bit per symbol is less then at receiver end it<br>receive same bit pattern as send form sender side </td>\r\n</tr>\r\n</table>\r\n\r\n\r\n<p>From general concept we know that as power degrades(attenuates) with the increasing distance.\r\n<br><b>SNR=Power of Signal/Power of Noise</b> <a href=\"/ant/ant/6/references/\">[viii]</a>\r\n<br>Here SNR depends on Power of Signal.If power of Signal is more SNR value is more.\r\n<p>Now we can take an example,\r\n<br>In BPSK the number of bit per symbol is 1 and in QPSK the number of bit per symbol is 2.\r\n<br>In BPSK if power is less, SNR value is also less and if power get attenuates over a long distance then also it can transmit properly as mentioned earlier.\r\n<br>Similarly in case of QPSK if power is less, the SNR value is also less and if power gets attenuates over a long distance then it may error in the signal as no\r\n<br> of bit per symbol is more than BPSK.\r\n\r\n<p>In the table given below shows the different scheme of modulation are given along with SNR values and maximum distance cover</p>\r\n\r\n<table class=\"techno\">\r\n<tr>\r\n<td><b>Modulation Scheme</b></td>\r\n<td><b>No. of bit per symbol</b></td>\r\n<td><b>SNR Value</b></td>\r\n<td><b>Maximum Distance Cover(in KM.)</b></td>\r\n\r\n</tr>\r\n<tr>\r\n<td>BPSK</td>\r\n<td>1</td>\r\n<td>6.4</td>\r\n<td>5</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>QPSK(1/2)</td>\r\n<td>2</td>\r\n<td>9.4</td>\r\n<td>4.5</td>\r\n</tr>\r\n<tr>\r\n<td>QPSK(3/4)</td>\r\n<td>2</td>\r\n<td>11.2</td>\r\n<td>3.7</td>\r\n</tr>\r\n<tr>\r\n<td>16QAM(2/3)</td>\r\n<td>4</td>\r\n<td>16.4</td>\r\n<td>3.1</td>\r\n</tr>\r\n<tr>\r\n<td>16QAM(3/4)</td>\r\n<td>4</td>\r\n<td>18.2</td>\r\n<td>2.5</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n<h3>WIMAX module for NS-2</h3>\r\n\r\n<p>Module name:<b>ns2-wimax-awg</b>\r\n<br>Module Details:Initially this module was developed at National Institute of \r\nStandards and Technology but later on it was decided to combine individuals\r\nteam effort supported by Application Architecture Task Group(AATG), Wimax Forum \r\nand National Institute of Standards and Technology. By applying this patch we \r\ncan directly use WiMAX in the existing NS-2. All the features available are \r\nlisted in NS-2_Release_2_6_Documentation.pdf document \r\n<a href=\"/ant/ant/6/references/\"> [ix]</a>, including\r\n<ul>\r\n    <li>OFDMA for physical layer</li>\r\n    <li>Time Division Duplexing (TDD)</li>               \r\n    <li>Schedulers for link allocation to registered Mobile Stations (MSs) \r\n    according to bandwidth requested</li>\r\n    <li>IEEE 802.16e MAC layer extensions</li>\r\n    <li>Fragmentation and reassembly of frames</li>\r\n    <li>Fast fading models: ITU PED A, PED B and VEHIC A</li>\r\n    <li>QoS scheduling, ARQ</li>   \r\n</ul>\r\n\r\n<h3>How to download and install patch for WIMAX?</h3>\r\n\r\n<p>step-1: Go to url http://code.google.com/p/ns2-wimax-awg/\r\n<br>step-2: Click on Downloads.\r\n<br>step-3: Click on ns2-Release-2.6.tar.gz for getting patch and click on NS-2_Release_2_6_Documentation.pdf for documentation.\r\n<br>step-4: Click on ns2-Release-2.6.tar.gz here we will get patch file, sample script and some document.\r\n<br>step-5: Extract ns2-Release-2.6.tar.gz\r\n<br>step-6: Copy ns-2.31-WiMAX_AATG_R2.6.patch and paste in to ns-2.34\r\n<br>step-7: Apply patch\r\n<br>Now ns-2.34 is ready with WIMAX.\r\n\r\n\r\n<h2>Addressing Format in ns2</h2>\r\n\r\n<h3>The Default address format</h3>\r\n\r\n<p>The address space consists of two part node id and port id.Here node id is flat, we can say if there is n number of node then its id will be 1 to 10.</p>\r\n\r\n<h3>The Hierarchical address format </h3>\r\n<p>In hierarchical addressing node-id has three level as x.y.z, where x is domain number, y is cluster number and z is number of node in each cluster.\r\n<br><br>Example\r\n<br><b>$ns node-config -addressType hierarchical</b>&nbsp; &nbsp;(Here,Hierarchical addressing is used)\r\n<br><b>AddrParams set domain_num_ 2</b> &nbsp; &nbsp; &nbsp; &nbsp;(In this line it is mentioned tha there are two domain exist)	\r\n<br><b>lappend cluster_num 1 1</b> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(This line indicates each domain contains 1 cluster) \r\n<br><b>AddrParams set cluster_num_ $cluster_num</b>\r\n<br><b>lappend eilastlevel 1 2</b> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(In this line it is mentioned that there is 1 node in 1st cluster and 2 node in second cluster)\r\n<br><b>AddrParams set nodes_num_ $eilastlevel</b>\r\n</p>\r\n\r\n\r\n<h2>Wireless (New) Trace File Format</h2>\r\n\r\n<p>\r\nThe following describes the various fields of asimulation trace file for wireless networks in the <emph>new</emph> format. Please note that, apart from the following, the trace files may also contain information specific to certain protocols, for example, DSR. We do not describe them here.\r\n\r\n<div style=\"width: 890px; overflow: scroll; padding: 10px;\">\r\n<table class=\"techno\" style=\"margin-left: 0;\">\r\n<tr>\r\n<td><center><B>1</center></td>\r\n<td><center><B>2,3</center></td>\r\n<td><center><B>4</center></td>\r\n<td><center><B>5</center></td>\r\n<td><center><B>6</center></td>\r\n<td><center><B>7</center></td>\r\n<td><center><B>8</center></td>\r\n<td><center><B>9</center></td>\r\n<td><center><B>10</center></td>\r\n<td><center><B>11</center></td>\r\n<td><center><B>12</center></td>\r\n<td><center><B>13</center></td>\r\n<td><center><B>14</center></td>\r\n<td><center><B>15</center></td>\r\n<td><center><B>16</center></td>\r\n<td><center><B>17</center></td>\r\n<td><center><B>18</center></td>\r\n<td><center><B>19</center></td>\r\n<td><center><B>20<center></td>\r\n<td><center><B>21</center></td>\r\n<td><center><B>22<center></td>\r\n<td><center><B>23</center></td>\r\n<td><center><B>24<center></td>\r\n<td><center><B>25</center></td>\r\n<td><center><B>26<center></td>\r\n<td><center><B>27</center></td>\r\n<td><center><B>28<center></td>\r\n<td><center><B>29</center></td>\r\n<td><center><B>30</center></td>\r\n<td><center><B>31</center></td>\r\n<td><center><B>32</center></td>\r\n<td><center><B>33</center></td>\r\n<td><center><B>34</center></td>\r\n<td><center><B>35</center></td>\r\n<td><center><B>36</center></td>\r\n<td><center><B>37</center></td>\r\n<td><center><B>38</center></td>\r\n<td><center><B>39</center></td>\r\n<td><center><B>40</center></td>\r\n<td><center><B>41</center></td>\r\n<td><center><B>42</center></td>\r\n<td><center><B>43</center></td>\r\n<td><center><B>Others</center></td>\r\n</tr>\r\n\r\n<tr>\r\n<td><center><B>Event</center></td>\r\n<td><center><B>Timestamp</center></td>\r\n<td colspan=\"4\"><center><B>Adjacent<br>Node Id</center></td>\r\n<td colspan=\"14\"><center><B>Node Property</center></td>\r\n<td colspan=\"8\"><center><B>Pkt Info MAC</center></td>\r\n<td colspan=\"14\"><center><B>Pkt Info IP</center></td>\r\n<td><center><B>Pkt Info</center></td>\r\n</tr>\r\n\r\n</table>\r\n</div>\r\n\r\n\r\n<h3>Description of New Trace File Format</h3>\r\n\r\n<table class=\"techno\">\r\n<tr>\r\n<td><B>Field No</td>\r\n<td><B>Field Name</td>\r\n<td><B><center>Description</center></td>\r\n<td><B><center>Possible Values</center></td>\r\n</tr>\r\n\r\n<tr>\r\n<td>1</td>\r\n<td>Event</td>\r\n<td>Any event in network wrt a packet</td>\r\n<td>\r\n<pre>\r\ns: send<br>\r\nr: recieved<br>\r\nd: dropped<br>\r\nf: forwarded\r\n</pre>\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>2,3</td>\r\n<td>Timestamp</td>\r\n<td>When the event occur</td>\r\n<td>-t &lt; time &gt; </td>\r\n</tr>\r\n\r\n<tr>\r\n<td>4,5</td>\r\n<td rowspan=\"2\">Adjacent Node Info</td>\r\n<td rowspan=\"2\">Contain info about next node</td>\r\n<td>-Hs &lt; Current Node id &gt;</td>\r\n\r\n</tr>\r\n\r\n<tr>\r\n<td>6,7</td>\r\n<td>-Hd &lt; Next Hop id toward target node &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>8,9</td>\r\n<td rowspan=\"7\">Node Property</td>\r\n<td rowspan=\"7\">Property of Node</td>\r\n<td>-Ni &lt; Node id &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>10,11</td>\r\n<td>-Nx &lt; x cordinate &gt;</td></tr>\r\n\r\n<tr>\r\n<td>12,13</td>\r\n<td>-Ny &lt; y cordinate &gt;\r\n</tr>\r\n\r\n<tr>\r\n<td>14,15</td>\r\n<td>-Nz &lt; z cordinate &gt;</td>\r\n<td><br></td>\r\n</tr>\r\n<tr>\r\n<td>16,17</td>\r\n<td>-Ne &lt; Node energy level &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>18,19</td>\r\n<td>-Nl &lt; Trace Level like &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>20,21</td>\r\n<td>-Nw &lt; Reason for event &gt;\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>22,23</td>\r\n<td rowspan=\"4\">Ptk Info MAC</td>\r\n<td rowspan=\"4\">information of Packet at MAC level</td>\r\n<td>-Ma &lt; ??? &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>24,25</td>\r\n<td>-Md &lt; MAC address of destination &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>26,27</td>\r\n<td>-Ms &lt; MAC Address of Source &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>28,29</td>\r\n<td>-Mt &lt; Type of MAC &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>30,31</td>\r\n<td rowspan=\"7\">Pkt Info IP</td>\r\n<td rowspan=\"7\">Information of Packet at IP level</td>\r\n<td>-Is &lt; Sourse Address,Source Port &gt;</td>\r\n</tr>\r\n\r\n\r\n<tr>\r\n<td>32,33</td>\r\n<td>-Id &lt; Destination Address,Destination Port &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>34,35</td>\r\n<td>-It &lt; Packet Type &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>36,37</td>\r\n<td>-Il &lt; Packet Length &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>38,39</td>\r\n<td>-If &lt; Flow Id &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>40,41</td>\r\n<td>-Ii &lt; Unique Id &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>42,43</td>\r\n<td>-Iv &lt; TTL Value &gt;</td>\r\n</tr>\r\n\r\n<tr>\r\n<td rowspan=\"4\">Others</td>\r\n<td rowspan=\"4\">Pkt Info</td>\r\n<td rowspan=\"4\">Information of Packet at Application level.Some Specific Fields are:<br><br>\r\nTCP: Tranmission Control protocol<br>\r\nAODV: Ad hoc On-Demand Distance Vector Routing<br>\r\nDSR: Dynamic Source Routing.<br>\r\nARP: Address Resolusion Protocol.<br>\r\nCBR: Constant Bit Rate.</td>\r\n<td>e.g,<br>\r\nARP:<br>\r\n-Po &lt ARP Request or Reply &gt<br>\r\n-Pm &lt source MAC address &gt<br>\r\n-Ps &lt source address &gt<br>\r\n-Pa &lt destination MAC address &gt<br>\r\n-Pd &lt destination address &gt\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>\r\nCBR:<br>\r\n-Pi &lt; sequence number &gt;<br>\r\n-Pf &lt; no. of times this packet was forwarded &gt;<br>\r\n-Po &lt; optimal no. of forwards &gt;\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>\r\nTCP:<br>\r\n-Ps &lt; sequence number &gt;<br>\r\n-Pa &lt; acknowledgement number &gt;<br>\r\n-Pf &lt; no. of times this packet was forwarded &gt;<br>\r\n-Po &lt; optimal no. of forwards &gt;\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>\r\nDSR:<br>\r\n-Pn &lt; no. Of nodes traversed &gt;<br>\r\n-Pq &lt; routing request flag &gt;<br>\r\n-Pi &lt; route request sequence no. &gt;<br>\r\n-Pp &lt; routing reply flag &gt;<br>\r\n-Pl &lt; length of reply &gt;<br>\r\n-Pe &lt; source of source routing->destination of the source routing&gt;<br>\r\n-Pw &lt; error report flag ? &gt;<br>\r\n-Pm &lt; no. of errors &gt;<br>\r\n-Pc &lt; report to whom &gt;<br>\r\n-Pb &lt; error in (from link X->link Y) &gt;\r\n</td>\r\n</tr>\r\n\r\n</table>\r\n\r\n<h3>Wireless Trace File Format</h3> <a href=\"/ant/ant/6/references/\">[xi] & [xii]</a>\r\n\r\nSample Example of new Trace File Format: \r\n<pre class=\"brush: bash\" class= \"brush : bash;\">\r\ns -t 3.000000000 -Hs 0 -Hd -2 -Ni 0 -Nx 451.50 -Ny 393.62 -Nz 0.00 -Ne -1.000000 -Nl AGT -Nw --- -Ma 0 -Md 0 -Ms 0 -Mt 0 -Is 0.0 -Id 2 .0 -It tcp -Il 40 -If 2 -Ii 0 -Iv 32 -Pn tcp -Ps 0 -Pa 0 -Pf 0 -Po 1\r\n</pre>\r\n\r\n<strong>Explanation:</strong>\r\n<pre class=\"brush: bash\" class= \"brush : bash;\">\r\ns: this field is for event,meaning of this packet send and can varry s: send,f: forward: dropped,r: recieved\r\n\r\n-t 3.000000000:  \'-t\' is a tag for time and timestamp value is 3.000000000\r\n\r\n-Hs 0 -Hd -2: This field contains the information of next node\r\n-Hs 0 is current node id is 0\r\n-Hd -2  is next hop id is 2\r\n\r\n-Ni 0: Node id = 0\r\n-Nx  451.50: x coordinate of node 451.50\r\n-Ny  393.62: y coordinate of node 393.62\r\n-Nz  0.00: Z coordinate of node 0.00\r\n-Ne  -1.000000: Energy Level of the node is 1.000000\r\n-Nl  AGT: Trace Level is AGT\r\n-Nw _ _ _ : This is reason for the event which is disable\r\n\r\n-Md 0: MAC address of the destination is 0\r\n-Ms 0: MAC address of source is 0\r\n-Mt 0: MAC type is 0\r\n\r\n-Is 0.0: Source address is 0 & Source poet is 0\r\n-Id 2.0: Destination address is 2 & Destination port is 0\r\n-It tcp: Packet Type is TCP\r\n-Il 40: Length of the packet is 40byte\r\n-If 2: Flow id is 2\r\n-Ii 0: unique id is 0\r\n-Iv 32: TTL is 32\r\n</pre>\r\n\r\nAfter these fields remaining are variable field depending upon the protocol, as mentioned in table\r\n<pre class=\"brush: bash\" class= \"brush : bash;\">\r\n-Pn tcp: Here TCP protocol is working\r\n-Ps 0: Sequence Number is 0\r\n-Pa 0: Acknowledgement is 0\r\n-Pf 0: No of times packet is forwarded is 0\r\n-Po 1: Optimal no of packet forwarded is 1\r\n</pre>\r\n','<ul>\r\n  <li>Understand about WiMAX networks, standards, limitations</li>\r\n  <li>Get familiar with adaptive modulation techniques used with WiMAX</li>  \r\n</ul>','3.00','<p>\r\nWimax (802.16) is the next stage to a broadband as well as a wireless world. It can provide wireless access up to 30 miles (50 km) for fixed stations, and 3 - 10 miles (5 - 15 km) for mobile stations. It supports low latency applications such as voice, video, and Internet access at the same time.\r\n</p>\r\n<p>\r\nIn this experiment, we will learn how data rates obtained for different modulation schemes also we can analyze the communication range of WiMAX.</p>'),(7,'Simulating a Mobile Adhoc Network','<h2>Ad Hoc Network </h2>\r\n<p>Ad-hoc networks are temporary network. They do not need any  external infrastructure like base stations and physical wires.</p>\r\n<h2>Mobile Ad-hoc NETwork (MANET)</h2>\r\n<p>MANET automatically configure a network among mobile devices. Each devices moves independently in any direction. Each node acts as a router.</p>\r\n<p>A typical MANET is shown in the figure-01 below:</p><center><img src=\'_STATIC_URL_/ant/images/theory/ant/07/theory_07_01.jpg\' alt=\'A typical MANET\' class=\'diagram\' /> Figure-01: Mobile Ad-hoc Network (MANETs)</center>\r\n\r\n<h2>Routing</h2>\r\n<p>Routing is the selection of path or a route in a network for forwarding packets. The objective of routing packets in a network is to determine the best possible path in terms of minimising the number of hops (path length), delay, packet loss, cost etc.</p>\r\n\r\n<h2>Routing in MANET</h2>\r\n<p>MANETs are formed dynamically by connecting arbitrary wireless mobile nodes, without using existing infrastructure. So, routing in MANET is different from traditional routing. Each node  in MANET function like a  host and a router. The nodes also used in forwarding/receiving their own packets. The nodes also take part in forwarding other\'s node packet. Therefore, MANET provides limited physical security as compared to the traditional network.</p>\r\n\r\n<h2>Routing protocols for MANET</h2>\r\n<p>Routing protocols for a MANET can be classified as:</p> \r\n<p><strong>Proactive (table-driven) :</strong> DSDV, OLSR etc.</p>\r\n<p><strong>Reactive (on-demand):</strong> AODV, DSR etc.\r\n<p><strong>Hybrid:</strong> ZRP</p> \r\n\r\n<p><ul><li><strong>Proactive</strong> routing protocols determine path in advance and periodically exchange routing data to maintain the path.</li><li><strong>Reactive</strong> routing protocols, on the other hand, determine a route to some destination node only when it is required to send some data to that node. If at any time a path fails, an alternative path is determined again. </li><li><strong>Hybrid</strong> routing takes the advantages of both table driven and on-demand algorithms.</li></ul></p>\r\n<h2>Destination-Sequenced Distance-Vector (DSDV) algorithm:</h2>\r\n<p><strong> The procedure for DSDV <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/7/references/\">[1]</a> is :</strong></p>\r\n\r\n<p><ol><li>Each mobile node maintains a routing table with an entry of routing information from all its neighbors.</li>\r\n<li>Each routing information in a routing table specifies.\r\n<ul><li>the destination identifier</li>\r\n<li>the next hop on the route to the destination</li>\r\n<li>the distance (in terms of hops) to the destination</li>\r\n<li>a sequence number by monotonically increasing each time the node sends an update message to its neighbors. A route will be replaced only when the destination sequence number is less than the new one or two routes have the same sequence number but one has a lower metric.</li></ul></li>\r\n<li>After generating a new routing table, each node broadcasts this table to all its neighbors.</li>\r\n<li>Based on the received tables, each mobile node update their tables, until routing information is stable.</li></ol>\r\n\r\n<h2>Dynamic source routing (DSR) </h2>\r\n<p>The DSR <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/7/references/\">[v]</a>  protocol is composed of two mechanisms that work together to allow the discovery and maintenance of source routes in the ad hoc network: </p>\r\n<p><strong> 1. Route Discovery:</strong>  Route  discovery is used only when source wants to send a packet to destination and does not know a route to destination. A mobile node A wants to send a packet to a destination node B, then obtain a source route to B.</p>\r\n<p><strong> 2. Route Maintenance :</strong> Route Maintenance is the mechanism by which a source node A is able to detect, while using a source route to B. If the network topology has changed and the route is  broken then the source route attempts to use any other route to destination  if it exist or can invoke route discovery again to find a new route.  Route Maintenance is used only when source is actually sending packets to destination.</p>\r\n      <p>Both  Route Discovery and Route Maintenance each operate entirely on demand. When the destination node is reached, it returns a reply containing the route to the source node. The reply then travels in the reverse direction of the discovered route or on a path already known by the destination, to the source. The source node, on receiving the reply, will place the route in its route cache.  </p>\r\n<h2> Application of MANET</h2>\r\n<p> <strong>The applications of MANET are:</strong><a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/7/references/\">[iv]</a></p>\r\n<p>- Military or police exercises.</p>\r\n<p>- Disaster relief operations.</p>\r\n<p>- Mine site operations.</p>\r\n<p>- Robot data acquisition. etc. </p>\r\n<h2> Advantages</h2>\r\n<p><strong>The following are the advantages of MANETs:</strong><a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/7/references/\">[iv]</a></p>\r\n<p>-MANETs provide different access to information and also services of geographic position.</p>\r\n<p>-MANETs work without any pre-existing infrastructure.</p.>\r\n<p>-MANETs can be set up at any place and time.</p>\r\n<h2>Disadvantages</h2>\r\n<p><strong>Some of the disadvantages of MANETs are:</strong><a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/7/references/\">[iv]</a></p>\r\n<p>-Limited resources.</p>\r\n<p>-Limited physical security.</p>\r\n<p>-Intrinsic mutual trust vulnerable to attacks.</p>\r\n<p>-Lack of authorization facilities.</p>\r\n<p>-Volatile network topology makes it hard to detect malicious nodes.</p>\r\n<p>-Security protocols for wired networks cannot work for ad hoc networks.</p>\r\n\r\n\r\n<h2>Simulating a MANET using Network Simulator 2</h2>\r\n\r\n<p><strong>The Network Simulator simulate following steps for MANET:</strong></p>\r\n<p>1.The command required to configure a mobile node :\r\n<pre class= \"brush : bash;\">$ns_ node-config -adhocRouting $val(rp) \\\r\n		-llType $val(ll) \\ # LinkLayer\r\n		-macType $val(mac) \\ #MAC type \r\n		-ifqType $val(ifq) \\ #interface queue type\r\n		-ifqLen $val(ifqlen) \\ #interface queue length\r\n		-antType $val(ant) \\ #antenna type\r\n		-propType $val(prop) \\ #propagation model\r\n		-phyType $val(netif) \\ #network interface type\r\n		-topoInstance $topo \\ #topography instance\r\n		-agentTrace ON \\ #tracing at agent level\r\n		-routerTrace ON \\ #tracing at router level\r\n		-macTrace ON \\ #tracing at mac level\r\n		-movementTrace ON \\ #mobile node movement\r\n		-channel $chan_1_ \r\n</pre>\r\n<p>The four last option in node configuration can either be ON or OFF based on the condition of the mobile nodes. The agent trace will give the trace of TCP, routerTrace provides tracing of packets used in routing, macTrace is used to trace MAC protocol packets and movementTrace is used to allow tracing the motion of nodes for nam.</p>\r\n\r\n<p>2. Create some mobile nodes and assign them to the channels:\r\n\r\n<pre class= \"brush : bash;\">\r\nfor {set i 0} {$i &lt; $val(nn)} {incr i} {\r\n	set node_($i) [$ns_ node]   \r\n	$node_($i) random-motion 0;		\r\n}\r\n</pre>\r\n\r\n<p>3. Assigning mobility to the node.</p>\r\n<p>4. Specifying routing protocols.</p>\r\n<pre class= \"brush : bash;\">\r\nset val(rp)             AODV; #for AODV\r\nset val(rp)             DSR; #for DSR\r\n</pre>','<ul>\r\n  <li>Understand about the basics of Mobile Ad-hoc Networks (MANETs) and different routing protocols</li>\r\n  <li>Setup a network with wireless nodes using ns2</li>\r\n  <li>Get familiar with the different characteristics of MANET through simulations</li>\r\n</ul>','3.00','<p>\r\nMobile Ad Hoc Network  is a multi-hop packet based wireless network composed of a set of mobile nodes that can communicate and move at the same time, without using any kind of fixed wired infrastructure. It can change locations and configure itself. </p>\r\n<p>\r\nIn this experiment, we will learn how to prepare MANET scenario by using AODV and DSR protocol with different TCL script and detail analyzing of the trace file. </p>   '),(8,'Simulating a Wireless Sensor Network','<h2>Wireless Sensor Networks</h2>\r\n\r\n<p>A Sensor network is composed of a large number of sensor nodes that are deployed in a wide area with very low powered sensor nodes. The wireless sensor networks can be utilized in a various information and telecommunications applications. The sensor nodes are very small devices with wireless communication capability, which can collect information about sound, light, motion, temperature etc and processed different sensed information and transfers it to the other nodes.The following figure-01 illustrated the Wireless Sensor Network scenario. \r\n<center>\r\n  <img src=\"_STATIC_URL_/ant/images/theory/ant/wsn/wsn.png\" class=\"diagram\">Figure-01: Illustration of Wireless Sensor Networks</center>\r\n\r\n</p>\r\n\r\n\r\n<h2>Basic Characteristics of WSNs</h2>\r\n<p>Wireless Sensor Networks are:</p>\r\n<ul>\r\n<li>Self-configuration, Self-healing, Self-optimization, and Self-protection capabilities</li>\r\n<li>Short-range broadcast communication and multi-hop routing</li>\r\n<li>Dense deployment and cooperative effort of sensor nodes</li>\r\n<li>Frequently changing topology due to fading and node failures</li>\r\n<li>Severe limitations in energy capacity, computing power, memory, and transmit power. </li>\r\n</ul>\r\n\r\n\r\n<h2>Operating Systems for WSNs</h2>\r\n\r\n<p> TinyOS operating system is specifically designed for WSNs. It is an event driven operating system. It also provides a programming frame-work for embedded systems. It has component-based execution model implemented in nesC. There are other operating systems developed for WSN like: SOS, CORMOS, EYES, PEEROS, MantisOS, Contiki, kOS,\r\nSenOS, Nano-RK, LiteOS.\r\n</p>\r\n\r\n\r\n<h2>Differences with Mobile Ad hoc Networks</h2>\r\n\r\n<p>We studied mobile ad hoc networks (MANETs), It is made up of a number of wireless mobile nodes. However, there are significant differences between MANETs and WSNs. </p>\r\n<p>The number of sensor nodes in a sensor network is much more than that in an ad hoc network. Usually sensor networks consist of 1,000 to 10,000 sensor nodes covering the area.</p>\r\n<p>Sensor nodes are generally static and cooperate together to transfer the sensed data.</p>\r\n<p>In mobile ad hoc networks, the number of nodes are much less, but their mobility is very high.</p>\r\n<p>Sensor nodes mainly use the broadcast communication paradigm, whereas most ad hoc networks are based on point-to-point communication.</p>\r\n<p>Another difference between the two is that sensor nodes have a much lower power consumption requirement, of the order of 0.75 mW.</p>\r\n<h2>Types of Wireless Sensor Networks</h2>\r\n<p>Depending on the environment, there are different types of WSNs <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[i]</a></p>\r\n<p><strong>Terrestrial wireless sensor networks</strong></p>\r\n<ul>\r\n<li>Ad-Hoc (unstructured)</li>\r\n<li>Preplanned (structured)</li>\r\n</ul>\r\n<p><strong>Underground wireless sensor networks</strong></p>\r\n<ul>\r\n<li>Preplanned</li>\r\n<li>More expensive equipment, deployment, maintenance</li>\r\n</ul>\r\n<p><strong>Underwater wireless sensor networks</strong></p>\r\n<ul>\r\n<li>Fewer sensor nodes (sparse deployment)</li>\r\n<li>More expensive than terrestrial</li>\r\n<li>Acoustic wave communication</li>\r\n<li>Limited bandwidth</li>\r\n<li>Long propagation delay</li>\r\n<li>Signal fading</li>\r\n</ul>\r\n<p><strong>Multi-media wireless sensor networks</strong></p>\r\n<ul>\r\n<li>Sensor nodes equipped with cameras and microphones</li>\r\n<li>High bandwidth/low energy, QoS, filtering, data processing and compressing techniques</li>\r\n</ul>\r\n<p><strong> Mobile wireless sensor networks</strong></p>\r\n<ul>\r\n<li>Ability to reposition and organize itself in the network</li>\r\n<li>Start with initial deployment and spread out to gather information</li>\r\n<li>Deployment, localization, self organizations, navigation and control, coverage, energy, maintenance, data process etc.</li>\r\n</ul>\r\n\r\n\r\n<h2>Routing protocols for WSNs</h2>\r\n\r\n<p>Many routing protocols have been proposed for WSNs. These have been classified into three categories, namely:</p>\r\n<p><strong> - Data-centric protocols</strong></p>\r\n<p><strong> - Hierarchical protocols</strong></p>\r\n<p><strong> - Location-based protocols</strong></p>\r\n<p>Data-centric protocols are query-based and use the concept of naming of desired data to eliminate many redundant transmissions. </p>\r\n<p>Hierarchical protocols cluster the nodes so that cluster heads can aggregate and reduce the data to save energy.</p>\r\n<p>Location-based protocols use position information to send the data to only the desired regions rather than to the whole network. The more important ones among these are SPIN, LEACH, PEGASIS, TEEN and APTEEN.</p>\r\n\r\n\r\n<h2>Clusters and Cluster heads in WSNs</h2>\r\n<p>Sensor nodes can be partitioned into a number of\r\nsmall groups, which is known as <strong>Clusters</strong>. These are the organizational unit for wireless sensor networks. Each cluster has the coordinator, called <strong>Cluster head</strong> (CH).  CHs are required to organize activities in the cluster like data-aggregation. </p>\r\n<p><strong>Advantages of Clustering</strong></p>\r\n<p>\r\n<ul>\r\n<li>Transmit aggregated data to the data sink</li>\r\n<li>Reducing the number of nodes taking part in transmission</li>\r\n<li>Useful energy consumption</li>\r\n<li>Scalability for large number of nodes</li>\r\n<li>Reduces communication overhead for both single and multi hop</li>\r\n</ul> </p>\r\n\r\n\r\n<h2>The LEACH Protocol</h2>\r\n<p>\r\nLEACH (Low-Energy Adaptive Clustering  Hierarchy) is a cluster-based routing protocol for WSNs. It adapts the clustering concept to distribute the energy among the sensor nodes in the network. It improves the energy-efficiency of WSN beyond the normal clustering architecture. It uses a TDMA/CDMA MAC to reduce inter-cluster and intra-cluster collisions. As a result, we can extend the life time of our network, and this is the very important issue that is considered in the WSN field.</p><p> The following figure-02 illustrated the LEACH protocol with cluster nodes and cluster heads.\r\n<center>\r\n  <img src=\"_STATIC_URL_/ant/images/theory/ant/wsn/leach.png\" class=\"diagram\">Figure-02: Illustration of LEACH Protocol </center> \r\n\r\n</p>\r\n\r\n\r\n<h3>Operation of LEACH</h3>  \r\n<p> The operation of LEACH (<a href=\"/ant/ant/8/references/\">[vii]</a>, <a href=\"/ant/ant/8/references/\">[ix]</a>) is divided into two phases:</p>\r\n<p>\r\n<strong> Setup Phase </strong> (Where cluster-heads are chosen)\r\n<ul>\r\n<li>Cluster-head Advertisement</li>\r\n<li>Cluster Set-Up</li>\r\n<li>Transmission schedule creation</li>\r\n</ul>\r\n </p>\r\n<p>\r\n<strong> Steady-state Phase </strong> (The cluster-head is maintained when data is transmitted between nodes)\r\n<ul>\r\n<li>Data transmission to cluster heads</li>\r\n<li>Signal processing (Data fusion)</li>\r\n<li>Data transmission to the base station</li>\r\n</ul>\r\n</p>\r\n<p>The following figure-03 shows the above two functions of LEACH protocol</p>\r\n<center>\r\n  <img src=\"_STATIC_URL_/ant/images/theory/ant/wsn/WSN2.png\" class=\"diagram\">Figure-03: Illustration of LEACH function with Setup and Steady State Phase </center>\r\n<p><strong>Algorithm for Setup Phase</strong></p>\r\n<p>\r\nExecute the following for each node\r\n<p>\r\n<ul>\r\n<li>Cluster-head Advertisement</li></ul></p>\r\n<ol>\r\n<li> Let x be the random no between 0 and 1, n is the given node, P is the cluster-head probability, r is the current round, G is the set of nodes that were not cluster-heads the previous rounds.</li>\r\n<li>if x < T(n), then that node becomes a cluster-head. The threshold T(n) is determined (<a href=\"/ant/ant/8/references/\">[viii]</a>) as: <img src=\"_STATIC_URL_/ant/images/theory/ant/wsn/leach_threshold.png\" class=\"\"> </li>\r\n<li>Nodes that are cluster-heads in round 0 can\'t be again\r\nnext 1/P rounds; after 1/P - 1, the threshold value will be  T(n)=1 </li> <li> In 1/P rounds, all nodes are eligible again to become cluster-heads</li>\r\n<li>After the election of cluster head, each nodes will broadcasts an advertisement message to the rest of the nodes by using a CSMA MAC  protocol.\r\n</ol>\r\n<p>The algorithm is designed so that each node becomes a cluster-head at least once.</p>\r\n<p>\r\nAfter the completion of this phase, each non-cluster-head node decides the cluster by using the received signal strength of the advertisement. </p>\r\n</p>\r\n<p>\r\n<ul>\r\n<li>Cluster Set-Up</li></ul></p>\r\n<ol>\r\n<li>Each node informs the cluster-head node about\r\nits choice </li><li>Each node uses CSMA-\r\nMAC protocol to transmit the information </li>\r\n<li>Cluster heads must keep receivers ON\r\n</li></ol></p>\r\n<p>\r\n<ul>\r\n<li>Transmission schedule creation</li></ul></p>\r\n<ol>\r\n<li> Creates a TDMA schedule as per the number of nodes in the cluster.</li><li>Each node send their data during their allocated transmission time to the cluster head\r\n</li>\r\n</ol></p>\r\n<p><strong>Algorithm for Steady State Phase</strong></p>\r\n<p>\r\n<ol>\r\n<li>Begin sensing and transmitting data to the\r\n cluster-heads.</li>\r\n<li> Then, the cluster-head node, receive all the data, aggregates it before sending it to the base-station.</li> <li>After a certain time, which is determined a priori, the network goes back into the setup phase. </li>\r\n</ol>\r\n</p>\r\n<p><strong> Advantages of LEACH</strong></p>\r\n<p>\r\n<ul>\r\n<li>Increasing the lifetime of the sensor network.</li>\r\n<li>Self-organizing, adaptive clustering protocol that uses randomization to distribute the energy load among the sensors in the network.</li>\r\n<li>Distributed and no global knowledge of network required.</li>\r\n</ul>\r\n</p>\r\n<p><strong>Drawbacks of LEACH</strong></p>\r\n<p>\r\n<ul>\r\n<li>LEACH assumes all the nodes to have same initial energy, which is not the case always in real-time problems</li>\r\n<li>It cannot be applied for mobile nodes, failure of cluster-heads creates a lot of problems</li>\r\n<li>It does not take into account that the systems might have multiple base stations.</li>\r\n<li>Extra overhead to do dynamic clustering.</li>\r\n</ul>\r\n</p>\r\n\r\n<h3>Discussions on LEACH</h3>\r\n<p>\r\nOne of the major drawbacks  of LEACH is that the <strong>actual</strong> number of cluster heads formed per round is varying with respect to the <strong>desired</strong> number of cluster heads, specified as an input parameter to LEACH. Huafeng Liu,Liang Li and Shiyao Jin in their work on \"Cluster Number Variability Problem in LEACH\" <a href=\"/ant/ant/8/references/\">[viii]</a> had discussed about this problem, and proposed an improved clustering scheme <strong>(I-LEACH)</strong> as an improvement over LEACH.\r\n\r\nIn the above work, they discussed the I-LEACH protocol in the following steps: \r\n<ul>\r\n<li>Base station (BS) receives the aggregated data from the cluster heads. Therefore, it can be calculated that the number of nodes become the cluster head in the present round.</li> \r\n<li>Then the BS sends a broadcast message that contains the probability for the nodes to become the cluster head in the next round.</li></ul>  \r\n\r\n\r\n<h2>Applications of WSNs</h2>\r\n\r\n<p>The applications of WSNs are innumerable, since each sensor node is capable of monitoring a wide variety of ambient conditions such as temperature, humidity, lightning condition, pressure and noise levels. Below, we have given some typical application areas for WSNs. <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[i]</a></p>\r\n<p><strong>Military applications:</strong> Sensor nodes can be spread across a battlefield or enemy area and be programmed to track and monitor enemy troop movements or movement of terrorists and can be used to locate their exact positions. </p>\r\n<p><strong>Environmental applications:</strong> Sensor networks are being increasingly used for environmental concerns. Examples include tracking the nesting habits of seabirds by monitoring a large geographic region with human presence, or attaching the sensors directly to large mammals to monitor their behavior.</p>\r\n<p>Monitoring of river currents is another application of WSNs, to measure their water inflow and mixture from various sources. Water-quality monitoring may also be useful to determine contamination with bacteria or other harmful pollutants.</p>\r\n<p>the spread of sensor nodes across a forest to monitor temperatures and give early warnings of fire outbreaks. Weather prediction, climate monitoring, distributed computing, pollution tracking, seismic detection, detecting ambient conditions such as temperature, movement, sound, light, or the presence of certain objects, inventory control and disaster management are other similar applications.</p>\r\n<p><strong>Medical applications:</strong> WSNs can be used in medical applications by using the sensor node as a device that can reside on or within the human body and perform tasks that are currently done by costly machines. These include glucose monitors for continuous reading of insulin levels in diabetic patients; heart monitors for keeping track of the functioning of the heart, especially for patients with irregular heartbeats or coronary diseases; and artificial retinal and cortical implants to electronically transmit information to visually impaired persons.</p>\r\n<p>Other medical applications include use in monitoring of human physiological data, tracking and monitoring doctors and patients inside a hospital and insurance cards.</p>\r\n<p><strong>Industrial applications:</strong> For use in industrial applications, low-cost sensor nodes could be attached to equipment to monitor performance. They could also be attached to parts as they move through an assembly pipeline on the shop floor. Thus, inefficiencies in plant process flow can be recognized quickly, rush orders could be expedited more easily and customer queries could be answered faster and more accurately.</p>\r\n<p><strong>Urban applications: </strong> WSNs can be used for various urban applications like transportation and traffic systems, auto-identification by driving license, parking availability, security monitors in shopping malls, parking garages, city streets and home security.</p>\r\n<p> <strong>Some of the real applications are: </strong></p>\r\n<p> <strong>Volcano Sensor-web: </strong>This system has been used to implement a global surveillance program to study volcanoes. Sensor-web tests to study flooding, cryosphere events, and atmospheric phenomena.<a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[ii]</a> <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[iv]</a></p> \r\n<p><strong>Wireless sensor network system for landslide \r\ndetection:</strong> This system is already in place\r\nat Anthoniar Colony, Munnar, Idukki, Kerala, India. <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[iii]</a></p>\r\n<h2>Simulating a WSN using Network Simulator 2 </h2>\r\n<p> For simulating a WSN using NS2, a Mannasim simulator is required where LEACH script generator is available. </p>\r\n<p><strong>Mannasim Simulator </strong>  <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[v]</a> <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/8/references/\">[vi]</a>\r\n<p>Mannasim is a open source Wireless Sensor Networks simulation environment comprised of two solutions:</p>\r\n<p> - The Mannasim Framework</p>\r\n<p> - The Script Generator Tool </p>\r\n<p> The Mannasim Framework is a module for WSN simulation based on the Network Simulator (NS-2). Mannasim extends NS-2 introducing new modules for design, development and analysis of different WSN applications. </p>\r\n<p>The Script Generator Tool (SGT) is a front-end for TCL simulation scripts easy creation. SGT comes blunded with Mannasim Framework.</p>','<ul>\r\n<li>Understand basic concepts about Wireless Sensor Networks (WSNs), types, applications of WSN </li>\r\n<li>Gain familiarity with LEACH, a cluster based routing protocol for WSNs</li>\r\n</ul>\r\n','3.00','<p>\r\nA wireless sensor network (WSN) is a wireless network consisting of spatially distributed autonomous devices that use sensors for monitoring and recording the physical conditions of the environment and organizing the collected data at a central location. WSNs measure environmental conditions like temperature, sound, pollution levels, humidity, wind speed and direction, pressure, etc. It consists of anywhere from a few hundreds to thousands of sensor nodes. The sensor node equipment includes a radio transceiver along with an antenna, a micro-controller, an interfacing electronic circuit, and an energy source, usually a battery.</p>\r\n<p>\r\nIn this experiment, we can understand about the different protocol of WSN and the working principle of Low-Energy Adaptive Clustering Hierarchy (LEACH) protocol.</p>'),(9,'Setting up a Bluetooth Network','<h2>Bluetooth Network</h2>\r\n\r\n<p>The name <strong>Bluetooth</strong> was named after 10th century Viking king in Denmark Harald Bluetooth who united and controlled Denmark and Norway <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/9/references/\">[i]</a>. Bluetooth is a low power, low cost, and short range radio network standard. It supports unlicensed Industrial, Scientific and Medical (ISM) 2.4 GHz short-range radio frequency band. It is complementary to the Wi-Fi network specified by IEEE 802.11b/g/a standard. Bluetooth uses a frequency hopping scheme to provide robust wireless communication. As a cable replacement, Bluetooth is widely used in cell phone, PDA, laptop, headset, and printer, etc. to form a Personal Area Network (PAN) and provide universal access . Bluetooth uses a radio technology called frequency-hopping spread spectrum <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/9/references/\">[ii]</a>. </p>\r\n\r\n\r\n<h2>Who started Bluetooth ?</h2>\r\n<p><ul>\r\n<li>Bluetooth wireless technology was accepted by engineers at Swedish telecommunications manufacturer Telefonaktiebolaget LM Ericsson <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/9/references/\">[iii]</a></li>\r\n<li>In 1994 Ericsson had started a project to study the feasibility of a low-cost and low-power radio interface to replace cables between mobile accessories and mobile phones</li>\r\n<li>In 1998, Bluetooth technology was starting to take shape and led to the development of the Bluetooth Special Interest Group (SIG); with the founding members being:IBM, Intel, Nokia, Toshiba and Ericsson</li>\r\n</ul></p>\r\n\r\n\r\n<h2>Bluetooth vs Wi-Fi </h2>\r\n<p>Bluetooth and Wi-Fi technologies have some similarities because both are wireless technologies and used to communicate with other devices.\r\n<table class=\"techno\">\r\n<tr>\r\n<td><b><center>Parameters</td>\r\n<td><b><center>Bluetooth</td>\r\n<td><b><center>WiFi</td>\r\n</tr> \r\n<tr>\r\n<td>Year of development</td>\r\n<td>1994</td>\r\n<td>1991</td>\r\n</tr>\r\n<tr>\r\n<td>IEEE Standard</td>\r\n<td>802.15</td>\r\n<td>802.11</td>\r\n</tr>\r\n<tr>\r\n<td>Power Consumption</td>\r\n<td>Low</td>\r\n<td>High</td>\r\n</tr>\r\n<tr>\r\n<td>Cost</td>\r\n<td>Low</td>\r\n<td>High</td>\r\n</tr>\r\n<tr>\r\n<td>Bandwidth</td>\r\n<td>Low ( 800 Kbps )</td>\r\n<td>High (11 Mbps )</td>\r\n</tr>\r\n<tr>\r\n<td>Range</td>\r\n<td>10 meters</td>\r\n<td>100 meters</td>\r\n</tr>\r\n<tr>\r\n<td>Frequency</td>\r\n<td>2.4 GHz</td>\r\n<td>2.4 GHz</td>\r\n</tr>\r\n<tr>\r\n<td>Network</td>\r\n<td>Personal Area Network (PAN)</td>\r\n<td>Wireless Local Area Networks (WLAN)</td>\r\n</tr>\r\n<tr>\r\n<td>Hardware requirement</td>\r\n<td>Bluetooth adaptor on all the devices connecting with each other</td>\r\n<td>Wireless adaptors on all the devices of the network, a wireless router and/or wireless access points</td>\r\n</tr>\r\n<tr>\r\n<td>Specifications authority</td>\r\n<td>Bluetooth SIG</td>\r\n<td>IEEE, WECA</td>\r\n</tr>\r\n<tr>\r\n<td>Primary Devices</td>\r\n<td>Mobile phones, mouse, keyboards, office and industrial automation devices</td>\r\n<td>Notebook computers, desktop computers, servers</td>\r\n</tr>\r\n<tr>\r\n<td>Ease of Use</td>\r\n<td>Fairly simple to use. Can be used to connect up to seven devices at a time. It is easy to switch between devices or find and connect to any device.</td>\r\n<td>It is more complex and requires configuration of hardware and software.</td>\r\n</tr>\r\n</table></p>\r\n\r\n\r\n<h2>Bluetooth – Power Classes</h2>\r\n<p>Power Classes :  \r\n<table class=\"techno\">\r\n<tr>\r\n<td><b><center>Class</td>\r\n<td><b><center>Maximum Permitted Power</td>\r\n<td><b><center>Operating Range</td>\r\n</tr> \r\n<tr>\r\n<td>Class 1</td>\r\n<td>100mW (20dBm)</td>\r\n<td>100 meters</td>\r\n</tr>\r\n<tr>\r\n<td>Class 2</td>\r\n<td>2.5mW (4dBm)</td>\r\n<td>10 meters</td>\r\n</tr>\r\n<tr>\r\n<td>Class 3</td>\r\n<td>1mW (0dBm)</td>\r\n<td>1 meter</td>\r\n</tr>\r\n</table>\r\n</p>\r\nIn this case, if you wish to communicate over the 100m range, you will need a class 1 Bluetooth device at both ends. But if you wish to communicate over the 10m range, you can have a class 1 or class 2 device at both ends.\r\n\r\n\r\n<h2>Bluetooth - Versions</h2>  \r\n<p>Many Bluetooth specification versions have been released since Bluetooth technology was finally introduced in 1998. <strong>Versions 1.0 </strong> and 1.0B <a href=\"http://vlssit.iitkgp.ernet.in/ant/ant/9/references/\">[iv]</a> had too many problems and restraints for manufacturers to successfully develop Bluetooth devices. The main issue was the lack of interoperability among devices.\r\n<ul>\r\n<li><strong>Bluetooth 1.1</strong> : The Bluetooth Core Specification version 1.1 is the most successful operating version of Bluetooth technology. Bluetooth 1.1 corrected many of the problems found in the earlier versions. As a result, the devices using Bluetooth 1.1 have much more interoperability. </li>\r\n<li><strong>Bluetooth 1.2</strong> : Many new Bluetooth devices, like the latest cell phones, are being sold with the newer Bluetooth specification version 1.2. It has backward compatible with Bluetooth 1.1, adaptive Frequency Hopping - helps reduce radio interference by eliminating the use of crowded frequencies in the hopping sequence, faster transmission speeds (1 Mbps) etc.</li>\r\n<li><strong>Bluetooth 2.0</strong> : Version 2.0 + EDR (Enhanced Data Rate) was announced by the Bluetooth SIG in June 2004 and began appearing in Bluetooth devices in late 2005. It delivers data transfer rates up to three times faster than the original Bluetooth specification.</li>\r\n<li><strong>Bluetooth 2.1</strong>: Bluetooth Core Specification Version 2.1 is fully backward compatible with 1.2, and was adopted by the Bluetooth SIG on July 26, 2007. It supports theoretical data transfer speeds of up to 3 Mb/s. This specification includes two features, such as, Extended inquiry response (EIR) and Sniff subrating </li>\r\n<li><strong>Bluetooth 3.0 </strong>: The 3.0 specification was adopted by the Bluetooth SIG on April 21, 2009. It supports theoretical data transfer speeds of up to 24 Mb/s. Its main new feature is AMP (Alternate MAC/PHY), the addition of 802.11 as a high speed transport </li>\r\n</ul></p>\r\n\r\n\r\n<h2>How does Bluetooth work ?</h2>\r\n<p>\r\n<ul>\r\n<li>Bluetooth is a standard for tiny, radio frequency chips that can be plugged into your devices</li>\r\n<li>These chips were designed to take all of the information that your wires normally send, and transmit it at a special  frequency to something called a receiver   Bluetooth chip </li>\r\n<li>Bluetooth chip is designed to replace cables. Information normally carried by the cable, is transmitted  at a special frequency to a receiver Bluetooth chip</li>\r\n<li>These devices can form a quick ad-hoc secure “piconet” and start communication</li>\r\n<li>A piconet starts with two connected devices, and may grow to eight connected devices</li>\r\n<li>All Bluetooth devices are peer units and have identical implementations. However, when establishing a piconet, one unit will act as a Master and the other(s) as slave(s) for the duration of the piconet connection</li>\r\n</ul></p>\r\n<h2>Networking of Bluetooth</h2>\r\n<p>Bluetooth technology provides both <strong>point-to-point</strong> and <strong>point-to-multipoint </strong>connection. In point-to-multipoint connections, the channel is shared among several Bluetooth units. In point-to-point connections, only two units share the connection. Bluetooth protocols assume that a small number of units will participate in communications at any given time. These small groups are called <strong>piconets</strong> , and they consist of one master unit and up to seven active slave units. The master is the unit that initiates transmissions, and the slaves are responding units. This type of Bluetooth network can have only one master unit. If several piconets overlap a physical area, and members of the various piconets communicate with each other, this new, larger network is known as a <strong> scatternet</strong> . Any unit in one piconet can communicate in a second piconet as long as it serves as master for only one piconet at a time. The following figure-01 illustrated the Bluetooth Scatternet scenario with slave/slave node. \r\n<center>\r\n  <img src=\"_STATIC_URL_/ant/images/theory/ant/bluetooth/Scatternet1.png\" class=\"diagram\">Figure-01: Illustration of Bluetooth Piconets & Scatternet with Slave/Slave node</center>\r\n\r\n</p>\r\n<p>When the no. of piconet connect with each other with the slave nodes, then the slave nodes, which are connected with both the Master nodes of Piconets are known as <strong>Slave/Slave</strong> nodes. But when the no. of piconets are connected with each other with another master nodes, then the master nodes, which are Slave to one Piconet and Master for other Piconets are known as <strong>Master/Slave</strong> nodes.The following figure-02 illustrated the Bluetooth Scatternet with master/slave scenario. <center>\r\n  <img src=\"_STATIC_URL_/ant/images/theory/ant/bluetooth/masterslave1.png\" class=\"diagram\">Figure-02: Illustration of Bluetooth Scatternet with Master/Slave node </center></p>\r\n\r\n\r\n<h2>How to connect Bluetooth ?</h2>\r\n<p>Bluetooth enables ad hoc networking. Rather than depending on a broadband system, which relies on terminals and base stations for maintaining connections to the network via radio links, Bluetooth implements peer-to-peer connectivity. No base stations or terminals are involved. Using peer-to-peer connectivity, Bluetooth technology simplifies personal area wireless connections, enabling all digital devices to communicate spontaneously. </p>\r\n<p>Bluetooth technology also provides fast, secure voice and data transmissions. The range for connectivity is up to 10 meters, and line of sight is not required. The Bluetooth radio unit:\r\n<p>\r\n<ul>\r\n<li>Functions even in noisy radio environments, ensuring audible voice transmissions in severe conditions</li>\r\n<li>Protects data by using error-correction methods</li>\r\n<li>Provides a high transmission rate</li>\r\n<li>Encrypts and authenticates for privacy</li>\r\n</ul>\r\n</p>\r\n\r\n\r\n<h2>Simulating Bluetooth Network with NS-2</h2>\r\n\r\n<p>\r\nWe have used UCBT (Bluetooth extension for NS-2 at the University of Cincinnati) extension for Bluetooth. Other Bluetooth extensions are BlueHoc and Blueware. UCBT is the most accurate, complete and up-to-date open-source Bluetooth simulator. UCBT adapts to the PAN profile with Bluetooth Network Encapsulation Protocol (BNEP). UCBT provides multiple bridge scheduling algorithms to enable scatternets to operate smoothly. Prototype self-organized scatternets are being designed and simulated.\r\n</p>\r\n\r\n<p>\r\nEngelstad <em>et al.</em> (2003) <a href=\"/ant/ant/9/references/\">[v]</a> proposed two algorithms for the formation of scatternets. While studying such algorithms is out of scope of the present lab experiment, we focus on a few performance metrics that the authors have considered. Let <span class=\"syntax\">N</span> and <span class=\"syntax\">M</span>, respectively, denote the total number of nodes in the scatternet and the number of master nodes (= number of piconets). Further, let <span class=\"syntax\">S</span>, <span class=\"syntax\">SS</span> and <span class=\"syntax\">MS</span>, respectively, denote the counts of the number of pure slave, slave-slave and master-slave nodes in the scatternet so formed. Engelstad <em>et al.</em> defined the following two metrics based on these data:\r\n\r\n<ul>\r\n    <li><strong>Piconet density</strong>: <span class=\"syntax\">P</span> = <span class=\"syntax\">M</span> / <span class=\"syntax\">N</span></li>\r\n    <li><strong>Slave degree</strong>: <span class=\"syntax\">D</span> = (<span class=\"syntax\">S</span> + <span class=\"syntax\">SS</span> + <span class=\"syntax\">MS</span>) / <span class=\"syntax\">M</span></li>\r\n</ul>\r\n\r\nThe authors noted that high piconet density could result in interference among the Bluetooth devices.\r\n</p>\r\n\r\n<p>\r\nThe UCBT Bluetooth extension that we have used for this experiment, defines the degrees of the different types of nodes in the connectivity graph (in the file lmp.cc) formed in the scatternet as follows:\r\n</p>\r\n\r\n<pre>\r\nDegree in the connectivity graph\r\n   slave: 1\r\n   master: number of 1 hop masters or 2 hop masters via S/S bridges\r\n   S/S bridge: number of masters\r\n   M/S bridge: number of masters + number of 1 hop masters or 2 hop \r\n                                   masters via S/S bridges for master role.\r\n   Well, the degree of a master need more thoughts.\r\n   Basically, we want to remove duplicated bridges.\r\n</pre>\r\n\r\n<p>\r\nBased on these, a set of metrics are defined, which we will consider in details in the exercise for this experiment.\r\n</p>','<ul>\r\n  <li>Understand about Bluetooth networks and how it is differentiate from WiFi networks</li>\r\n  <li>Get familiar with Piconet and Scatternet formation</li>\r\n<li>Simulating the Bluetooth networks with NS2 by using UCBT extensions</li>  \r\n</ul>','3.00','<p>Bluetooth was ratified as IEEE 802.15 standard. The technology got its unusual name in honor of Harald Bluetooth, king of Denmark in the mid-tenth century. It is used for short-range connections between desktop and laptop computers, PDAs, digital cameras, scanners, cellular phones, and printers. Bluetooth uses a standard 2.4 GHz frequency so that all bluetooth-enabled devices will be compatible with each other.</p>\r\n<p>In this experiment, we will learn about the formation of Piconet and Scatternet by using UCBT extension for NS2</p>'),(10,'Setting up a ZigBee Network','<h2>ZigBee Network</h2>\r\n\r\n<p>The name ZigBee originates from the zig-zag waggle dance of Honey bees <a href=\"/ant/ant/10/references/\">[i]</a>. ZigBee is based on  IEEE 802.15.4 standard for Low Rate Wireless Personal Area Network (LR-WPAN). ZigBee uses radio frequency (RF) for communication and operated on one of the three different radio bands: 868 MHz in Europe, 915 MHz in the USA and Australia, and 2.4 GHz in world wide. </p>\r\n<table><p>\r\n\r\n\r\n<h2> IEEE 802.15.4 and ZigBee</h2>\r\n<p>The following table describe about  IEEE 802.15.4 and ZigBee <a href=\"/ant/ant/10/references/\">[vii]</a> </p>\r\n<table class=\"techno\">\r\n<tr>\r\n<td><b><left> IEEE 802.15.4</td>\r\n<td><b><left> ZigBee </td>\r\n</tr> \r\n<tr>\r\n<td> It was created by the Institute of Electrical and Electronics Engineers (IEEE),for low rate personal area network.</td>\r\n<td> It was created by the ZigBee Alliance.</td>\r\n</tr>\r\n<tr>\r\n<td> IEEE 802.15.4 focuses on lower two layers(physical and data link layer) of OSI. </td>\r\n<td> ZigBee Alliance aims to provide the upper layers (from network to the application layer) of OSI based on IEEE 802.15.4.</td>\r\n</tr>\r\n<tr>\r\n<td> Its main purpose is the communication between two devices.</td>\r\n<td> Its main purpose is to create a network topology and add features such as security, encryption, association and in the upper layer application services.</td>\r\n</tr>\r\n</table>\r\n</p>\r\n<table><p>\r\n\r\n\r\n<h2> ZigBee vs. Bluetooth</h2>\r\nThe following table describe the difference between ZigBeeand Bluetooth  <a href=\"/ant/ant/10/references/\">[vii]</a>.\r\n<table class=\"techno\">\r\n<tr>\r\n<td><b><center>ZigBee</td>\r\n<td><b><center>Bluetooth </td>\r\n</tr> \r\n<tr>\r\n<td> ZigBee is a low-cost, low-power, wireless mesh network.</td>\r\n<td> Bluetooth was designed for low power consumption with short range communications.</td>\r\n</tr>\r\n<tr>\r\n<td> The operational range of ZigBee is 10-75m. </td>\r\n<td> The operational range of Bluetooth is 10m.</td>\r\n</tr>\r\n<tr>\r\n<td> It allows up to 254 nodes.</td>\r\n<td> It allows up to 8 slave nodes in a basic master-slave piconet set-up.</td>\r\n</tr>\r\n<tr>\r\n<td> Battery life is 100-1000 days.</td>\r\n<td> Battery life is 1-7 days.</td>\r\n</tr>\r\n</table>\r\n</p>\r\n\r\n\r\n<h2>Features & Characteristic of ZigBee Technology</h2>\r\n<p> The features and characteristics of Zigbee technology [v] are as follows:\r\n<ol>\r\n    <li>ZigBee network connect several units and control through one button.</li>\r\n    <li>ZigBee network is controlled by a remote control device at a specific range and as the control device is present centrally,it reduces manpower.</li>\r\n    <li>ZigBee devices are reliable because they are designed on low-power frequency.</li>\r\n<li>ZigBee technology supports 3 different types of devices.They are coordinator, router and end-user devices.\r\n</ol><ul>\r\n<li>Coordinators are the primary devices to help in activation of the system by collecting the data in form of memory.  </li>\r\n<li>Routers are the secondary devices that function by sending information to the destination. </li>\r\n<li>End-user devices are basically receivers that are not able to send information itself. </li>\r\n</ul>\r\n\r\n\r\n<h2>Application of ZigBee Technology</h2><ul>\r\n<p> ZigBee Technology used in many applications  <a href=\"/ant/ant/10/references/\">[v]</a>. Some of them are described below:  \r\n<li>ZigBee technology is programmed in a chip form and that chip is used in many devices to function automatically. For example controlling and monitoring a whole factory unit while sitting in one cabin is possible by using ZigBee technology.</li>\r\n<li>Building automation</li> \r\n<li>Consumer electronics</li>\r\n<li>Automatic meter reading</li>\r\n<li>Home automation </li>\r\n<li>Managing health care system</li>\r\n<li>Retail management</li>\r\n<li>Telecommunications </li>\r\n</ul>\r\n\r\n\r\n<h2>Component of IEEE 802.15.4 LR-WPAN</h2>\r\n<p> Different component of IEEE 802.15.4 LR-WPAN  <a href=\"/ant/ant/10/references/\">[vi]</a> are: </p>\r\n<ul>\r\n<li><strong>Coordinator : </strong> Coordinator controls and monitor the established network. Based on their operation scope two different kinds of coordinators are present.The PAN-Coordinator, which acts as a coordinator for the entire PAN and the ordinary coordinator,which function within the scope of a cluster.\r\n</li>\r\n<li><strong>Cluster :</strong> A cluster is a small section of a bigger network, which has its own coordinator. Groups of clusters communicate with a central PAN-Coordinator to form the PAN in a mesh topology. </li>\r\n<li><strong>Device/End Node :</strong> A device is either a reduced/full function device, these are the end devices(leaf of a tree structure). Any device that is not a co-ordinator is an end node (device).</li>\r\n<li><strong>Personal Operating Space(POS) :</strong> It is the operating range of a node in all directions, and is a constant irrespective of being in motion or stationary. </li>\r\n</ul>\r\n<p>There are 14 PHY and 35 MAC Primitives defined by the IEEE 802.15.4 standard  <a href=\"/ant/ant/10/references/\">[iv]</a>. The LR-WPAN supports two types of devices called the Full Function Device and the Reduced Function Device. <ul> \r\n<li><strong>Full Function Device(FFD) :</strong> It is a device which supports all the 49 primitives supported by the technology  <a href=\"/ant/ant/10/references/\">[iv]</a>. It acts as a PAN coordinator, a Coordinator, or just as an end node (device). Also an FFD can function as a routing device in certain network topologies where data transfer among FFD is allowed (EX: peer-to-peer communication). </li>\r\n<li><strong>Reduced Function Device(RFD) :</strong> It is a device with reduced functionality which can only function as an end device or node. It can only communicate with the coordinator. Their functionality is extremely low. So these devices are intended for simple applications like a light switch, etc. They merely send information to the coordinator at regular intervals about the status of the device it is monitoring. It can only support a maximum of 38 primitives  <a href=\"/ant/ant/10/references/\">[iv]</a>.</li>\r\n</ul></p>\r\n\r\n\r\n<h2>Network Topologies </h2>\r\n<p>A Low rate WPAN supports three different types of topologies  <a href=\"/ant/ant/10/references/\">[vi]</a>.\r\n<ul> \r\n<li>Star Topology</li>\r\n<li>Peer-to-Peer Topology</li>\r\n<li>Cluster Tree/Mesh Topology</li>\r\n \r\n</ul>\r\n</p>\r\n<p><strong>Star Topology</strong></p>\r\n<p>In the star topology, the PAN coordinator have the primary control. In this topology devices monitore their application and report it to the coordinator.The Figure-01 shows star topology. </p>\r\n<center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/zigbee/Figure1Startopology.jpeg\' /> Figure-01: Star topology </center>\r\n<p> <strong>Peer-to-Peer Topology</strong> </p>\r\n<p>The peer-to peer topology has a PAN coordinator and any device can communicate with any other device.This topology allows more complex network formations.Figure-02 shows peer-to-peer topology.</p>  \r\n<center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/zigbee/Figure-2peertopeer.jpeg\' /> Figure-02: Peer-to-peer topology</center>\r\n<p>In the above figure the possible communication scenarios are between node-to-node, node-to-coordinator, coordinator-to-node. As is evident if two devices need to transfer data, both have to be full function devices. A peer-to-peer network can be ad-hoc, self-organizing and self-healing.</p> \r\n<p><strong>Cluster-Tree Topology</strong></p>\r\n<p>In cluster tree topology several small clusters are present and are able to communicate peer-to-peer and can be controlled with a PAN coordinator. Each cluster can have its own coordinator and the coordinators can communicate with the PAN Coordinator. We can choose a PAN coordinator among several existing clusters.Figure-03 shows cluster-tree topology.</p> \r\n<center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/zigbee/ClusterTree.jpeg\' /> Figure-03: Cluster-tree topology </center>\r\n\r\n\r\n<h2>ZigBee Architecture </h2>\r\n\r\n<p> IEEE 802.15.4 consists of PHY and the MAC layers  <a href=\"/ant/ant/10/references/\">[vi]</a>. The upper layers are left for application developers.\r\n<p>The PHY layer is responsible for activation and deactivation of the radio transceiver, ED, LQI, channel selection, clear channel assessment (CCA), and transmitting as well as receiving packets across the physical medium. Similarly, the MAC layer is responsible for beacon management, channel access, guaranteed time slots (GTS) management, frame validation, acknowledged frame delivery, association, and disassociation. </p>\r\n<center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/zigbee/Figure4.jpeg\' /> Figure-04: IEEE 802.15.4 Architecture  <a href=\"/ant/ant/10/references/\">[vi]</a>. </center>\r\n<h2>The Superframe structure</h2>\r\n<p>The superframe structure  <a href=\"/ant/ant/10/references/\">[vi]</a> is determined by the coordinator. IEEE 802.15.4 networks are able to operate in two different modes of operation\r\n<ul> <li>Beacon mode or \r\n </li>\r\n<li>Non beacon mode </li>\r\n</ul>\r\n</p>\r\n<p>In beacon mode, the coordinator sends out periodic packets or beacons. The purpose of this is to enable all nodes to sleep between beacons and wake up when the beacon timer expires, ready to receive the beacon from the coordinator. The superframe structure is only applicable in beacon mode networks. In non beacon networks the superframe structure is disabled and nodes contend for channel access by CSMA/CA. </p>\r\n<center>\r\n<img src=\'_STATIC_URL_/ant/images/theory/ant/zigbee/Figure5Superframe.jpeg\' /> Figure-05: The superframe structure  <a href=\"/ant/ant/10/references/\">[viii]</a></center>\r\n<p><strong>Contention Access Period:</strong> It is the time duration in symbols during which the devices can compete with each other to access the channel using CSMA-CA and transmit the data.</p>\r\n<p><strong>Contention Free Period/Guaranteed Time Slots: </strong> Certain low-latency application devices are given exclusive rights over the channel to start transmission directly.  There can as many as 7 slots assigned for GTS transmissions. These transmissions start immediately after the contention access period.</p>\r\n<p> <strong>Inactive Period:</strong> It is the time period during which the coordinator would not interact with the PAN. Therefore, there will be no beacon transmissions. So the devices go to sleep mode in this duration.</p>\r\n<p><strong>Superframe Duration:</strong> The total time duration of the CAP, CFP (GTS) and a Beacon. The superframe duration doesn’t include the inactive period.</p><p> <strong>Beacon Interval:</strong> It is the time duration between two successive beacons. </p>\r\n<p>The beacon and superframe orders can range from 1 to 15 inclusive but the superframe order must be less than or equal to the beacon order. When the beacon and superframe order are equal there is no inactive period between beacons, when the superframe order is less than the beacon order there is an inactive period and setting them both to 15 disables beacon mode. \r\n</p>\r\n\r\n\r\n<h2>Nodes Configuration</h2> \r\n<p> The node configurations  <a href=\"/ant/ant/10/references/\">[ix]</a> of ZigBee network are defined below:\r\n<ul>\r\n<li>The PAN coordinator  in ZigBee network are defined by:</li>\r\n<pre class=\"brush: bash;\">$ node SSCS StartPANCoord &lt;txBeacon&gt; &lt;beacon Order(BO)&gt; &lt;superframeorder(SO)&gt; ; # PAN coordinator default values txBeacon=1,BO=3,SO=3</pre>\r\n<p>The above syntax is use to initiate a Pan-Coordinator in a network & any device can be made pan-coordinator by using above syntax, even if any of the above parameters are omitted, then the default values in an above equation can be used. </p>\r\n\r\n<p>Example:</p>\r\n<pre class=\"brush: bash;\">$node_(0) sscs startPANCoord     		; # PAN coordinator default BO=3, SO=3\r\n$node_(0) sscs startPANCoord 1 6 2	        ; # PAN coordinator with BO=6, SO=2</pre> \r\n\r\n<li>The syntax for configuring a full functional device is: </li>\r\n<pre class=\"brush: bash;\">$ node SSCS startdevice &lt;isFFD&gt; &lt;assopermit&gt; &lt;txBeacon&gt; &lt;BO&gt; &lt;SO&gt;  ; # Default value isFFD=1,assopermit=1,txBeacon=0, BO=3, SO=3</pre>\r\n\r\n<p> The above command turned on the node as a device or a coordinator, if some of\r\nthe parameter is neglected than the rest of parameters will get set by default variable as defined above.</p>\r\n<p>Example: </p>\r\n<pre class=\"brush: bash;\">$node_ (0) sscs startDevice 0         ; # device\r\n$node_ (0) sscs startDevice        ; # coordinator non-beacon\r\n$node_ (0) sscs StartDevice 1 1 1  ; # coordinator beacon enabled\r\n</pre>\r\n</ul></p>\r\n\r\n\r\n<h2> Energy Model</h2>\r\n<p> \r\nAt the beginning of the simulation the node has an initial energy. This is known as initialEnergy <a href=\"/ant/ant/10/references/\">[vii]</a>. Energy is consumed when a node receives or transmits a packet. This energy are called rxPower and txPower. </p>\r\n<p> The basic energy model is defined by class EnergyModel as shown below:</p>\r\n<pre class=\"brush:cpp\">class EnergyModel : public TclObject {\r\npublic:\r\n  EnergyModel(double energy) { energy_ = energy; }\r\n  inline double energy() { return energy_; }\r\n  inline void setenergy(double e) {energy_ = e;}\r\n  virtual void DecrTxEnergy(double txtime, double P_tx) {\r\n    energy_ -= (P_tx * txtime);\r\n  }\r\n  virtual void DecrRcvEnergy(double rcvtime, double P_rcv) {\r\n    energy_ -= (P_rcv * rcvtime);\r\n  }\r\nprotected:\r\n  double energy_;\r\n};\r\n</pre>\r\n\r\n<p>The class variable energy_  represents the level of energy in the node at any given time. The constructor EnergyModel(energy) requires the initial-energy to be passed along as a parameter. The other class methods are used to decrease the energy level of the node for every packet transmitted\r\n( DecrTxEnergy(txtime, P_tx)) and every packet received ( DecrRcvEnergy (rcvtime, P_rcv)) by the node. P_tx and P_rcv are the transmitting and receiving power (respectively) required by the node’s interface or PHY. At the beginning of simulation, energy_ is set to initialEnergy_ which is then decremented for every transmission and reception of packets at the node. When the energy level at the node goes down to zero, no more packets can be received or transmitted by the node. \r\n</p>\r\n<p>The mobile node energy trace begins “N”. The format of the trace file is given below: </p>\r\n<pre class=\"brush:bash\"> N -t &lt;time&gt; -n &lt;node id&gt; -e &lt;node energy&gt; </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<!--p><strong>Courtesy: </strong>Some parts of the above texts are copied from </p>\r\n<ul> <li>&quot;ZigBee/IEEE 802.15.4 Summary&quot;, Sinem Coleri Ergen, 2004</li> \r\n<li>&quot;The simulative Investigation of Zigbee/IEEE 802.15.4&quot;, Vaddina Prakash Rao, Dresden University of Technology, 2005.</li>\r\n<li>&quot;Power Characterisation of a Zigbee Wireless Network in a Real Time Monitoring Application&quot, Arrian Prince-Pike, Auckland University of Technology, 2009</li>\r\n<li>&quot;The ns Manual&quot;, Kevin Fall & Kannan Varadhan, 2011 </li>\r\n</ul-->','<ul>\r\n  <li>Understand about the basics of Zigbee Networks </li>\r\n  <li>Learn the simulation of star topology in ns2</li>\r\n  </ul>','3.00','<p>\r\nZigbee is used for wireless personal area network (PAN). It support thousands of nodes in each PAN. Zigbee devices work with low power. So energy consumption is  less and battery life is more. Zigbee technology used in  many applications, such as industry, medical applications, residential.  </p>\r\n<p>\r\nIn this experiment, we will learn the simulation of star topology in zigbee network and study how energy consumption vary with beacon order for different superframe order. </p>   ');
/*!40000 ALTER TABLE `ant_theory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ant_workspace`
--

DROP TABLE IF EXISTS `ant_workspace`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ant_workspace` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `wtype` varchar(80) NOT NULL,
  `description` varchar(80) NOT NULL,
  `code` longtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ant_workspace`
--

LOCK TABLES `ant_workspace` WRITE;
/*!40000 ALTER TABLE `ant_workspace` DISABLE KEYS */;
INSERT INTO `ant_workspace` VALUES (1,'Blank','Empty workspace','&nbsp;'),(2,'Inline','All HTML required is present here','&nbsp;'),(3,'ns2','ns2 interface','&nbsp;'),(4,'ns3','ns3 interface','&nbsp;');
/*!40000 ALTER TABLE `ant_workspace` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `auth_group_permissions_425ae3c4` (`group_id`),
  KEY `auth_group_permissions_1e014c8f` (`permission_id`),
  CONSTRAINT `group_id_refs_id_3cea63fe` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `permission_id_refs_id_5886d21f` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_message`
--

DROP TABLE IF EXISTS `auth_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `auth_message_403f60f` (`user_id`),
  CONSTRAINT `user_id_refs_id_650f49a6` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_message`
--

LOCK TABLES `auth_message` WRITE;
/*!40000 ALTER TABLE `auth_message` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`),
  KEY `auth_permission_1bb8f392` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_728de91f` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add permission',1,'add_permission'),(2,'Can change permission',1,'change_permission'),(3,'Can delete permission',1,'delete_permission'),(4,'Can add group',2,'add_group'),(5,'Can change group',2,'change_group'),(6,'Can delete group',2,'delete_group'),(7,'Can add user',3,'add_user'),(8,'Can change user',3,'change_user'),(9,'Can delete user',3,'delete_user'),(10,'Can add message',4,'add_message'),(11,'Can change message',4,'change_message'),(12,'Can delete message',4,'delete_message'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add site',7,'add_site'),(20,'Can change site',7,'change_site'),(21,'Can delete site',7,'delete_site'),(22,'Can add theory',8,'add_theory'),(23,'Can change theory',8,'change_theory'),(24,'Can delete theory',8,'delete_theory'),(25,'Can add procedure',9,'add_procedure'),(26,'Can change procedure',9,'change_procedure'),(27,'Can delete procedure',9,'delete_procedure'),(28,'Can add self evaluation',10,'add_selfevaluation'),(29,'Can change self evaluation',10,'change_selfevaluation'),(30,'Can delete self evaluation',10,'delete_selfevaluation'),(31,'Can add simulation',11,'add_simulation'),(32,'Can change simulation',11,'change_simulation'),(33,'Can delete simulation',11,'delete_simulation'),(34,'Can add exercise',12,'add_exercise'),(35,'Can change exercise',12,'change_exercise'),(36,'Can delete exercise',12,'delete_exercise'),(37,'Can add solution',13,'add_solution'),(38,'Can change solution',13,'change_solution'),(39,'Can delete solution',13,'delete_solution'),(40,'Can add book',14,'add_book'),(41,'Can change book',14,'change_book'),(42,'Can delete book',14,'delete_book'),(43,'Can add reference',15,'add_reference'),(44,'Can change reference',15,'change_reference'),(45,'Can delete reference',15,'delete_reference'),(46,'Can add log entry',16,'add_logentry'),(47,'Can change log entry',16,'change_logentry'),(48,'Can delete log entry',16,'delete_logentry'),(49,'Can add workspace',17,'add_workspace'),(50,'Can change workspace',17,'change_workspace'),(51,'Can delete workspace',17,'delete_workspace'),(52,'Can add contact',18,'add_contact'),(53,'Can change contact',18,'change_contact'),(54,'Can delete contact',18,'delete_contact'),(55,'Can add comment',19,'add_comment'),(56,'Can change comment',19,'change_comment'),(57,'Can delete comment',19,'delete_comment'),(58,'Can moderate comments',19,'can_moderate'),(59,'Can add comment flag',20,'add_commentflag'),(60,'Can change comment flag',20,'change_commentflag'),(61,'Can delete comment flag',20,'delete_commentflag'),(62,'Can add default code',21,'add_defaultcode'),(63,'Can change default code',21,'change_defaultcode'),(64,'Can delete default code',21,'delete_defaultcode'),(65,'Can add Threaded Comment',22,'add_threadedcomment'),(66,'Can change Threaded Comment',22,'change_threadedcomment'),(67,'Can delete Threaded Comment',22,'delete_threadedcomment'),(68,'Can add Free Threaded Comment',23,'add_freethreadedcomment'),(69,'Can change Free Threaded Comment',23,'change_freethreadedcomment'),(70,'Can delete Free Threaded Comment',23,'delete_freethreadedcomment'),(71,'Can add test model',24,'add_testmodel'),(72,'Can change test model',24,'change_testmodel'),(73,'Can delete test model',24,'delete_testmodel'),(74,'Can add flat page',25,'add_flatpage'),(75,'Can change flat page',25,'change_flatpage'),(76,'Can delete flat page',25,'delete_flatpage'),(77,'Can add task meta',26,'add_taskmeta'),(78,'Can change task meta',26,'change_taskmeta'),(79,'Can delete task meta',26,'delete_taskmeta'),(80,'Can add taskset meta',27,'add_tasksetmeta'),(81,'Can change taskset meta',27,'change_tasksetmeta'),(82,'Can delete taskset meta',27,'delete_tasksetmeta'),(83,'Can add interval',28,'add_intervalschedule'),(84,'Can change interval',28,'change_intervalschedule'),(85,'Can delete interval',28,'delete_intervalschedule'),(86,'Can add crontab',29,'add_crontabschedule'),(87,'Can change crontab',29,'change_crontabschedule'),(88,'Can delete crontab',29,'delete_crontabschedule'),(89,'Can add periodic tasks',30,'add_periodictasks'),(90,'Can change periodic tasks',30,'change_periodictasks'),(91,'Can delete periodic tasks',30,'delete_periodictasks'),(92,'Can add periodic task',31,'add_periodictask'),(93,'Can change periodic task',31,'change_periodictask'),(94,'Can delete periodic task',31,'delete_periodictask'),(95,'Can add worker',32,'add_workerstate'),(96,'Can change worker',32,'change_workerstate'),(97,'Can delete worker',32,'delete_workerstate'),(98,'Can add task',33,'add_taskstate'),(99,'Can change task',33,'change_taskstate'),(100,'Can delete task',33,'delete_taskstate');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(75) NOT NULL,
  `password` varchar(128) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `last_login` datetime NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'tanay','','','tanay1587@gmail.com','sha1$75047$abca3c3e680a89f254518d44ebbaa92360e19218',1,1,1,'2013-03-07 19:09:29','2010-10-06 11:20:58');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `auth_user_groups_403f60f` (`user_id`),
  KEY `auth_user_groups_425ae3c4` (`group_id`),
  CONSTRAINT `group_id_refs_id_f116770` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `user_id_refs_id_7ceef80f` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `auth_user_user_permissions_403f60f` (`user_id`),
  KEY `auth_user_user_permissions_1e014c8f` (`permission_id`),
  CONSTRAINT `permission_id_refs_id_67e79cb` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `user_id_refs_id_dfbab7d` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `user_id` int(11) NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_403f60f` (`user_id`),
  KEY `django_admin_log_1bb8f392` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_288599e6` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `user_id_refs_id_c8665aa` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2502 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `django_comment_flags`
--

DROP TABLE IF EXISTS `django_comment_flags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_comment_flags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `comment_id` int(11) NOT NULL,
  `flag` varchar(30) NOT NULL,
  `flag_date` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`comment_id`,`flag`),
  KEY `django_comment_flags_403f60f` (`user_id`),
  KEY `django_comment_flags_64c238ac` (`comment_id`),
  KEY `django_comment_flags_111c90f9` (`flag`),
  CONSTRAINT `comment_id_refs_id_373a05f7` FOREIGN KEY (`comment_id`) REFERENCES `django_comments` (`id`),
  CONSTRAINT `user_id_refs_id_603c4dcb` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_comment_flags`
--

LOCK TABLES `django_comment_flags` WRITE;
/*!40000 ALTER TABLE `django_comment_flags` DISABLE KEYS */;
/*!40000 ALTER TABLE `django_comment_flags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_comments`
--

DROP TABLE IF EXISTS `django_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content_type_id` int(11) NOT NULL,
  `object_pk` longtext NOT NULL,
  `site_id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `user_name` varchar(50) NOT NULL,
  `user_email` varchar(75) NOT NULL,
  `user_url` varchar(200) NOT NULL,
  `comment` longtext NOT NULL,
  `submit_date` datetime NOT NULL,
  `ip_address` char(15) DEFAULT NULL,
  `is_public` tinyint(1) NOT NULL,
  `is_removed` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_comments_1bb8f392` (`content_type_id`),
  KEY `django_comments_6223029` (`site_id`),
  KEY `django_comments_403f60f` (`user_id`),
  CONSTRAINT `content_type_id_refs_id_d5868a5` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `user_id_refs_id_7e9ddfef` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `app_label` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'permission','auth','permission'),(2,'group','auth','group'),(3,'user','auth','user'),(4,'message','auth','message'),(5,'content type','contenttypes','contenttype'),(6,'session','sessions','session'),(7,'site','sites','site'),(8,'theory','ant','theory'),(9,'procedure','ant','procedure'),(10,'self evaluation','ant','selfevaluation'),(11,'simulation','ant','simulation'),(12,'exercise','ant','exercise'),(13,'solution','ant','solution'),(14,'book','ant','book'),(15,'reference','ant','reference'),(16,'log entry','admin','logentry'),(17,'workspace','ant','workspace'),(18,'contact','ant','contact'),(19,'comment','comments','comment'),(20,'comment flag','comments','commentflag'),(21,'default code','ant','defaultcode'),(22,'Threaded Comment','threadedcomments','threadedcomment'),(23,'Free Threaded Comment','threadedcomments','freethreadedcomment'),(24,'test model','threadedcomments','testmodel'),(25,'flat page','flatpages','flatpage'),(26,'task meta','djcelery','taskmeta'),(27,'taskset meta','djcelery','tasksetmeta'),(28,'interval','djcelery','intervalschedule'),(29,'crontab','djcelery','crontabschedule'),(30,'periodic tasks','djcelery','periodictasks'),(31,'periodic task','djcelery','periodictask'),(32,'worker','djcelery','workerstate'),(33,'task','djcelery','taskstate');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `django_site`
--

DROP TABLE IF EXISTS `django_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_site`
--

LOCK TABLES `django_site` WRITE;
/*!40000 ALTER TABLE `django_site` DISABLE KEYS */;
INSERT INTO `django_site` VALUES (2,'example.com','ANT');
/*!40000 ALTER TABLE `django_site` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djcelery_crontabschedule`
--

DROP TABLE IF EXISTS `djcelery_crontabschedule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djcelery_crontabschedule` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `minute` varchar(64) NOT NULL,
  `hour` varchar(64) NOT NULL,
  `day_of_week` varchar(64) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djcelery_crontabschedule`
--

LOCK TABLES `djcelery_crontabschedule` WRITE;
/*!40000 ALTER TABLE `djcelery_crontabschedule` DISABLE KEYS */;
/*!40000 ALTER TABLE `djcelery_crontabschedule` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djcelery_intervalschedule`
--

DROP TABLE IF EXISTS `djcelery_intervalschedule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djcelery_intervalschedule` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `every` int(11) NOT NULL,
  `period` varchar(24) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djcelery_intervalschedule`
--

LOCK TABLES `djcelery_intervalschedule` WRITE;
/*!40000 ALTER TABLE `djcelery_intervalschedule` DISABLE KEYS */;
/*!40000 ALTER TABLE `djcelery_intervalschedule` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djcelery_periodictask`
--

DROP TABLE IF EXISTS `djcelery_periodictask`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djcelery_periodictask` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `task` varchar(200) NOT NULL,
  `interval_id` int(11) DEFAULT NULL,
  `crontab_id` int(11) DEFAULT NULL,
  `args` longtext NOT NULL,
  `kwargs` longtext NOT NULL,
  `queue` varchar(200) DEFAULT NULL,
  `exchange` varchar(200) DEFAULT NULL,
  `routing_key` varchar(200) DEFAULT NULL,
  `expires` datetime DEFAULT NULL,
  `enabled` tinyint(1) NOT NULL,
  `last_run_at` datetime DEFAULT NULL,
  `total_run_count` int(10) unsigned NOT NULL,
  `date_changed` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `djcelery_periodictask_17d2d99d` (`interval_id`),
  KEY `djcelery_periodictask_7aa5fda` (`crontab_id`),
  CONSTRAINT `crontab_id_refs_id_1400a18c` FOREIGN KEY (`crontab_id`) REFERENCES `djcelery_crontabschedule` (`id`),
  CONSTRAINT `interval_id_refs_id_dfabcb7` FOREIGN KEY (`interval_id`) REFERENCES `djcelery_intervalschedule` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djcelery_periodictask`
--

LOCK TABLES `djcelery_periodictask` WRITE;
/*!40000 ALTER TABLE `djcelery_periodictask` DISABLE KEYS */;
/*!40000 ALTER TABLE `djcelery_periodictask` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djcelery_periodictasks`
--

DROP TABLE IF EXISTS `djcelery_periodictasks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djcelery_periodictasks` (
  `ident` smallint(6) NOT NULL,
  `last_update` datetime NOT NULL,
  PRIMARY KEY (`ident`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djcelery_periodictasks`
--

LOCK TABLES `djcelery_periodictasks` WRITE;
/*!40000 ALTER TABLE `djcelery_periodictasks` DISABLE KEYS */;
/*!40000 ALTER TABLE `djcelery_periodictasks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djcelery_taskstate`
--

DROP TABLE IF EXISTS `djcelery_taskstate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djcelery_taskstate` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `state` varchar(64) NOT NULL,
  `task_id` varchar(36) NOT NULL,
  `name` varchar(200) DEFAULT NULL,
  `tstamp` datetime NOT NULL,
  `args` longtext,
  `kwargs` longtext,
  `eta` datetime DEFAULT NULL,
  `expires` datetime DEFAULT NULL,
  `result` longtext,
  `traceback` longtext,
  `runtime` double DEFAULT NULL,
  `retries` int(11) NOT NULL,
  `worker_id` int(11) DEFAULT NULL,
  `hidden` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `task_id` (`task_id`),
  KEY `djcelery_taskstate_355bfc27` (`state`),
  KEY `djcelery_taskstate_52094d6e` (`name`),
  KEY `djcelery_taskstate_f459b00` (`tstamp`),
  KEY `djcelery_taskstate_20fc5b84` (`worker_id`),
  KEY `djcelery_taskstate_c91f1bf` (`hidden`),
  CONSTRAINT `worker_id_refs_id_4e3453a` FOREIGN KEY (`worker_id`) REFERENCES `djcelery_workerstate` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djcelery_taskstate`
--

LOCK TABLES `djcelery_taskstate` WRITE;
/*!40000 ALTER TABLE `djcelery_taskstate` DISABLE KEYS */;
/*!40000 ALTER TABLE `djcelery_taskstate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djcelery_workerstate`
--

DROP TABLE IF EXISTS `djcelery_workerstate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djcelery_workerstate` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `hostname` varchar(255) NOT NULL,
  `last_heartbeat` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `hostname` (`hostname`),
  KEY `djcelery_workerstate_1475381c` (`last_heartbeat`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djcelery_workerstate`
--

LOCK TABLES `djcelery_workerstate` WRITE;
/*!40000 ALTER TABLE `djcelery_workerstate` DISABLE KEYS */;
/*!40000 ALTER TABLE `djcelery_workerstate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `threadedcomments_freethreadedcomment`
--

DROP TABLE IF EXISTS `threadedcomments_freethreadedcomment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `threadedcomments_freethreadedcomment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content_type_id` int(11) NOT NULL,
  `object_id` int(10) unsigned NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `name` varchar(128) NOT NULL,
  `website` varchar(200) NOT NULL,
  `email` varchar(75) NOT NULL,
  `date_submitted` datetime NOT NULL,
  `date_modified` datetime NOT NULL,
  `date_approved` datetime DEFAULT NULL,
  `comment` longtext NOT NULL,
  `markup` int(11) DEFAULT NULL,
  `is_public` tinyint(1) NOT NULL,
  `is_approved` tinyint(1) NOT NULL,
  `ip_address` char(15) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `threadedcomments_freethreadedcomment_1bb8f392` (`content_type_id`),
  KEY `threadedcomments_freethreadedcomment_63f17a16` (`parent_id`),
  CONSTRAINT `content_type_id_refs_id_4b613360` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `parent_id_refs_id_7380f46b` FOREIGN KEY (`parent_id`) REFERENCES `threadedcomments_freethreadedcomment` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `threadedcomments_freethreadedcomment`
--

LOCK TABLES `threadedcomments_freethreadedcomment` WRITE;
/*!40000 ALTER TABLE `threadedcomments_freethreadedcomment` DISABLE KEYS */;
/*!40000 ALTER TABLE `threadedcomments_freethreadedcomment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `threadedcomments_testmodel`
--

DROP TABLE IF EXISTS `threadedcomments_testmodel`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `threadedcomments_testmodel` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(5) NOT NULL,
  `is_public` tinyint(1) NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `threadedcomments_testmodel`
--

LOCK TABLES `threadedcomments_testmodel` WRITE;
/*!40000 ALTER TABLE `threadedcomments_testmodel` DISABLE KEYS */;
/*!40000 ALTER TABLE `threadedcomments_testmodel` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `threadedcomments_threadedcomment`
--

DROP TABLE IF EXISTS `threadedcomments_threadedcomment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `threadedcomments_threadedcomment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content_type_id` int(11) NOT NULL,
  `object_id` int(10) unsigned NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `date_submitted` datetime NOT NULL,
  `date_modified` datetime NOT NULL,
  `date_approved` datetime DEFAULT NULL,
  `comment` longtext NOT NULL,
  `markup` int(11) DEFAULT NULL,
  `is_public` tinyint(1) NOT NULL,
  `is_approved` tinyint(1) NOT NULL,
  `ip_address` char(15) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `threadedcomments_threadedcomment_1bb8f392` (`content_type_id`),
  KEY `threadedcomments_threadedcomment_63f17a16` (`parent_id`),
  KEY `threadedcomments_threadedcomment_403f60f` (`user_id`),
  CONSTRAINT `content_type_id_refs_id_50b635c6` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `parent_id_refs_id_7ef2a789` FOREIGN KEY (`parent_id`) REFERENCES `threadedcomments_threadedcomment` (`id`),
  CONSTRAINT `user_id_refs_id_3c567b6` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `threadedcomments_threadedcomment`
--

LOCK TABLES `threadedcomments_threadedcomment` WRITE;
/*!40000 ALTER TABLE `threadedcomments_threadedcomment` DISABLE KEYS */;
/*!40000 ALTER TABLE `threadedcomments_threadedcomment` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2014-03-19 19:03:25
